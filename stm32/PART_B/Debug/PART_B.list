
PART_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08014000  08014000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  0801410c  0801410c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080170f4  080170f4  000040f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017120  08017120  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08017120  08017120  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017120  08017120  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017120  08017120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017124  08017124  00004124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08017128  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004910  20000018  0801713c  00005018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004928  0801713c  00005928  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a281  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021af  00000000  00000000  0000f2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00011470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  00011e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000812f  00000000  00000000  000125d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002f70  00000000  00000000  0001a701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0001d671  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000026a4  00000000  00000000  0001d6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000047  00000000  00000000  0001fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801410c <__do_global_dtors_aux>:
 801410c:	b510      	push	{r4, lr}
 801410e:	4c05      	ldr	r4, [pc, #20]	@ (8014124 <__do_global_dtors_aux+0x18>)
 8014110:	7823      	ldrb	r3, [r4, #0]
 8014112:	b933      	cbnz	r3, 8014122 <__do_global_dtors_aux+0x16>
 8014114:	4b04      	ldr	r3, [pc, #16]	@ (8014128 <__do_global_dtors_aux+0x1c>)
 8014116:	b113      	cbz	r3, 801411e <__do_global_dtors_aux+0x12>
 8014118:	4804      	ldr	r0, [pc, #16]	@ (801412c <__do_global_dtors_aux+0x20>)
 801411a:	f3af 8000 	nop.w
 801411e:	2301      	movs	r3, #1
 8014120:	7023      	strb	r3, [r4, #0]
 8014122:	bd10      	pop	{r4, pc}
 8014124:	20000018 	.word	0x20000018
 8014128:	00000000 	.word	0x00000000
 801412c:	080170dc 	.word	0x080170dc

08014130 <frame_dummy>:
 8014130:	b508      	push	{r3, lr}
 8014132:	4b03      	ldr	r3, [pc, #12]	@ (8014140 <frame_dummy+0x10>)
 8014134:	b11b      	cbz	r3, 801413e <frame_dummy+0xe>
 8014136:	4903      	ldr	r1, [pc, #12]	@ (8014144 <frame_dummy+0x14>)
 8014138:	4803      	ldr	r0, [pc, #12]	@ (8014148 <frame_dummy+0x18>)
 801413a:	f3af 8000 	nop.w
 801413e:	bd08      	pop	{r3, pc}
 8014140:	00000000 	.word	0x00000000
 8014144:	2000001c 	.word	0x2000001c
 8014148:	080170dc 	.word	0x080170dc

0801414c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  __HAL_RCC_CAN1_CLK_ENABLE(); // CAN1 클럭 활성화
 8014152:	4b1f      	ldr	r3, [pc, #124]	@ (80141d0 <MX_CAN_Init+0x84>)
 8014154:	69db      	ldr	r3, [r3, #28]
 8014156:	4a1e      	ldr	r2, [pc, #120]	@ (80141d0 <MX_CAN_Init+0x84>)
 8014158:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801415c:	61d3      	str	r3, [r2, #28]
 801415e:	4b1c      	ldr	r3, [pc, #112]	@ (80141d0 <MX_CAN_Init+0x84>)
 8014160:	69db      	ldr	r3, [r3, #28]
 8014162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014166:	607b      	str	r3, [r7, #4]
 8014168:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 801416a:	4b1a      	ldr	r3, [pc, #104]	@ (80141d4 <MX_CAN_Init+0x88>)
 801416c:	4a1a      	ldr	r2, [pc, #104]	@ (80141d8 <MX_CAN_Init+0x8c>)
 801416e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8014170:	4b18      	ldr	r3, [pc, #96]	@ (80141d4 <MX_CAN_Init+0x88>)
 8014172:	2204      	movs	r2, #4
 8014174:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8014176:	4b17      	ldr	r3, [pc, #92]	@ (80141d4 <MX_CAN_Init+0x88>)
 8014178:	2200      	movs	r2, #0
 801417a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801417c:	4b15      	ldr	r3, [pc, #84]	@ (80141d4 <MX_CAN_Init+0x88>)
 801417e:	2200      	movs	r2, #0
 8014180:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8014182:	4b14      	ldr	r3, [pc, #80]	@ (80141d4 <MX_CAN_Init+0x88>)
 8014184:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8014188:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 801418a:	4b12      	ldr	r3, [pc, #72]	@ (80141d4 <MX_CAN_Init+0x88>)
 801418c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014190:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8014192:	4b10      	ldr	r3, [pc, #64]	@ (80141d4 <MX_CAN_Init+0x88>)
 8014194:	2200      	movs	r2, #0
 8014196:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8014198:	4b0e      	ldr	r3, [pc, #56]	@ (80141d4 <MX_CAN_Init+0x88>)
 801419a:	2200      	movs	r2, #0
 801419c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 801419e:	4b0d      	ldr	r3, [pc, #52]	@ (80141d4 <MX_CAN_Init+0x88>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80141a4:	4b0b      	ldr	r3, [pc, #44]	@ (80141d4 <MX_CAN_Init+0x88>)
 80141a6:	2200      	movs	r2, #0
 80141a8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80141aa:	4b0a      	ldr	r3, [pc, #40]	@ (80141d4 <MX_CAN_Init+0x88>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80141b0:	4b08      	ldr	r3, [pc, #32]	@ (80141d4 <MX_CAN_Init+0x88>)
 80141b2:	2200      	movs	r2, #0
 80141b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80141b6:	4807      	ldr	r0, [pc, #28]	@ (80141d4 <MX_CAN_Init+0x88>)
 80141b8:	f000 ff1c 	bl	8014ff4 <HAL_CAN_Init>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d001      	beq.n	80141c6 <MX_CAN_Init+0x7a>
  {
    Error_Handler();
 80141c2:	f000 fd73 	bl	8014cac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80141c6:	bf00      	nop
 80141c8:	3708      	adds	r7, #8
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
 80141ce:	bf00      	nop
 80141d0:	40021000 	.word	0x40021000
 80141d4:	20000034 	.word	0x20000034
 80141d8:	40006400 	.word	0x40006400

080141dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b088      	sub	sp, #32
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80141e4:	f107 0310 	add.w	r3, r7, #16
 80141e8:	2200      	movs	r2, #0
 80141ea:	601a      	str	r2, [r3, #0]
 80141ec:	605a      	str	r2, [r3, #4]
 80141ee:	609a      	str	r2, [r3, #8]
 80141f0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	4a24      	ldr	r2, [pc, #144]	@ (8014288 <HAL_CAN_MspInit+0xac>)
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d141      	bne.n	8014280 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80141fc:	4b23      	ldr	r3, [pc, #140]	@ (801428c <HAL_CAN_MspInit+0xb0>)
 80141fe:	69db      	ldr	r3, [r3, #28]
 8014200:	4a22      	ldr	r2, [pc, #136]	@ (801428c <HAL_CAN_MspInit+0xb0>)
 8014202:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014206:	61d3      	str	r3, [r2, #28]
 8014208:	4b20      	ldr	r3, [pc, #128]	@ (801428c <HAL_CAN_MspInit+0xb0>)
 801420a:	69db      	ldr	r3, [r3, #28]
 801420c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014210:	60fb      	str	r3, [r7, #12]
 8014212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014214:	4b1d      	ldr	r3, [pc, #116]	@ (801428c <HAL_CAN_MspInit+0xb0>)
 8014216:	699b      	ldr	r3, [r3, #24]
 8014218:	4a1c      	ldr	r2, [pc, #112]	@ (801428c <HAL_CAN_MspInit+0xb0>)
 801421a:	f043 0304 	orr.w	r3, r3, #4
 801421e:	6193      	str	r3, [r2, #24]
 8014220:	4b1a      	ldr	r3, [pc, #104]	@ (801428c <HAL_CAN_MspInit+0xb0>)
 8014222:	699b      	ldr	r3, [r3, #24]
 8014224:	f003 0304 	and.w	r3, r3, #4
 8014228:	60bb      	str	r3, [r7, #8]
 801422a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801422c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014232:	2300      	movs	r3, #0
 8014234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014236:	2300      	movs	r3, #0
 8014238:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801423a:	f107 0310 	add.w	r3, r7, #16
 801423e:	4619      	mov	r1, r3
 8014240:	4813      	ldr	r0, [pc, #76]	@ (8014290 <HAL_CAN_MspInit+0xb4>)
 8014242:	f002 f849 	bl	80162d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8014246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801424a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801424c:	2302      	movs	r3, #2
 801424e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014250:	2303      	movs	r3, #3
 8014252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014254:	f107 0310 	add.w	r3, r7, #16
 8014258:	4619      	mov	r1, r3
 801425a:	480d      	ldr	r0, [pc, #52]	@ (8014290 <HAL_CAN_MspInit+0xb4>)
 801425c:	f002 f83c 	bl	80162d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8014260:	2200      	movs	r2, #0
 8014262:	2100      	movs	r1, #0
 8014264:	2014      	movs	r0, #20
 8014266:	f001 fe00 	bl	8015e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 801426a:	2014      	movs	r0, #20
 801426c:	f001 fe19 	bl	8015ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8014270:	2200      	movs	r2, #0
 8014272:	2100      	movs	r1, #0
 8014274:	2015      	movs	r0, #21
 8014276:	f001 fdf8 	bl	8015e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 801427a:	2015      	movs	r0, #21
 801427c:	f001 fe11 	bl	8015ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8014280:	bf00      	nop
 8014282:	3720      	adds	r7, #32
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	40006400 	.word	0x40006400
 801428c:	40021000 	.word	0x40021000
 8014290:	40010800 	.word	0x40010800

08014294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b088      	sub	sp, #32
 8014298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801429a:	f107 0310 	add.w	r3, r7, #16
 801429e:	2200      	movs	r2, #0
 80142a0:	601a      	str	r2, [r3, #0]
 80142a2:	605a      	str	r2, [r3, #4]
 80142a4:	609a      	str	r2, [r3, #8]
 80142a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80142a8:	4b2d      	ldr	r3, [pc, #180]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142aa:	699b      	ldr	r3, [r3, #24]
 80142ac:	4a2c      	ldr	r2, [pc, #176]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142ae:	f043 0310 	orr.w	r3, r3, #16
 80142b2:	6193      	str	r3, [r2, #24]
 80142b4:	4b2a      	ldr	r3, [pc, #168]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142b6:	699b      	ldr	r3, [r3, #24]
 80142b8:	f003 0310 	and.w	r3, r3, #16
 80142bc:	60fb      	str	r3, [r7, #12]
 80142be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80142c0:	4b27      	ldr	r3, [pc, #156]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142c2:	699b      	ldr	r3, [r3, #24]
 80142c4:	4a26      	ldr	r2, [pc, #152]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142c6:	f043 0320 	orr.w	r3, r3, #32
 80142ca:	6193      	str	r3, [r2, #24]
 80142cc:	4b24      	ldr	r3, [pc, #144]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142ce:	699b      	ldr	r3, [r3, #24]
 80142d0:	f003 0320 	and.w	r3, r3, #32
 80142d4:	60bb      	str	r3, [r7, #8]
 80142d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80142d8:	4b21      	ldr	r3, [pc, #132]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142da:	699b      	ldr	r3, [r3, #24]
 80142dc:	4a20      	ldr	r2, [pc, #128]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142de:	f043 0304 	orr.w	r3, r3, #4
 80142e2:	6193      	str	r3, [r2, #24]
 80142e4:	4b1e      	ldr	r3, [pc, #120]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142e6:	699b      	ldr	r3, [r3, #24]
 80142e8:	f003 0304 	and.w	r3, r3, #4
 80142ec:	607b      	str	r3, [r7, #4]
 80142ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80142f0:	4b1b      	ldr	r3, [pc, #108]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142f2:	699b      	ldr	r3, [r3, #24]
 80142f4:	4a1a      	ldr	r2, [pc, #104]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142f6:	f043 0308 	orr.w	r3, r3, #8
 80142fa:	6193      	str	r3, [r2, #24]
 80142fc:	4b18      	ldr	r3, [pc, #96]	@ (8014360 <MX_GPIO_Init+0xcc>)
 80142fe:	699b      	ldr	r3, [r3, #24]
 8014300:	f003 0308 	and.w	r3, r3, #8
 8014304:	603b      	str	r3, [r7, #0]
 8014306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8014308:	2200      	movs	r2, #0
 801430a:	2120      	movs	r1, #32
 801430c:	4815      	ldr	r0, [pc, #84]	@ (8014364 <MX_GPIO_Init+0xd0>)
 801430e:	f002 f967 	bl	80165e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8014312:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014318:	4b13      	ldr	r3, [pc, #76]	@ (8014368 <MX_GPIO_Init+0xd4>)
 801431a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801431c:	2300      	movs	r3, #0
 801431e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8014320:	f107 0310 	add.w	r3, r7, #16
 8014324:	4619      	mov	r1, r3
 8014326:	4811      	ldr	r0, [pc, #68]	@ (801436c <MX_GPIO_Init+0xd8>)
 8014328:	f001 ffd6 	bl	80162d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 801432c:	2320      	movs	r3, #32
 801432e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014330:	2301      	movs	r3, #1
 8014332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014334:	2300      	movs	r3, #0
 8014336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014338:	2302      	movs	r3, #2
 801433a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 801433c:	f107 0310 	add.w	r3, r7, #16
 8014340:	4619      	mov	r1, r3
 8014342:	4808      	ldr	r0, [pc, #32]	@ (8014364 <MX_GPIO_Init+0xd0>)
 8014344:	f001 ffc8 	bl	80162d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8014348:	2200      	movs	r2, #0
 801434a:	2100      	movs	r1, #0
 801434c:	2028      	movs	r0, #40	@ 0x28
 801434e:	f001 fd8c 	bl	8015e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8014352:	2028      	movs	r0, #40	@ 0x28
 8014354:	f001 fda5 	bl	8015ea2 <HAL_NVIC_EnableIRQ>

}
 8014358:	bf00      	nop
 801435a:	3720      	adds	r7, #32
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}
 8014360:	40021000 	.word	0x40021000
 8014364:	40010800 	.word	0x40010800
 8014368:	10110000 	.word	0x10110000
 801436c:	40011000 	.word	0x40011000

08014370 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8014370:	b480      	push	{r7}
 8014372:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8014374:	f3bf 8f4f 	dsb	sy
}
 8014378:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801437a:	4b06      	ldr	r3, [pc, #24]	@ (8014394 <__NVIC_SystemReset+0x24>)
 801437c:	68db      	ldr	r3, [r3, #12]
 801437e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014382:	4904      	ldr	r1, [pc, #16]	@ (8014394 <__NVIC_SystemReset+0x24>)
 8014384:	4b04      	ldr	r3, [pc, #16]	@ (8014398 <__NVIC_SystemReset+0x28>)
 8014386:	4313      	orrs	r3, r2
 8014388:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801438a:	f3bf 8f4f 	dsb	sy
}
 801438e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014390:	bf00      	nop
 8014392:	e7fd      	b.n	8014390 <__NVIC_SystemReset+0x20>
 8014394:	e000ed00 	.word	0xe000ed00
 8014398:	05fa0004 	.word	0x05fa0004

0801439c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b08c      	sub	sp, #48	@ 0x30
 80143a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80143a2:	f000 fda1 	bl	8014ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80143a6:	f000 f895 	bl	80144d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  NVIC_Config();
 80143aa:	f000 f973 	bl	8014694 <NVIC_Config>

  HAL_PWR_EnableBkUpAccess();
 80143ae:	f002 f951 	bl	8016654 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BKP_CLK_ENABLE();
 80143b2:	4b41      	ldr	r3, [pc, #260]	@ (80144b8 <main+0x11c>)
 80143b4:	69db      	ldr	r3, [r3, #28]
 80143b6:	4a40      	ldr	r2, [pc, #256]	@ (80144b8 <main+0x11c>)
 80143b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80143bc:	61d3      	str	r3, [r2, #28]
 80143be:	4b3e      	ldr	r3, [pc, #248]	@ (80144b8 <main+0x11c>)
 80143c0:	69db      	ldr	r3, [r3, #28]
 80143c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80143c6:	607b      	str	r3, [r7, #4]
 80143c8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80143ca:	f7ff ff63 	bl	8014294 <MX_GPIO_Init>
  MX_CAN_Init();
 80143ce:	f7ff febd 	bl	801414c <MX_CAN_Init>
  MX_USART2_UART_Init();
 80143d2:	f000 fcfb 	bl	8014dcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK){
 80143d6:	4839      	ldr	r0, [pc, #228]	@ (80144bc <main+0x120>)
 80143d8:	f000 ffd0 	bl	801537c <HAL_CAN_Start>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d001      	beq.n	80143e6 <main+0x4a>
	  Error_Handler();
 80143e2:	f000 fc63 	bl	8014cac <Error_Handler>
  }

  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80143e6:	2301      	movs	r3, #1
 80143e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  canFilterConfig.FilterBank = 0;
 80143ea:	2300      	movs	r3, #0
 80143ec:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80143ee:	2300      	movs	r3, #0
 80143f0:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterIdHigh = 0x0000;
 80143f2:	2300      	movs	r3, #0
 80143f4:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow = 0x0000;
 80143f6:	2300      	movs	r3, #0
 80143f8:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh = 0x0000;
 80143fa:	2300      	movs	r3, #0
 80143fc:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 80143fe:	2300      	movs	r3, #0
 8014400:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8014402:	2300      	movs	r3, #0
 8014404:	623b      	str	r3, [r7, #32]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8014406:	2301      	movs	r3, #1
 8014408:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK)
 801440a:	f107 0308 	add.w	r3, r7, #8
 801440e:	4619      	mov	r1, r3
 8014410:	482a      	ldr	r0, [pc, #168]	@ (80144bc <main+0x120>)
 8014412:	f000 feea 	bl	80151ea <HAL_CAN_ConfigFilter>
 8014416:	4603      	mov	r3, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	d001      	beq.n	8014420 <main+0x84>
  {
	  Error_Handler();
 801441c:	f000 fc46 	bl	8014cac <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8014420:	2102      	movs	r1, #2
 8014422:	4826      	ldr	r0, [pc, #152]	@ (80144bc <main+0x120>)
 8014424:	f001 fa01 	bl	801582a <HAL_CAN_ActivateNotification>
 8014428:	4603      	mov	r3, r0
 801442a:	2b00      	cmp	r3, #0
 801442c:	d001      	beq.n	8014432 <main+0x96>
	  Error_Handler();
 801442e:	f000 fc3d 	bl	8014cac <Error_Handler>
  }

  SendFirmwareStartedMessage();
 8014432:	f000 f8fd 	bl	8014630 <SendFirmwareStartedMessage>
  TxHeader.DLC = 8;
 8014436:	4b22      	ldr	r3, [pc, #136]	@ (80144c0 <main+0x124>)
 8014438:	2208      	movs	r2, #8
 801443a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 801443c:	4b20      	ldr	r3, [pc, #128]	@ (80144c0 <main+0x124>)
 801443e:	2200      	movs	r2, #0
 8014440:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8014442:	4b1f      	ldr	r3, [pc, #124]	@ (80144c0 <main+0x124>)
 8014444:	2200      	movs	r2, #0
 8014446:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x780;
 8014448:	4b1d      	ldr	r3, [pc, #116]	@ (80144c0 <main+0x124>)
 801444a:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 801444e:	601a      	str	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	if (fwUpdateState == FW_UPDATE_IDLE){
 8014450:	4b1c      	ldr	r3, [pc, #112]	@ (80144c4 <main+0x128>)
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d12b      	bne.n	80144b0 <main+0x114>
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8014458:	4b1b      	ldr	r3, [pc, #108]	@ (80144c8 <main+0x12c>)
 801445a:	4a1c      	ldr	r2, [pc, #112]	@ (80144cc <main+0x130>)
 801445c:	4918      	ldr	r1, [pc, #96]	@ (80144c0 <main+0x124>)
 801445e:	4817      	ldr	r0, [pc, #92]	@ (80144bc <main+0x120>)
 8014460:	f000 ffd0 	bl	8015404 <HAL_CAN_AddTxMessage>
 8014464:	4603      	mov	r3, r0
 8014466:	2b00      	cmp	r3, #0
 8014468:	d001      	beq.n	801446e <main+0xd2>
			Error_Handler();
 801446a:	f000 fc1f 	bl	8014cac <Error_Handler>
		}

		TxData[1] += 0x11;
 801446e:	4b17      	ldr	r3, [pc, #92]	@ (80144cc <main+0x130>)
 8014470:	785b      	ldrb	r3, [r3, #1]
 8014472:	3311      	adds	r3, #17
 8014474:	b2da      	uxtb	r2, r3
 8014476:	4b15      	ldr	r3, [pc, #84]	@ (80144cc <main+0x130>)
 8014478:	705a      	strb	r2, [r3, #1]
		TxData[4] += 0x12;
 801447a:	4b14      	ldr	r3, [pc, #80]	@ (80144cc <main+0x130>)
 801447c:	791b      	ldrb	r3, [r3, #4]
 801447e:	3312      	adds	r3, #18
 8014480:	b2da      	uxtb	r2, r3
 8014482:	4b12      	ldr	r3, [pc, #72]	@ (80144cc <main+0x130>)
 8014484:	711a      	strb	r2, [r3, #4]
		TxData[7] += 0x13;
 8014486:	4b11      	ldr	r3, [pc, #68]	@ (80144cc <main+0x130>)
 8014488:	79db      	ldrb	r3, [r3, #7]
 801448a:	3313      	adds	r3, #19
 801448c:	b2da      	uxtb	r2, r3
 801448e:	4b0f      	ldr	r3, [pc, #60]	@ (80144cc <main+0x130>)
 8014490:	71da      	strb	r2, [r3, #7]
		HAL_Delay(100);
 8014492:	2064      	movs	r0, #100	@ 0x64
 8014494:	f000 fd8a 	bl	8014fac <HAL_Delay>

		LD2Counter++;
 8014498:	4b0d      	ldr	r3, [pc, #52]	@ (80144d0 <main+0x134>)
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	3301      	adds	r3, #1
 801449e:	b2da      	uxtb	r2, r3
 80144a0:	4b0b      	ldr	r3, [pc, #44]	@ (80144d0 <main+0x134>)
 80144a2:	701a      	strb	r2, [r3, #0]
		if (LD2Counter > 5)
 80144a4:	4b0a      	ldr	r3, [pc, #40]	@ (80144d0 <main+0x134>)
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	2b05      	cmp	r3, #5
 80144aa:	d901      	bls.n	80144b0 <main+0x114>
			LD2Flip();
 80144ac:	f000 f878 	bl	80145a0 <LD2Flip>
//		//fwUpdateAddress = APPLICATION_A_ADDRESS;
//		//BKP->DR1 = 0x01;
//	}


	FirmwareUpdateStateMachine();
 80144b0:	f000 fafc 	bl	8014aac <FirmwareUpdateStateMachine>
	if (fwUpdateState == FW_UPDATE_IDLE){
 80144b4:	e7cc      	b.n	8014450 <main+0xb4>
 80144b6:	bf00      	nop
 80144b8:	40021000 	.word	0x40021000
 80144bc:	20000034 	.word	0x20000034
 80144c0:	2000005c 	.word	0x2000005c
 80144c4:	20000080 	.word	0x20000080
 80144c8:	2000007c 	.word	0x2000007c
 80144cc:	20000074 	.word	0x20000074
 80144d0:	20000090 	.word	0x20000090

080144d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b092      	sub	sp, #72	@ 0x48
 80144d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80144da:	f107 031c 	add.w	r3, r7, #28
 80144de:	2228      	movs	r2, #40	@ 0x28
 80144e0:	2100      	movs	r1, #0
 80144e2:	4618      	mov	r0, r3
 80144e4:	f002 fdc0 	bl	8017068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80144e8:	f107 0308 	add.w	r3, r7, #8
 80144ec:	2200      	movs	r2, #0
 80144ee:	601a      	str	r2, [r3, #0]
 80144f0:	605a      	str	r2, [r3, #4]
 80144f2:	609a      	str	r2, [r3, #8]
 80144f4:	60da      	str	r2, [r3, #12]
 80144f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80144f8:	2301      	movs	r3, #1
 80144fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80144fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014500:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8014502:	2300      	movs	r3, #0
 8014504:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8014506:	2301      	movs	r3, #1
 8014508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801450a:	2302      	movs	r3, #2
 801450c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801450e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8014514:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8014518:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801451a:	f107 031c 	add.w	r3, r7, #28
 801451e:	4618      	mov	r0, r3
 8014520:	f002 f8a4 	bl	801666c <HAL_RCC_OscConfig>
 8014524:	4603      	mov	r3, r0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d001      	beq.n	801452e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 801452a:	f000 fbbf 	bl	8014cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801452e:	230f      	movs	r3, #15
 8014530:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014532:	2302      	movs	r3, #2
 8014534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014536:	2300      	movs	r3, #0
 8014538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 801453a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 801453e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8014540:	2300      	movs	r3, #0
 8014542:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8014544:	f107 0308 	add.w	r3, r7, #8
 8014548:	2102      	movs	r1, #2
 801454a:	4618      	mov	r0, r3
 801454c:	f002 fb10 	bl	8016b70 <HAL_RCC_ClockConfig>
 8014550:	4603      	mov	r3, r0
 8014552:	2b00      	cmp	r3, #0
 8014554:	d001      	beq.n	801455a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8014556:	f000 fba9 	bl	8014cac <Error_Handler>
  }

  __HAL_RCC_AFIO_CLK_ENABLE();
 801455a:	4b0f      	ldr	r3, [pc, #60]	@ (8014598 <SystemClock_Config+0xc4>)
 801455c:	699b      	ldr	r3, [r3, #24]
 801455e:	4a0e      	ldr	r2, [pc, #56]	@ (8014598 <SystemClock_Config+0xc4>)
 8014560:	f043 0301 	orr.w	r3, r3, #1
 8014564:	6193      	str	r3, [r2, #24]
 8014566:	4b0c      	ldr	r3, [pc, #48]	@ (8014598 <SystemClock_Config+0xc4>)
 8014568:	699b      	ldr	r3, [r3, #24]
 801456a:	f003 0301 	and.w	r3, r3, #1
 801456e:	607b      	str	r3, [r7, #4]
 8014570:	687b      	ldr	r3, [r7, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8014572:	4b0a      	ldr	r3, [pc, #40]	@ (801459c <SystemClock_Config+0xc8>)
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	647b      	str	r3, [r7, #68]	@ 0x44
 8014578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801457a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 801457e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014586:	647b      	str	r3, [r7, #68]	@ 0x44
 8014588:	4a04      	ldr	r2, [pc, #16]	@ (801459c <SystemClock_Config+0xc8>)
 801458a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801458c:	6053      	str	r3, [r2, #4]
}
 801458e:	bf00      	nop
 8014590:	3748      	adds	r7, #72	@ 0x48
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	40021000 	.word	0x40021000
 801459c:	40010000 	.word	0x40010000

080145a0 <LD2Flip>:

/* USER CODE BEGIN 4 */
void LD2Flip(void){
 80145a0:	b580      	push	{r7, lr}
 80145a2:	af00      	add	r7, sp, #0
	if (ledState == 0)
 80145a4:	4b0c      	ldr	r3, [pc, #48]	@ (80145d8 <LD2Flip+0x38>)
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d108      	bne.n	80145be <LD2Flip+0x1e>
	{
		ledState = 1;
 80145ac:	4b0a      	ldr	r3, [pc, #40]	@ (80145d8 <LD2Flip+0x38>)
 80145ae:	2201      	movs	r2, #1
 80145b0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80145b2:	2201      	movs	r2, #1
 80145b4:	2120      	movs	r1, #32
 80145b6:	4809      	ldr	r0, [pc, #36]	@ (80145dc <LD2Flip+0x3c>)
 80145b8:	f002 f812 	bl	80165e0 <HAL_GPIO_WritePin>
 80145bc:	e007      	b.n	80145ce <LD2Flip+0x2e>
	}
	else
	{
		ledState = 0;
 80145be:	4b06      	ldr	r3, [pc, #24]	@ (80145d8 <LD2Flip+0x38>)
 80145c0:	2200      	movs	r2, #0
 80145c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80145c4:	2200      	movs	r2, #0
 80145c6:	2120      	movs	r1, #32
 80145c8:	4804      	ldr	r0, [pc, #16]	@ (80145dc <LD2Flip+0x3c>)
 80145ca:	f002 f809 	bl	80165e0 <HAL_GPIO_WritePin>
	}
	LD2Counter = 0;
 80145ce:	4b04      	ldr	r3, [pc, #16]	@ (80145e0 <LD2Flip+0x40>)
 80145d0:	2200      	movs	r2, #0
 80145d2:	701a      	strb	r2, [r3, #0]
}
 80145d4:	bf00      	nop
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	20000091 	.word	0x20000091
 80145dc:	40010800 	.word	0x40010800
 80145e0:	20000090 	.word	0x20000090

080145e4 <SetBootFlag>:
void SetBootFlag(void){
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();
 80145ea:	f002 f833 	bl	8016654 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_BKP_CLK_ENABLE();
 80145ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014628 <SetBootFlag+0x44>)
 80145f0:	69db      	ldr	r3, [r3, #28]
 80145f2:	4a0d      	ldr	r2, [pc, #52]	@ (8014628 <SetBootFlag+0x44>)
 80145f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80145f8:	61d3      	str	r3, [r2, #28]
 80145fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014628 <SetBootFlag+0x44>)
 80145fc:	69db      	ldr	r3, [r3, #28]
 80145fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014602:	603b      	str	r3, [r7, #0]
 8014604:	683b      	ldr	r3, [r7, #0]
	uint32_t boot_flag = BOOT_FLAG_ADDR;
 8014606:	4b09      	ldr	r3, [pc, #36]	@ (801462c <SetBootFlag+0x48>)
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	607b      	str	r3, [r7, #4]
	if (boot_flag == BOOT_FLAG_A)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b01      	cmp	r3, #1
 8014610:	d103      	bne.n	801461a <SetBootFlag+0x36>
		BOOT_FLAG_ADDR = BOOT_FLAG_B;
 8014612:	4b06      	ldr	r3, [pc, #24]	@ (801462c <SetBootFlag+0x48>)
 8014614:	2202      	movs	r2, #2
 8014616:	605a      	str	r2, [r3, #4]
	else
		BOOT_FLAG_ADDR = BOOT_FLAG_A;
}
 8014618:	e002      	b.n	8014620 <SetBootFlag+0x3c>
		BOOT_FLAG_ADDR = BOOT_FLAG_A;
 801461a:	4b04      	ldr	r3, [pc, #16]	@ (801462c <SetBootFlag+0x48>)
 801461c:	2201      	movs	r2, #1
 801461e:	605a      	str	r2, [r3, #4]
}
 8014620:	bf00      	nop
 8014622:	3708      	adds	r7, #8
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	40021000 	.word	0x40021000
 801462c:	40006c00 	.word	0x40006c00

08014630 <SendFirmwareStartedMessage>:

void SendFirmwareStartedMessage(void)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 8014634:	4b13      	ldr	r3, [pc, #76]	@ (8014684 <SendFirmwareStartedMessage+0x54>)
 8014636:	227a      	movs	r2, #122	@ 0x7a
 8014638:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 801463a:	4b12      	ldr	r3, [pc, #72]	@ (8014684 <SendFirmwareStartedMessage+0x54>)
 801463c:	2200      	movs	r2, #0
 801463e:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 8014640:	4b10      	ldr	r3, [pc, #64]	@ (8014684 <SendFirmwareStartedMessage+0x54>)
 8014642:	2200      	movs	r2, #0
 8014644:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 1;
 8014646:	4b0f      	ldr	r3, [pc, #60]	@ (8014684 <SendFirmwareStartedMessage+0x54>)
 8014648:	2201      	movs	r2, #1
 801464a:	611a      	str	r2, [r3, #16]

    txData[0] = 0x01; // 펌웨어 시작 알림 신호
 801464c:	4b0e      	ldr	r3, [pc, #56]	@ (8014688 <SendFirmwareStartedMessage+0x58>)
 801464e:	2201      	movs	r2, #1
 8014650:	701a      	strb	r2, [r3, #0]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8014652:	4b0e      	ldr	r3, [pc, #56]	@ (801468c <SendFirmwareStartedMessage+0x5c>)
 8014654:	4a0c      	ldr	r2, [pc, #48]	@ (8014688 <SendFirmwareStartedMessage+0x58>)
 8014656:	490b      	ldr	r1, [pc, #44]	@ (8014684 <SendFirmwareStartedMessage+0x54>)
 8014658:	480d      	ldr	r0, [pc, #52]	@ (8014690 <SendFirmwareStartedMessage+0x60>)
 801465a:	f000 fed3 	bl	8015404 <HAL_CAN_AddTxMessage>
 801465e:	4603      	mov	r3, r0
 8014660:	2b00      	cmp	r3, #0
 8014662:	d001      	beq.n	8014668 <SendFirmwareStartedMessage+0x38>
    {
    	Error_Handler();
 8014664:	f000 fb22 	bl	8014cac <Error_Handler>
    }

    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 8014668:	bf00      	nop
 801466a:	4b08      	ldr	r3, [pc, #32]	@ (801468c <SendFirmwareStartedMessage+0x5c>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	4619      	mov	r1, r3
 8014670:	4807      	ldr	r0, [pc, #28]	@ (8014690 <SendFirmwareStartedMessage+0x60>)
 8014672:	f000 ff96 	bl	80155a2 <HAL_CAN_IsTxMessagePending>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	d1f6      	bne.n	801466a <SendFirmwareStartedMessage+0x3a>

    }
}
 801467c:	bf00      	nop
 801467e:	bf00      	nop
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	20004898 	.word	0x20004898
 8014688:	200048b0 	.word	0x200048b0
 801468c:	200048b8 	.word	0x200048b8
 8014690:	20000034 	.word	0x20000034

08014694 <NVIC_Config>:

void NVIC_Config(void)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8014698:	2200      	movs	r2, #0
 801469a:	2100      	movs	r1, #0
 801469c:	2014      	movs	r0, #20
 801469e:	f001 fbe4 	bl	8015e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80146a2:	2014      	movs	r0, #20
 80146a4:	f001 fbfd 	bl	8015ea2 <HAL_NVIC_EnableIRQ>
}
 80146a8:	bf00      	nop
 80146aa:	bd80      	pop	{r7, pc}

080146ac <ProcessFirmwareSizeMessage>:

void ProcessFirmwareSizeMessage(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]
    if (rxHeader->DLC == 4)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	691b      	ldr	r3, [r3, #16]
 80146ba:	2b04      	cmp	r3, #4
 80146bc:	d113      	bne.n	80146e6 <ProcessFirmwareSizeMessage+0x3a>
    {
        // 펌웨어 크기 수신
        fwUpdateSize = (rxData[0] << 24) | (rxData[1] << 16) | (rxData[2] << 8) | rxData[3];
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	061a      	lsls	r2, r3, #24
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	3301      	adds	r3, #1
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	041b      	lsls	r3, r3, #16
 80146cc:	431a      	orrs	r2, r3
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	3302      	adds	r3, #2
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	021b      	lsls	r3, r3, #8
 80146d6:	4313      	orrs	r3, r2
 80146d8:	683a      	ldr	r2, [r7, #0]
 80146da:	3203      	adds	r2, #3
 80146dc:	7812      	ldrb	r2, [r2, #0]
 80146de:	4313      	orrs	r3, r2
 80146e0:	461a      	mov	r2, r3
 80146e2:	4b03      	ldr	r3, [pc, #12]	@ (80146f0 <ProcessFirmwareSizeMessage+0x44>)
 80146e4:	601a      	str	r2, [r3, #0]
    }

}
 80146e6:	bf00      	nop
 80146e8:	370c      	adds	r7, #12
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bc80      	pop	{r7}
 80146ee:	4770      	bx	lr
 80146f0:	20000088 	.word	0x20000088

080146f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b08c      	sub	sp, #48	@ 0x30
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80146fc:	f107 030c 	add.w	r3, r7, #12
 8014700:	f107 0214 	add.w	r2, r7, #20
 8014704:	2100      	movs	r1, #0
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f000 ff6e 	bl	80155e8 <HAL_CAN_GetRxMessage>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	d002      	beq.n	8014718 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
    {
    	Error_Handler();
 8014712:	f000 facb 	bl	8014cac <Error_Handler>
 8014716:	e036      	b.n	8014786 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
        return;
    }

    if (rxHeader.StdId == CAN_ID_CONTROL && fwUpdateRequested == 0)
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	2b7b      	cmp	r3, #123	@ 0x7b
 801471c:	d112      	bne.n	8014744 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 801471e:	4b1b      	ldr	r3, [pc, #108]	@ (801478c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	b2db      	uxtb	r3, r3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d10d      	bne.n	8014744 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {

    	if (!memcmp(command, rxData, sizeof(command))){
 8014728:	f107 030c 	add.w	r3, r7, #12
 801472c:	2208      	movs	r2, #8
 801472e:	4619      	mov	r1, r3
 8014730:	4817      	ldr	r0, [pc, #92]	@ (8014790 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8014732:	f002 fc89 	bl	8017048 <memcmp>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d124      	bne.n	8014786 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
    		fwUpdateRequested = 1;
 801473c:	4b13      	ldr	r3, [pc, #76]	@ (801478c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 801473e:	2201      	movs	r2, #1
 8014740:	701a      	strb	r2, [r3, #0]
    	if (!memcmp(command, rxData, sizeof(command))){
 8014742:	e020      	b.n	8014786 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>

    	}
    }
    else if (fwUpdateRequested == 1 && rxHeader.StdId == CAN_ID_SIZE)
 8014744:	4b11      	ldr	r3, [pc, #68]	@ (801478c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	b2db      	uxtb	r3, r3
 801474a:	2b01      	cmp	r3, #1
 801474c:	d10b      	bne.n	8014766 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	2b71      	cmp	r3, #113	@ 0x71
 8014752:	d108      	bne.n	8014766 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
    	ProcessFirmwareSizeMessage(&rxHeader, rxData);
 8014754:	f107 020c 	add.w	r2, r7, #12
 8014758:	f107 0314 	add.w	r3, r7, #20
 801475c:	4611      	mov	r1, r2
 801475e:	4618      	mov	r0, r3
 8014760:	f7ff ffa4 	bl	80146ac <ProcessFirmwareSizeMessage>
 8014764:	e00f      	b.n	8014786 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
    else if (fwUpdateRequested == 1 && rxHeader.StdId == CAN_ID_FILE)
 8014766:	4b09      	ldr	r3, [pc, #36]	@ (801478c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	b2db      	uxtb	r3, r3
 801476c:	2b01      	cmp	r3, #1
 801476e:	d10a      	bne.n	8014786 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	2b70      	cmp	r3, #112	@ 0x70
 8014774:	d107      	bne.n	8014786 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
    {
        MessageBufferPut(&rxHeader, rxData);
 8014776:	f107 020c 	add.w	r2, r7, #12
 801477a:	f107 0314 	add.w	r3, r7, #20
 801477e:	4611      	mov	r1, r2
 8014780:	4618      	mov	r0, r3
 8014782:	f000 f90b 	bl	801499c <MessageBufferPut>
    }
}
 8014786:	3730      	adds	r7, #48	@ 0x30
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	20000081 	.word	0x20000081
 8014790:	20000000 	.word	0x20000000

08014794 <EraseFlashMemory>:

void EraseFlashMemory(void)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b086      	sub	sp, #24
 8014798:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 801479a:	f001 fc0d 	bl	8015fb8 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 801479e:	2300      	movs	r3, #0
 80147a0:	607b      	str	r3, [r7, #4]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80147a2:	2300      	movs	r3, #0
 80147a4:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.PageAddress = fwUpdateAddress;
 80147a6:	4b0e      	ldr	r3, [pc, #56]	@ (80147e0 <EraseFlashMemory+0x4c>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbPages = NUMBER_OF_PAGES_IN_PARTITION;
 80147ac:	2330      	movs	r3, #48	@ 0x30
 80147ae:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 80147b0:	1d3a      	adds	r2, r7, #4
 80147b2:	f107 0308 	add.w	r3, r7, #8
 80147b6:	4611      	mov	r1, r2
 80147b8:	4618      	mov	r0, r3
 80147ba:	f001 fce5 	bl	8016188 <HAL_FLASHEx_Erase>
 80147be:	4603      	mov	r3, r0
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d006      	beq.n	80147d2 <EraseFlashMemory+0x3e>
    {
        HAL_FLASH_Lock();
 80147c4:	f001 fc1e 	bl	8016004 <HAL_FLASH_Lock>
        fwUpdateState = FW_UPDATE_IDLE;
 80147c8:	4b06      	ldr	r3, [pc, #24]	@ (80147e4 <EraseFlashMemory+0x50>)
 80147ca:	2200      	movs	r2, #0
 80147cc:	701a      	strb	r2, [r3, #0]
        NVIC_SystemReset();
 80147ce:	f7ff fdcf 	bl	8014370 <__NVIC_SystemReset>
    }

    HAL_FLASH_Lock();
 80147d2:	f001 fc17 	bl	8016004 <HAL_FLASH_Lock>

}
 80147d6:	bf00      	nop
 80147d8:	3718      	adds	r7, #24
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	20000084 	.word	0x20000084
 80147e4:	20000080 	.word	0x20000080

080147e8 <StartFirmwareUpdate>:

void StartFirmwareUpdate(void)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	af00      	add	r7, sp, #0

	if (BOOT_FLAG_ADDR == BOOT_FLAG_A)
 80147ec:	4b09      	ldr	r3, [pc, #36]	@ (8014814 <StartFirmwareUpdate+0x2c>)
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	d103      	bne.n	80147fc <StartFirmwareUpdate+0x14>
		fwUpdateAddress = APPLICATION_B_ADDRESS;
 80147f4:	4b08      	ldr	r3, [pc, #32]	@ (8014818 <StartFirmwareUpdate+0x30>)
 80147f6:	4a09      	ldr	r2, [pc, #36]	@ (801481c <StartFirmwareUpdate+0x34>)
 80147f8:	601a      	str	r2, [r3, #0]
 80147fa:	e002      	b.n	8014802 <StartFirmwareUpdate+0x1a>
	else
		fwUpdateAddress = APPLICATION_A_ADDRESS;
 80147fc:	4b06      	ldr	r3, [pc, #24]	@ (8014818 <StartFirmwareUpdate+0x30>)
 80147fe:	4a08      	ldr	r2, [pc, #32]	@ (8014820 <StartFirmwareUpdate+0x38>)
 8014800:	601a      	str	r2, [r3, #0]

    fwUpdateReceivedBytes = 0;
 8014802:	4b08      	ldr	r3, [pc, #32]	@ (8014824 <StartFirmwareUpdate+0x3c>)
 8014804:	2200      	movs	r2, #0
 8014806:	601a      	str	r2, [r3, #0]

    EraseFlashMemory();
 8014808:	f7ff ffc4 	bl	8014794 <EraseFlashMemory>

    SendInactivePartitionAddress();
 801480c:	f000 f80c 	bl	8014828 <SendInactivePartitionAddress>
}
 8014810:	bf00      	nop
 8014812:	bd80      	pop	{r7, pc}
 8014814:	40006c00 	.word	0x40006c00
 8014818:	20000084 	.word	0x20000084
 801481c:	08014000 	.word	0x08014000
 8014820:	08008000 	.word	0x08008000
 8014824:	2000008c 	.word	0x2000008c

08014828 <SendInactivePartitionAddress>:

void SendInactivePartitionAddress(void)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 801482e:	4b1e      	ldr	r3, [pc, #120]	@ (80148a8 <SendInactivePartitionAddress+0x80>)
 8014830:	227a      	movs	r2, #122	@ 0x7a
 8014832:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 8014834:	4b1c      	ldr	r3, [pc, #112]	@ (80148a8 <SendInactivePartitionAddress+0x80>)
 8014836:	2200      	movs	r2, #0
 8014838:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 801483a:	4b1b      	ldr	r3, [pc, #108]	@ (80148a8 <SendInactivePartitionAddress+0x80>)
 801483c:	2200      	movs	r2, #0
 801483e:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 4; // 주소 전송
 8014840:	4b19      	ldr	r3, [pc, #100]	@ (80148a8 <SendInactivePartitionAddress+0x80>)
 8014842:	2204      	movs	r2, #4
 8014844:	611a      	str	r2, [r3, #16]

    uint32_t targetAddress = fwUpdateAddress;
 8014846:	4b19      	ldr	r3, [pc, #100]	@ (80148ac <SendInactivePartitionAddress+0x84>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	607b      	str	r3, [r7, #4]

    txData[0] = (targetAddress >> 24) & 0xFF;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	0e1b      	lsrs	r3, r3, #24
 8014850:	b2da      	uxtb	r2, r3
 8014852:	4b17      	ldr	r3, [pc, #92]	@ (80148b0 <SendInactivePartitionAddress+0x88>)
 8014854:	701a      	strb	r2, [r3, #0]
    txData[1] = (targetAddress >> 16) & 0xFF;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	0c1b      	lsrs	r3, r3, #16
 801485a:	b2da      	uxtb	r2, r3
 801485c:	4b14      	ldr	r3, [pc, #80]	@ (80148b0 <SendInactivePartitionAddress+0x88>)
 801485e:	705a      	strb	r2, [r3, #1]
    txData[2] = (targetAddress >> 8) & 0xFF;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	0a1b      	lsrs	r3, r3, #8
 8014864:	b2da      	uxtb	r2, r3
 8014866:	4b12      	ldr	r3, [pc, #72]	@ (80148b0 <SendInactivePartitionAddress+0x88>)
 8014868:	709a      	strb	r2, [r3, #2]
    txData[3] = (targetAddress) & 0xFF;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	b2da      	uxtb	r2, r3
 801486e:	4b10      	ldr	r3, [pc, #64]	@ (80148b0 <SendInactivePartitionAddress+0x88>)
 8014870:	70da      	strb	r2, [r3, #3]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8014872:	4b10      	ldr	r3, [pc, #64]	@ (80148b4 <SendInactivePartitionAddress+0x8c>)
 8014874:	4a0e      	ldr	r2, [pc, #56]	@ (80148b0 <SendInactivePartitionAddress+0x88>)
 8014876:	490c      	ldr	r1, [pc, #48]	@ (80148a8 <SendInactivePartitionAddress+0x80>)
 8014878:	480f      	ldr	r0, [pc, #60]	@ (80148b8 <SendInactivePartitionAddress+0x90>)
 801487a:	f000 fdc3 	bl	8015404 <HAL_CAN_AddTxMessage>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d001      	beq.n	8014888 <SendInactivePartitionAddress+0x60>
    {
        Error_Handler();
 8014884:	f000 fa12 	bl	8014cac <Error_Handler>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 8014888:	bf00      	nop
 801488a:	4b0a      	ldr	r3, [pc, #40]	@ (80148b4 <SendInactivePartitionAddress+0x8c>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4619      	mov	r1, r3
 8014890:	4809      	ldr	r0, [pc, #36]	@ (80148b8 <SendInactivePartitionAddress+0x90>)
 8014892:	f000 fe86 	bl	80155a2 <HAL_CAN_IsTxMessagePending>
 8014896:	4603      	mov	r3, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d1f6      	bne.n	801488a <SendInactivePartitionAddress+0x62>
	}
}
 801489c:	bf00      	nop
 801489e:	bf00      	nop
 80148a0:	3708      	adds	r7, #8
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	20004898 	.word	0x20004898
 80148ac:	20000084 	.word	0x20000084
 80148b0:	200048b0 	.word	0x200048b0
 80148b4:	200048b8 	.word	0x200048b8
 80148b8:	20000034 	.word	0x20000034

080148bc <SendUpdateState>:

void SendUpdateState(void)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 80148c0:	4b17      	ldr	r3, [pc, #92]	@ (8014920 <SendUpdateState+0x64>)
 80148c2:	227a      	movs	r2, #122	@ 0x7a
 80148c4:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 80148c6:	4b16      	ldr	r3, [pc, #88]	@ (8014920 <SendUpdateState+0x64>)
 80148c8:	2200      	movs	r2, #0
 80148ca:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 80148cc:	4b14      	ldr	r3, [pc, #80]	@ (8014920 <SendUpdateState+0x64>)
 80148ce:	2200      	movs	r2, #0
 80148d0:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 1;
 80148d2:	4b13      	ldr	r3, [pc, #76]	@ (8014920 <SendUpdateState+0x64>)
 80148d4:	2201      	movs	r2, #1
 80148d6:	611a      	str	r2, [r3, #16]

    if (fwUpdateComplete == 1)
 80148d8:	4b12      	ldr	r3, [pc, #72]	@ (8014924 <SendUpdateState+0x68>)
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d103      	bne.n	80148ea <SendUpdateState+0x2e>
    	txData[0] = 0x02; // 완료 신호
 80148e2:	4b11      	ldr	r3, [pc, #68]	@ (8014928 <SendUpdateState+0x6c>)
 80148e4:	2202      	movs	r2, #2
 80148e6:	701a      	strb	r2, [r3, #0]
 80148e8:	e002      	b.n	80148f0 <SendUpdateState+0x34>
    else
    	txData[0] = 0x03; // 실패 신호
 80148ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014928 <SendUpdateState+0x6c>)
 80148ec:	2203      	movs	r2, #3
 80148ee:	701a      	strb	r2, [r3, #0]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 80148f0:	4b0e      	ldr	r3, [pc, #56]	@ (801492c <SendUpdateState+0x70>)
 80148f2:	4a0d      	ldr	r2, [pc, #52]	@ (8014928 <SendUpdateState+0x6c>)
 80148f4:	490a      	ldr	r1, [pc, #40]	@ (8014920 <SendUpdateState+0x64>)
 80148f6:	480e      	ldr	r0, [pc, #56]	@ (8014930 <SendUpdateState+0x74>)
 80148f8:	f000 fd84 	bl	8015404 <HAL_CAN_AddTxMessage>
 80148fc:	4603      	mov	r3, r0
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d001      	beq.n	8014906 <SendUpdateState+0x4a>
    {
        Error_Handler();
 8014902:	f000 f9d3 	bl	8014cac <Error_Handler>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 8014906:	bf00      	nop
 8014908:	4b08      	ldr	r3, [pc, #32]	@ (801492c <SendUpdateState+0x70>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	4619      	mov	r1, r3
 801490e:	4808      	ldr	r0, [pc, #32]	@ (8014930 <SendUpdateState+0x74>)
 8014910:	f000 fe47 	bl	80155a2 <HAL_CAN_IsTxMessagePending>
 8014914:	4603      	mov	r3, r0
 8014916:	2b00      	cmp	r3, #0
 8014918:	d1f6      	bne.n	8014908 <SendUpdateState+0x4c>
    }
}
 801491a:	bf00      	nop
 801491c:	bf00      	nop
 801491e:	bd80      	pop	{r7, pc}
 8014920:	20004898 	.word	0x20004898
 8014924:	20000082 	.word	0x20000082
 8014928:	200048b0 	.word	0x200048b0
 801492c:	200048b8 	.word	0x200048b8
 8014930:	20000034 	.word	0x20000034

08014934 <MessageBufferIsFull>:

uint8_t MessageBufferIsFull(void)
{
 8014934:	b480      	push	{r7}
 8014936:	af00      	add	r7, sp, #0
    return ((messageBufferHead + 1) % MESSAGE_BUFFER_SIZE) == messageBufferTail;
 8014938:	4b0b      	ldr	r3, [pc, #44]	@ (8014968 <MessageBufferIsFull+0x34>)
 801493a:	881b      	ldrh	r3, [r3, #0]
 801493c:	b29b      	uxth	r3, r3
 801493e:	3301      	adds	r3, #1
 8014940:	425a      	negs	r2, r3
 8014942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801494a:	bf58      	it	pl
 801494c:	4253      	negpl	r3, r2
 801494e:	4a07      	ldr	r2, [pc, #28]	@ (801496c <MessageBufferIsFull+0x38>)
 8014950:	8812      	ldrh	r2, [r2, #0]
 8014952:	b292      	uxth	r2, r2
 8014954:	4293      	cmp	r3, r2
 8014956:	bf0c      	ite	eq
 8014958:	2301      	moveq	r3, #1
 801495a:	2300      	movne	r3, #0
 801495c:	b2db      	uxtb	r3, r3
}
 801495e:	4618      	mov	r0, r3
 8014960:	46bd      	mov	sp, r7
 8014962:	bc80      	pop	{r7}
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	20004894 	.word	0x20004894
 801496c:	20004896 	.word	0x20004896

08014970 <MessageBufferIsEmpty>:

uint8_t MessageBufferIsEmpty(void)
{
 8014970:	b480      	push	{r7}
 8014972:	af00      	add	r7, sp, #0
    return messageBufferHead == messageBufferTail;
 8014974:	4b07      	ldr	r3, [pc, #28]	@ (8014994 <MessageBufferIsEmpty+0x24>)
 8014976:	881b      	ldrh	r3, [r3, #0]
 8014978:	b29a      	uxth	r2, r3
 801497a:	4b07      	ldr	r3, [pc, #28]	@ (8014998 <MessageBufferIsEmpty+0x28>)
 801497c:	881b      	ldrh	r3, [r3, #0]
 801497e:	b29b      	uxth	r3, r3
 8014980:	429a      	cmp	r2, r3
 8014982:	bf0c      	ite	eq
 8014984:	2301      	moveq	r3, #1
 8014986:	2300      	movne	r3, #0
 8014988:	b2db      	uxtb	r3, r3
}
 801498a:	4618      	mov	r0, r3
 801498c:	46bd      	mov	sp, r7
 801498e:	bc80      	pop	{r7}
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop
 8014994:	20004894 	.word	0x20004894
 8014998:	20004896 	.word	0x20004896

0801499c <MessageBufferPut>:

void MessageBufferPut(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 801499c:	b5b0      	push	{r4, r5, r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]
    if (!MessageBufferIsFull())
 80149a6:	f7ff ffc5 	bl	8014934 <MessageBufferIsFull>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d131      	bne.n	8014a14 <MessageBufferPut+0x78>
    {
        messageBuffer[messageBufferHead].rxHeader = *rxHeader;
 80149b0:	4b1a      	ldr	r3, [pc, #104]	@ (8014a1c <MessageBufferPut+0x80>)
 80149b2:	881b      	ldrh	r3, [r3, #0]
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	4619      	mov	r1, r3
 80149b8:	4a19      	ldr	r2, [pc, #100]	@ (8014a20 <MessageBufferPut+0x84>)
 80149ba:	460b      	mov	r3, r1
 80149bc:	00db      	lsls	r3, r3, #3
 80149be:	440b      	add	r3, r1
 80149c0:	009b      	lsls	r3, r3, #2
 80149c2:	441a      	add	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	4614      	mov	r4, r2
 80149c8:	461d      	mov	r5, r3
 80149ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80149d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        memcpy(messageBuffer[messageBufferHead].rxData, rxData, 8);
 80149d6:	4b11      	ldr	r3, [pc, #68]	@ (8014a1c <MessageBufferPut+0x80>)
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	461a      	mov	r2, r3
 80149de:	4613      	mov	r3, r2
 80149e0:	00db      	lsls	r3, r3, #3
 80149e2:	4413      	add	r3, r2
 80149e4:	009b      	lsls	r3, r3, #2
 80149e6:	3318      	adds	r3, #24
 80149e8:	4a0d      	ldr	r2, [pc, #52]	@ (8014a20 <MessageBufferPut+0x84>)
 80149ea:	4413      	add	r3, r2
 80149ec:	3304      	adds	r3, #4
 80149ee:	2208      	movs	r2, #8
 80149f0:	6839      	ldr	r1, [r7, #0]
 80149f2:	4618      	mov	r0, r3
 80149f4:	f002 fb64 	bl	80170c0 <memcpy>
        messageBufferHead = (messageBufferHead + 1) % MESSAGE_BUFFER_SIZE;
 80149f8:	4b08      	ldr	r3, [pc, #32]	@ (8014a1c <MessageBufferPut+0x80>)
 80149fa:	881b      	ldrh	r3, [r3, #0]
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	3301      	adds	r3, #1
 8014a00:	425a      	negs	r2, r3
 8014a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014a0a:	bf58      	it	pl
 8014a0c:	4253      	negpl	r3, r2
 8014a0e:	b29a      	uxth	r2, r3
 8014a10:	4b02      	ldr	r3, [pc, #8]	@ (8014a1c <MessageBufferPut+0x80>)
 8014a12:	801a      	strh	r2, [r3, #0]
    }
}
 8014a14:	bf00      	nop
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8014a1c:	20004894 	.word	0x20004894
 8014a20:	20000094 	.word	0x20000094

08014a24 <MessageBufferGet>:

void MessageBufferGet(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 8014a24:	b5b0      	push	{r4, r5, r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
    if (!MessageBufferIsEmpty())
 8014a2e:	f7ff ff9f 	bl	8014970 <MessageBufferIsEmpty>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d131      	bne.n	8014a9c <MessageBufferGet+0x78>
    {
        *rxHeader = messageBuffer[messageBufferTail].rxHeader;
 8014a38:	4b1a      	ldr	r3, [pc, #104]	@ (8014aa4 <MessageBufferGet+0x80>)
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	4619      	mov	r1, r3
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	4a19      	ldr	r2, [pc, #100]	@ (8014aa8 <MessageBufferGet+0x84>)
 8014a44:	460b      	mov	r3, r1
 8014a46:	00db      	lsls	r3, r3, #3
 8014a48:	440b      	add	r3, r1
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	4413      	add	r3, r2
 8014a4e:	4604      	mov	r4, r0
 8014a50:	461d      	mov	r5, r3
 8014a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        memcpy(rxData, messageBuffer[messageBufferTail].rxData, 8);
 8014a5e:	4b11      	ldr	r3, [pc, #68]	@ (8014aa4 <MessageBufferGet+0x80>)
 8014a60:	881b      	ldrh	r3, [r3, #0]
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	461a      	mov	r2, r3
 8014a66:	4613      	mov	r3, r2
 8014a68:	00db      	lsls	r3, r3, #3
 8014a6a:	4413      	add	r3, r2
 8014a6c:	009b      	lsls	r3, r3, #2
 8014a6e:	3318      	adds	r3, #24
 8014a70:	4a0d      	ldr	r2, [pc, #52]	@ (8014aa8 <MessageBufferGet+0x84>)
 8014a72:	4413      	add	r3, r2
 8014a74:	3304      	adds	r3, #4
 8014a76:	2208      	movs	r2, #8
 8014a78:	4619      	mov	r1, r3
 8014a7a:	6838      	ldr	r0, [r7, #0]
 8014a7c:	f002 fb20 	bl	80170c0 <memcpy>
        messageBufferTail = (messageBufferTail + 1) % MESSAGE_BUFFER_SIZE;
 8014a80:	4b08      	ldr	r3, [pc, #32]	@ (8014aa4 <MessageBufferGet+0x80>)
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	3301      	adds	r3, #1
 8014a88:	425a      	negs	r2, r3
 8014a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014a92:	bf58      	it	pl
 8014a94:	4253      	negpl	r3, r2
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	4b02      	ldr	r3, [pc, #8]	@ (8014aa4 <MessageBufferGet+0x80>)
 8014a9a:	801a      	strh	r2, [r3, #0]
    }
}
 8014a9c:	bf00      	nop
 8014a9e:	3708      	adds	r7, #8
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8014aa4:	20004896 	.word	0x20004896
 8014aa8:	20000094 	.word	0x20000094

08014aac <FirmwareUpdateStateMachine>:

void FirmwareUpdateStateMachine(void)
{
 8014aac:	b5b0      	push	{r4, r5, r7, lr}
 8014aae:	b08e      	sub	sp, #56	@ 0x38
 8014ab0:	af00      	add	r7, sp, #0
    switch (fwUpdateState)
 8014ab2:	4b75      	ldr	r3, [pc, #468]	@ (8014c88 <FirmwareUpdateStateMachine+0x1dc>)
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	2b03      	cmp	r3, #3
 8014ab8:	f000 80d6 	beq.w	8014c68 <FirmwareUpdateStateMachine+0x1bc>
 8014abc:	2b03      	cmp	r3, #3
 8014abe:	f300 80db 	bgt.w	8014c78 <FirmwareUpdateStateMachine+0x1cc>
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d002      	beq.n	8014acc <FirmwareUpdateStateMachine+0x20>
 8014ac6:	2b02      	cmp	r3, #2
 8014ac8:	d00c      	beq.n	8014ae4 <FirmwareUpdateStateMachine+0x38>
 8014aca:	e0d5      	b.n	8014c78 <FirmwareUpdateStateMachine+0x1cc>
    {
        case FW_UPDATE_IDLE:
            if (fwUpdateRequested)
 8014acc:	4b6f      	ldr	r3, [pc, #444]	@ (8014c8c <FirmwareUpdateStateMachine+0x1e0>)
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	f000 80d4 	beq.w	8014c80 <FirmwareUpdateStateMachine+0x1d4>
            {
                StartFirmwareUpdate();
 8014ad8:	f7ff fe86 	bl	80147e8 <StartFirmwareUpdate>
                fwUpdateState = FW_UPDATE_IN_PROGRESS;
 8014adc:	4b6a      	ldr	r3, [pc, #424]	@ (8014c88 <FirmwareUpdateStateMachine+0x1dc>)
 8014ade:	2202      	movs	r2, #2
 8014ae0:	701a      	strb	r2, [r3, #0]

            }
            break;
 8014ae2:	e0cd      	b.n	8014c80 <FirmwareUpdateStateMachine+0x1d4>

        case FW_UPDATE_IN_PROGRESS:
        	CAN_RxHeaderTypeDef rxHeader;
        	uint32_t currentAddress = fwUpdateAddress;
 8014ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8014c90 <FirmwareUpdateStateMachine+0x1e4>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        	uint8_t rxData[8];

            while (fwUpdateSize > fwUpdateReceivedBytes)
 8014aea:	e09b      	b.n	8014c24 <FirmwareUpdateStateMachine+0x178>
            {
            	if(!MessageBufferIsEmpty()){
 8014aec:	f7ff ff40 	bl	8014970 <MessageBufferIsEmpty>
 8014af0:	4603      	mov	r3, r0
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	f040 8096 	bne.w	8014c24 <FirmwareUpdateStateMachine+0x178>
					MessageBufferGet(&rxHeader, rxData);
 8014af8:	f107 0208 	add.w	r2, r7, #8
 8014afc:	f107 0310 	add.w	r3, r7, #16
 8014b00:	4611      	mov	r1, r2
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7ff ff8e 	bl	8014a24 <MessageBufferGet>

					uint8_t dataLength = rxHeader.DLC;
 8014b08:	6a3b      	ldr	r3, [r7, #32]
 8014b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

					HAL_FLASH_Unlock();
 8014b0e:	f001 fa53 	bl	8015fb8 <HAL_FLASH_Unlock>

					for (uint8_t i = 0; i < dataLength; i += 2)
 8014b12:	2300      	movs	r3, #0
 8014b14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014b18:	e048      	b.n	8014bac <FirmwareUpdateStateMachine+0x100>
					{
						uint16_t data16 = rxData[i];
 8014b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014b1e:	3338      	adds	r3, #56	@ 0x38
 8014b20:	443b      	add	r3, r7
 8014b22:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8014b26:	863b      	strh	r3, [r7, #48]	@ 0x30
						if (i + 1 < dataLength)
 8014b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014b2c:	1c5a      	adds	r2, r3, #1
 8014b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b32:	429a      	cmp	r2, r3
 8014b34:	da0d      	bge.n	8014b52 <FirmwareUpdateStateMachine+0xa6>
						{
							data16 |= rxData[i + 1] << 8;
 8014b36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	3338      	adds	r3, #56	@ 0x38
 8014b3e:	443b      	add	r3, r7
 8014b40:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8014b44:	021b      	lsls	r3, r3, #8
 8014b46:	b21a      	sxth	r2, r3
 8014b48:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8014b4c:	4313      	orrs	r3, r2
 8014b4e:	b21b      	sxth	r3, r3
 8014b50:	863b      	strh	r3, [r7, #48]	@ 0x30
						}


						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress, data16) != HAL_OK)
 8014b52:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014b54:	2200      	movs	r2, #0
 8014b56:	461c      	mov	r4, r3
 8014b58:	4615      	mov	r5, r2
 8014b5a:	4622      	mov	r2, r4
 8014b5c:	462b      	mov	r3, r5
 8014b5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014b60:	2001      	movs	r0, #1
 8014b62:	f001 f9b9 	bl	8015ed8 <HAL_FLASH_Program>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d008      	beq.n	8014b7e <FirmwareUpdateStateMachine+0xd2>
						{
							HAL_FLASH_Lock();
 8014b6c:	f001 fa4a 	bl	8016004 <HAL_FLASH_Lock>
							fwUpdateRequested = 0;
 8014b70:	4b46      	ldr	r3, [pc, #280]	@ (8014c8c <FirmwareUpdateStateMachine+0x1e0>)
 8014b72:	2200      	movs	r2, #0
 8014b74:	701a      	strb	r2, [r3, #0]
							fwUpdateState = FW_UPDATE_IDLE;
 8014b76:	4b44      	ldr	r3, [pc, #272]	@ (8014c88 <FirmwareUpdateStateMachine+0x1dc>)
 8014b78:	2200      	movs	r2, #0
 8014b7a:	701a      	strb	r2, [r3, #0]
 8014b7c:	e081      	b.n	8014c82 <FirmwareUpdateStateMachine+0x1d6>
							return;
						}
						currentAddress += 2;
 8014b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b80:	3302      	adds	r3, #2
 8014b82:	637b      	str	r3, [r7, #52]	@ 0x34
						fwUpdateReceivedBytes += (i + 1 < dataLength) ? 2 : 1;
 8014b84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014b88:	1c5a      	adds	r2, r3, #1
 8014b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	da01      	bge.n	8014b96 <FirmwareUpdateStateMachine+0xea>
 8014b92:	2202      	movs	r2, #2
 8014b94:	e000      	b.n	8014b98 <FirmwareUpdateStateMachine+0xec>
 8014b96:	2201      	movs	r2, #1
 8014b98:	4b3e      	ldr	r3, [pc, #248]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014ba0:	6013      	str	r3, [r2, #0]
					for (uint8_t i = 0; i < dataLength; i += 2)
 8014ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014ba6:	3302      	adds	r3, #2
 8014ba8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014bac:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8014bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d3b0      	bcc.n	8014b1a <FirmwareUpdateStateMachine+0x6e>
					}

					txHeader.StdId = CAN_ID_SEND;
 8014bb8:	4b37      	ldr	r3, [pc, #220]	@ (8014c98 <FirmwareUpdateStateMachine+0x1ec>)
 8014bba:	227a      	movs	r2, #122	@ 0x7a
 8014bbc:	601a      	str	r2, [r3, #0]
					txHeader.RTR = CAN_RTR_DATA;
 8014bbe:	4b36      	ldr	r3, [pc, #216]	@ (8014c98 <FirmwareUpdateStateMachine+0x1ec>)
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	60da      	str	r2, [r3, #12]
					txHeader.IDE = CAN_ID_STD;
 8014bc4:	4b34      	ldr	r3, [pc, #208]	@ (8014c98 <FirmwareUpdateStateMachine+0x1ec>)
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	609a      	str	r2, [r3, #8]
					txHeader.DLC = 4;
 8014bca:	4b33      	ldr	r3, [pc, #204]	@ (8014c98 <FirmwareUpdateStateMachine+0x1ec>)
 8014bcc:	2204      	movs	r2, #4
 8014bce:	611a      	str	r2, [r3, #16]

					uint8_t bytesReceived[4];
					bytesReceived[0] = (fwUpdateReceivedBytes >> 24) & 0xFF;
 8014bd0:	4b30      	ldr	r3, [pc, #192]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	0e1b      	lsrs	r3, r3, #24
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	713b      	strb	r3, [r7, #4]
					bytesReceived[1] = (fwUpdateReceivedBytes >> 16) & 0xFF;
 8014bda:	4b2e      	ldr	r3, [pc, #184]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	0c1b      	lsrs	r3, r3, #16
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	717b      	strb	r3, [r7, #5]
					bytesReceived[2] = (fwUpdateReceivedBytes >> 8) & 0xFF;
 8014be4:	4b2b      	ldr	r3, [pc, #172]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	0a1b      	lsrs	r3, r3, #8
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	71bb      	strb	r3, [r7, #6]
					bytesReceived[3] = fwUpdateReceivedBytes & 0xFF;
 8014bee:	4b29      	ldr	r3, [pc, #164]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	71fb      	strb	r3, [r7, #7]

					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, bytesReceived, &txMailbox) != HAL_OK)
 8014bf6:	1d3a      	adds	r2, r7, #4
 8014bf8:	4b28      	ldr	r3, [pc, #160]	@ (8014c9c <FirmwareUpdateStateMachine+0x1f0>)
 8014bfa:	4927      	ldr	r1, [pc, #156]	@ (8014c98 <FirmwareUpdateStateMachine+0x1ec>)
 8014bfc:	4828      	ldr	r0, [pc, #160]	@ (8014ca0 <FirmwareUpdateStateMachine+0x1f4>)
 8014bfe:	f000 fc01 	bl	8015404 <HAL_CAN_AddTxMessage>
 8014c02:	4603      	mov	r3, r0
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d001      	beq.n	8014c0c <FirmwareUpdateStateMachine+0x160>
						{
							Error_Handler();
 8014c08:	f000 f850 	bl	8014cac <Error_Handler>
						}
					while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 8014c0c:	bf00      	nop
 8014c0e:	4b23      	ldr	r3, [pc, #140]	@ (8014c9c <FirmwareUpdateStateMachine+0x1f0>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	4619      	mov	r1, r3
 8014c14:	4822      	ldr	r0, [pc, #136]	@ (8014ca0 <FirmwareUpdateStateMachine+0x1f4>)
 8014c16:	f000 fcc4 	bl	80155a2 <HAL_CAN_IsTxMessagePending>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d1f6      	bne.n	8014c0e <FirmwareUpdateStateMachine+0x162>
					}

					HAL_FLASH_Lock();
 8014c20:	f001 f9f0 	bl	8016004 <HAL_FLASH_Lock>
            while (fwUpdateSize > fwUpdateReceivedBytes)
 8014c24:	4b1f      	ldr	r3, [pc, #124]	@ (8014ca4 <FirmwareUpdateStateMachine+0x1f8>)
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	4b1a      	ldr	r3, [pc, #104]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	f63f af5d 	bhi.w	8014aec <FirmwareUpdateStateMachine+0x40>
            	}
            }
            fwUpdateRequested = 0;
 8014c32:	4b16      	ldr	r3, [pc, #88]	@ (8014c8c <FirmwareUpdateStateMachine+0x1e0>)
 8014c34:	2200      	movs	r2, #0
 8014c36:	701a      	strb	r2, [r3, #0]
			if (fwUpdateReceivedBytes != fwUpdateSize)
 8014c38:	4b16      	ldr	r3, [pc, #88]	@ (8014c94 <FirmwareUpdateStateMachine+0x1e8>)
 8014c3a:	681a      	ldr	r2, [r3, #0]
 8014c3c:	4b19      	ldr	r3, [pc, #100]	@ (8014ca4 <FirmwareUpdateStateMachine+0x1f8>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d005      	beq.n	8014c50 <FirmwareUpdateStateMachine+0x1a4>
			{
				SendUpdateState();
 8014c44:	f7ff fe3a 	bl	80148bc <SendUpdateState>
				fwUpdateState = FW_UPDATE_IDLE;
 8014c48:	4b0f      	ldr	r3, [pc, #60]	@ (8014c88 <FirmwareUpdateStateMachine+0x1dc>)
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	701a      	strb	r2, [r3, #0]
 8014c4e:	e007      	b.n	8014c60 <FirmwareUpdateStateMachine+0x1b4>
			}
			else{
				fwUpdateComplete = 1;
 8014c50:	4b15      	ldr	r3, [pc, #84]	@ (8014ca8 <FirmwareUpdateStateMachine+0x1fc>)
 8014c52:	2201      	movs	r2, #1
 8014c54:	701a      	strb	r2, [r3, #0]
				SendUpdateState();
 8014c56:	f7ff fe31 	bl	80148bc <SendUpdateState>
				fwUpdateState = FW_UPDATE_COMPLETE;
 8014c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8014c88 <FirmwareUpdateStateMachine+0x1dc>)
 8014c5c:	2203      	movs	r2, #3
 8014c5e:	701a      	strb	r2, [r3, #0]
			}
			fwUpdateSize = 0;
 8014c60:	4b10      	ldr	r3, [pc, #64]	@ (8014ca4 <FirmwareUpdateStateMachine+0x1f8>)
 8014c62:	2200      	movs	r2, #0
 8014c64:	601a      	str	r2, [r3, #0]
            break;
 8014c66:	e00c      	b.n	8014c82 <FirmwareUpdateStateMachine+0x1d6>

        case FW_UPDATE_COMPLETE:
        	SetBootFlag();
 8014c68:	f7ff fcbc 	bl	80145e4 <SetBootFlag>
			HAL_Delay(1000);
 8014c6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014c70:	f000 f99c 	bl	8014fac <HAL_Delay>
			NVIC_SystemReset();
 8014c74:	f7ff fb7c 	bl	8014370 <__NVIC_SystemReset>
            break;

        default:
        	fwUpdateState = FW_UPDATE_IDLE;
 8014c78:	4b03      	ldr	r3, [pc, #12]	@ (8014c88 <FirmwareUpdateStateMachine+0x1dc>)
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	701a      	strb	r2, [r3, #0]
            break;
 8014c7e:	e000      	b.n	8014c82 <FirmwareUpdateStateMachine+0x1d6>
            break;
 8014c80:	bf00      	nop
    }
}
 8014c82:	3738      	adds	r7, #56	@ 0x38
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bdb0      	pop	{r4, r5, r7, pc}
 8014c88:	20000080 	.word	0x20000080
 8014c8c:	20000081 	.word	0x20000081
 8014c90:	20000084 	.word	0x20000084
 8014c94:	2000008c 	.word	0x2000008c
 8014c98:	20004898 	.word	0x20004898
 8014c9c:	200048b8 	.word	0x200048b8
 8014ca0:	20000034 	.word	0x20000034
 8014ca4:	20000088 	.word	0x20000088
 8014ca8:	20000082 	.word	0x20000082

08014cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8014cb0:	b672      	cpsid	i
}
 8014cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8014cb4:	2201      	movs	r2, #1
 8014cb6:	2120      	movs	r1, #32
 8014cb8:	4803      	ldr	r0, [pc, #12]	@ (8014cc8 <Error_Handler+0x1c>)
 8014cba:	f001 fc91 	bl	80165e0 <HAL_GPIO_WritePin>
  while (1)
  {
	  SetBootFlag();
 8014cbe:	f7ff fc91 	bl	80145e4 <SetBootFlag>
	  NVIC_SystemReset();
 8014cc2:	f7ff fb55 	bl	8014370 <__NVIC_SystemReset>
 8014cc6:	bf00      	nop
 8014cc8:	40010800 	.word	0x40010800

08014ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b085      	sub	sp, #20
 8014cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8014cd2:	4b15      	ldr	r3, [pc, #84]	@ (8014d28 <HAL_MspInit+0x5c>)
 8014cd4:	699b      	ldr	r3, [r3, #24]
 8014cd6:	4a14      	ldr	r2, [pc, #80]	@ (8014d28 <HAL_MspInit+0x5c>)
 8014cd8:	f043 0301 	orr.w	r3, r3, #1
 8014cdc:	6193      	str	r3, [r2, #24]
 8014cde:	4b12      	ldr	r3, [pc, #72]	@ (8014d28 <HAL_MspInit+0x5c>)
 8014ce0:	699b      	ldr	r3, [r3, #24]
 8014ce2:	f003 0301 	and.w	r3, r3, #1
 8014ce6:	60bb      	str	r3, [r7, #8]
 8014ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014cea:	4b0f      	ldr	r3, [pc, #60]	@ (8014d28 <HAL_MspInit+0x5c>)
 8014cec:	69db      	ldr	r3, [r3, #28]
 8014cee:	4a0e      	ldr	r2, [pc, #56]	@ (8014d28 <HAL_MspInit+0x5c>)
 8014cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014cf4:	61d3      	str	r3, [r2, #28]
 8014cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8014d28 <HAL_MspInit+0x5c>)
 8014cf8:	69db      	ldr	r3, [r3, #28]
 8014cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014cfe:	607b      	str	r3, [r7, #4]
 8014d00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8014d02:	4b0a      	ldr	r3, [pc, #40]	@ (8014d2c <HAL_MspInit+0x60>)
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	60fb      	str	r3, [r7, #12]
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8014d0e:	60fb      	str	r3, [r7, #12]
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014d16:	60fb      	str	r3, [r7, #12]
 8014d18:	4a04      	ldr	r2, [pc, #16]	@ (8014d2c <HAL_MspInit+0x60>)
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014d1e:	bf00      	nop
 8014d20:	3714      	adds	r7, #20
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bc80      	pop	{r7}
 8014d26:	4770      	bx	lr
 8014d28:	40021000 	.word	0x40021000
 8014d2c:	40010000 	.word	0x40010000

08014d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014d30:	b480      	push	{r7}
 8014d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8014d34:	bf00      	nop
 8014d36:	e7fd      	b.n	8014d34 <NMI_Handler+0x4>

08014d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014d38:	b480      	push	{r7}
 8014d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014d3c:	bf00      	nop
 8014d3e:	e7fd      	b.n	8014d3c <HardFault_Handler+0x4>

08014d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014d40:	b480      	push	{r7}
 8014d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014d44:	bf00      	nop
 8014d46:	e7fd      	b.n	8014d44 <MemManage_Handler+0x4>

08014d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014d4c:	bf00      	nop
 8014d4e:	e7fd      	b.n	8014d4c <BusFault_Handler+0x4>

08014d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014d50:	b480      	push	{r7}
 8014d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014d54:	bf00      	nop
 8014d56:	e7fd      	b.n	8014d54 <UsageFault_Handler+0x4>

08014d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014d5c:	bf00      	nop
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bc80      	pop	{r7}
 8014d62:	4770      	bx	lr

08014d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014d64:	b480      	push	{r7}
 8014d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014d68:	bf00      	nop
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bc80      	pop	{r7}
 8014d6e:	4770      	bx	lr

08014d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014d70:	b480      	push	{r7}
 8014d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014d74:	bf00      	nop
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bc80      	pop	{r7}
 8014d7a:	4770      	bx	lr

08014d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014d80:	f000 f8f8 	bl	8014f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014d84:	bf00      	nop
 8014d86:	bd80      	pop	{r7, pc}

08014d88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8014d8c:	4802      	ldr	r0, [pc, #8]	@ (8014d98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8014d8e:	f000 fd71 	bl	8015874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8014d92:	bf00      	nop
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	20000034 	.word	0x20000034

08014d9c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8014da0:	4802      	ldr	r0, [pc, #8]	@ (8014dac <CAN1_RX1_IRQHandler+0x10>)
 8014da2:	f000 fd67 	bl	8015874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8014da6:	bf00      	nop
 8014da8:	bd80      	pop	{r7, pc}
 8014daa:	bf00      	nop
 8014dac:	20000034 	.word	0x20000034

08014db0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8014db4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8014db8:	f001 fc2a 	bl	8016610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8014dbc:	bf00      	nop
 8014dbe:	bd80      	pop	{r7, pc}

08014dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014dc4:	bf00      	nop
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bc80      	pop	{r7}
 8014dca:	4770      	bx	lr

08014dcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8014dd0:	4b11      	ldr	r3, [pc, #68]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014dd2:	4a12      	ldr	r2, [pc, #72]	@ (8014e1c <MX_USART2_UART_Init+0x50>)
 8014dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8014dd6:	4b10      	ldr	r3, [pc, #64]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8014ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8014dde:	4b0e      	ldr	r3, [pc, #56]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014de0:	2200      	movs	r2, #0
 8014de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8014de4:	4b0c      	ldr	r3, [pc, #48]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014de6:	2200      	movs	r2, #0
 8014de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8014dea:	4b0b      	ldr	r3, [pc, #44]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014dec:	2200      	movs	r2, #0
 8014dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8014df0:	4b09      	ldr	r3, [pc, #36]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014df2:	220c      	movs	r2, #12
 8014df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014df6:	4b08      	ldr	r3, [pc, #32]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014df8:	2200      	movs	r2, #0
 8014dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8014dfc:	4b06      	ldr	r3, [pc, #24]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014dfe:	2200      	movs	r2, #0
 8014e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8014e02:	4805      	ldr	r0, [pc, #20]	@ (8014e18 <MX_USART2_UART_Init+0x4c>)
 8014e04:	f002 f842 	bl	8016e8c <HAL_UART_Init>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d001      	beq.n	8014e12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8014e0e:	f7ff ff4d 	bl	8014cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8014e12:	bf00      	nop
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	bf00      	nop
 8014e18:	200048bc 	.word	0x200048bc
 8014e1c:	40004400 	.word	0x40004400

08014e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b088      	sub	sp, #32
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e28:	f107 0310 	add.w	r3, r7, #16
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	601a      	str	r2, [r3, #0]
 8014e30:	605a      	str	r2, [r3, #4]
 8014e32:	609a      	str	r2, [r3, #8]
 8014e34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4a15      	ldr	r2, [pc, #84]	@ (8014e90 <HAL_UART_MspInit+0x70>)
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	d123      	bne.n	8014e88 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8014e40:	4b14      	ldr	r3, [pc, #80]	@ (8014e94 <HAL_UART_MspInit+0x74>)
 8014e42:	69db      	ldr	r3, [r3, #28]
 8014e44:	4a13      	ldr	r2, [pc, #76]	@ (8014e94 <HAL_UART_MspInit+0x74>)
 8014e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014e4a:	61d3      	str	r3, [r2, #28]
 8014e4c:	4b11      	ldr	r3, [pc, #68]	@ (8014e94 <HAL_UART_MspInit+0x74>)
 8014e4e:	69db      	ldr	r3, [r3, #28]
 8014e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014e54:	60fb      	str	r3, [r7, #12]
 8014e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e58:	4b0e      	ldr	r3, [pc, #56]	@ (8014e94 <HAL_UART_MspInit+0x74>)
 8014e5a:	699b      	ldr	r3, [r3, #24]
 8014e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8014e94 <HAL_UART_MspInit+0x74>)
 8014e5e:	f043 0304 	orr.w	r3, r3, #4
 8014e62:	6193      	str	r3, [r2, #24]
 8014e64:	4b0b      	ldr	r3, [pc, #44]	@ (8014e94 <HAL_UART_MspInit+0x74>)
 8014e66:	699b      	ldr	r3, [r3, #24]
 8014e68:	f003 0304 	and.w	r3, r3, #4
 8014e6c:	60bb      	str	r3, [r7, #8]
 8014e6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8014e70:	230c      	movs	r3, #12
 8014e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e74:	2302      	movs	r3, #2
 8014e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e78:	2302      	movs	r3, #2
 8014e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014e7c:	f107 0310 	add.w	r3, r7, #16
 8014e80:	4619      	mov	r1, r3
 8014e82:	4805      	ldr	r0, [pc, #20]	@ (8014e98 <HAL_UART_MspInit+0x78>)
 8014e84:	f001 fa28 	bl	80162d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8014e88:	bf00      	nop
 8014e8a:	3720      	adds	r7, #32
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	40004400 	.word	0x40004400
 8014e94:	40021000 	.word	0x40021000
 8014e98:	40010800 	.word	0x40010800

08014e9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8014e9c:	f7ff ff90 	bl	8014dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014ea0:	480b      	ldr	r0, [pc, #44]	@ (8014ed0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8014ea2:	490c      	ldr	r1, [pc, #48]	@ (8014ed4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8014ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8014ed8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8014ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014ea8:	e002      	b.n	8014eb0 <LoopCopyDataInit>

08014eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014eae:	3304      	adds	r3, #4

08014eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014eb4:	d3f9      	bcc.n	8014eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014eb6:	4a09      	ldr	r2, [pc, #36]	@ (8014edc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8014eb8:	4c09      	ldr	r4, [pc, #36]	@ (8014ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8014eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014ebc:	e001      	b.n	8014ec2 <LoopFillZerobss>

08014ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014ec0:	3204      	adds	r2, #4

08014ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014ec4:	d3fb      	bcc.n	8014ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014ec6:	f002 f8d7 	bl	8017078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8014eca:	f7ff fa67 	bl	801439c <main>
  bx lr
 8014ece:	4770      	bx	lr
  ldr r0, =_sdata
 8014ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014ed4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8014ed8:	08017128 	.word	0x08017128
  ldr r2, =_sbss
 8014edc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8014ee0:	20004928 	.word	0x20004928

08014ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8014ee4:	e7fe      	b.n	8014ee4 <ADC1_2_IRQHandler>
	...

08014ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8014eec:	4b08      	ldr	r3, [pc, #32]	@ (8014f10 <HAL_Init+0x28>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4a07      	ldr	r2, [pc, #28]	@ (8014f10 <HAL_Init+0x28>)
 8014ef2:	f043 0310 	orr.w	r3, r3, #16
 8014ef6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014ef8:	2003      	movs	r0, #3
 8014efa:	f000 ffab 	bl	8015e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8014efe:	2000      	movs	r0, #0
 8014f00:	f000 f808 	bl	8014f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8014f04:	f7ff fee2 	bl	8014ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8014f08:	2300      	movs	r3, #0
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	40022000 	.word	0x40022000

08014f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b082      	sub	sp, #8
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8014f1c:	4b12      	ldr	r3, [pc, #72]	@ (8014f68 <HAL_InitTick+0x54>)
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	4b12      	ldr	r3, [pc, #72]	@ (8014f6c <HAL_InitTick+0x58>)
 8014f22:	781b      	ldrb	r3, [r3, #0]
 8014f24:	4619      	mov	r1, r3
 8014f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f32:	4618      	mov	r0, r3
 8014f34:	f000 ffc3 	bl	8015ebe <HAL_SYSTICK_Config>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d001      	beq.n	8014f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8014f3e:	2301      	movs	r3, #1
 8014f40:	e00e      	b.n	8014f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2b0f      	cmp	r3, #15
 8014f46:	d80a      	bhi.n	8014f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014f48:	2200      	movs	r2, #0
 8014f4a:	6879      	ldr	r1, [r7, #4]
 8014f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f50:	f000 ff8b 	bl	8015e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014f54:	4a06      	ldr	r2, [pc, #24]	@ (8014f70 <HAL_InitTick+0x5c>)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	e000      	b.n	8014f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8014f5e:	2301      	movs	r3, #1
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}
 8014f68:	20000008 	.word	0x20000008
 8014f6c:	20000010 	.word	0x20000010
 8014f70:	2000000c 	.word	0x2000000c

08014f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014f74:	b480      	push	{r7}
 8014f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014f78:	4b05      	ldr	r3, [pc, #20]	@ (8014f90 <HAL_IncTick+0x1c>)
 8014f7a:	781b      	ldrb	r3, [r3, #0]
 8014f7c:	461a      	mov	r2, r3
 8014f7e:	4b05      	ldr	r3, [pc, #20]	@ (8014f94 <HAL_IncTick+0x20>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	4413      	add	r3, r2
 8014f84:	4a03      	ldr	r2, [pc, #12]	@ (8014f94 <HAL_IncTick+0x20>)
 8014f86:	6013      	str	r3, [r2, #0]
}
 8014f88:	bf00      	nop
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bc80      	pop	{r7}
 8014f8e:	4770      	bx	lr
 8014f90:	20000010 	.word	0x20000010
 8014f94:	20004904 	.word	0x20004904

08014f98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8014f9c:	4b02      	ldr	r3, [pc, #8]	@ (8014fa8 <HAL_GetTick+0x10>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bc80      	pop	{r7}
 8014fa6:	4770      	bx	lr
 8014fa8:	20004904 	.word	0x20004904

08014fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b084      	sub	sp, #16
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014fb4:	f7ff fff0 	bl	8014f98 <HAL_GetTick>
 8014fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fc4:	d005      	beq.n	8014fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8014ff0 <HAL_Delay+0x44>)
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	461a      	mov	r2, r3
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	4413      	add	r3, r2
 8014fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8014fd2:	bf00      	nop
 8014fd4:	f7ff ffe0 	bl	8014f98 <HAL_GetTick>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	1ad3      	subs	r3, r2, r3
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d8f7      	bhi.n	8014fd4 <HAL_Delay+0x28>
  {
  }
}
 8014fe4:	bf00      	nop
 8014fe6:	bf00      	nop
 8014fe8:	3710      	adds	r7, #16
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	20000010 	.word	0x20000010

08014ff4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d101      	bne.n	8015006 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8015002:	2301      	movs	r3, #1
 8015004:	e0ed      	b.n	80151e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	f893 3020 	ldrb.w	r3, [r3, #32]
 801500c:	b2db      	uxtb	r3, r3
 801500e:	2b00      	cmp	r3, #0
 8015010:	d102      	bne.n	8015018 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7ff f8e2 	bl	80141dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	f042 0201 	orr.w	r2, r2, #1
 8015026:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015028:	f7ff ffb6 	bl	8014f98 <HAL_GetTick>
 801502c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801502e:	e012      	b.n	8015056 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015030:	f7ff ffb2 	bl	8014f98 <HAL_GetTick>
 8015034:	4602      	mov	r2, r0
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	1ad3      	subs	r3, r2, r3
 801503a:	2b0a      	cmp	r3, #10
 801503c:	d90b      	bls.n	8015056 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015042:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2205      	movs	r2, #5
 801504e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015052:	2301      	movs	r3, #1
 8015054:	e0c5      	b.n	80151e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	685b      	ldr	r3, [r3, #4]
 801505c:	f003 0301 	and.w	r3, r3, #1
 8015060:	2b00      	cmp	r3, #0
 8015062:	d0e5      	beq.n	8015030 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	681a      	ldr	r2, [r3, #0]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	f022 0202 	bic.w	r2, r2, #2
 8015072:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015074:	f7ff ff90 	bl	8014f98 <HAL_GetTick>
 8015078:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801507a:	e012      	b.n	80150a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801507c:	f7ff ff8c 	bl	8014f98 <HAL_GetTick>
 8015080:	4602      	mov	r2, r0
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	1ad3      	subs	r3, r2, r3
 8015086:	2b0a      	cmp	r3, #10
 8015088:	d90b      	bls.n	80150a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801508e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2205      	movs	r2, #5
 801509a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801509e:	2301      	movs	r3, #1
 80150a0:	e09f      	b.n	80151e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	f003 0302 	and.w	r3, r3, #2
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d1e5      	bne.n	801507c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	7e1b      	ldrb	r3, [r3, #24]
 80150b4:	2b01      	cmp	r3, #1
 80150b6:	d108      	bne.n	80150ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80150c6:	601a      	str	r2, [r3, #0]
 80150c8:	e007      	b.n	80150da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80150d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	7e5b      	ldrb	r3, [r3, #25]
 80150de:	2b01      	cmp	r3, #1
 80150e0:	d108      	bne.n	80150f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80150f0:	601a      	str	r2, [r3, #0]
 80150f2:	e007      	b.n	8015104 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8015102:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	7e9b      	ldrb	r3, [r3, #26]
 8015108:	2b01      	cmp	r3, #1
 801510a:	d108      	bne.n	801511e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	f042 0220 	orr.w	r2, r2, #32
 801511a:	601a      	str	r2, [r3, #0]
 801511c:	e007      	b.n	801512e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	f022 0220 	bic.w	r2, r2, #32
 801512c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	7edb      	ldrb	r3, [r3, #27]
 8015132:	2b01      	cmp	r3, #1
 8015134:	d108      	bne.n	8015148 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	f022 0210 	bic.w	r2, r2, #16
 8015144:	601a      	str	r2, [r3, #0]
 8015146:	e007      	b.n	8015158 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	f042 0210 	orr.w	r2, r2, #16
 8015156:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	7f1b      	ldrb	r3, [r3, #28]
 801515c:	2b01      	cmp	r3, #1
 801515e:	d108      	bne.n	8015172 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	681a      	ldr	r2, [r3, #0]
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	f042 0208 	orr.w	r2, r2, #8
 801516e:	601a      	str	r2, [r3, #0]
 8015170:	e007      	b.n	8015182 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	f022 0208 	bic.w	r2, r2, #8
 8015180:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	7f5b      	ldrb	r3, [r3, #29]
 8015186:	2b01      	cmp	r3, #1
 8015188:	d108      	bne.n	801519c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	f042 0204 	orr.w	r2, r2, #4
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	e007      	b.n	80151ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	f022 0204 	bic.w	r2, r2, #4
 80151aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	689a      	ldr	r2, [r3, #8]
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	68db      	ldr	r3, [r3, #12]
 80151b4:	431a      	orrs	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	691b      	ldr	r3, [r3, #16]
 80151ba:	431a      	orrs	r2, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	695b      	ldr	r3, [r3, #20]
 80151c0:	ea42 0103 	orr.w	r1, r2, r3
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	1e5a      	subs	r2, r3, #1
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	430a      	orrs	r2, r1
 80151d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2200      	movs	r2, #0
 80151d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2201      	movs	r2, #1
 80151dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80151e0:	2300      	movs	r3, #0
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}

080151ea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80151ea:	b480      	push	{r7}
 80151ec:	b087      	sub	sp, #28
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	6078      	str	r0, [r7, #4]
 80151f2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015200:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015202:	7cfb      	ldrb	r3, [r7, #19]
 8015204:	2b01      	cmp	r3, #1
 8015206:	d003      	beq.n	8015210 <HAL_CAN_ConfigFilter+0x26>
 8015208:	7cfb      	ldrb	r3, [r7, #19]
 801520a:	2b02      	cmp	r3, #2
 801520c:	f040 80aa 	bne.w	8015364 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8015216:	f043 0201 	orr.w	r2, r3, #1
 801521a:	697b      	ldr	r3, [r7, #20]
 801521c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	695b      	ldr	r3, [r3, #20]
 8015224:	f003 031f 	and.w	r3, r3, #31
 8015228:	2201      	movs	r2, #1
 801522a:	fa02 f303 	lsl.w	r3, r2, r3
 801522e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	43db      	mvns	r3, r3
 801523a:	401a      	ands	r2, r3
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	69db      	ldr	r3, [r3, #28]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d123      	bne.n	8015292 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	43db      	mvns	r3, r3
 8015254:	401a      	ands	r2, r3
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	68db      	ldr	r3, [r3, #12]
 8015260:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015268:	683a      	ldr	r2, [r7, #0]
 801526a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801526c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	3248      	adds	r2, #72	@ 0x48
 8015272:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	689b      	ldr	r3, [r3, #8]
 801527a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015286:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015288:	6979      	ldr	r1, [r7, #20]
 801528a:	3348      	adds	r3, #72	@ 0x48
 801528c:	00db      	lsls	r3, r3, #3
 801528e:	440b      	add	r3, r1
 8015290:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	69db      	ldr	r3, [r3, #28]
 8015296:	2b01      	cmp	r3, #1
 8015298:	d122      	bne.n	80152e0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	431a      	orrs	r2, r3
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	685b      	ldr	r3, [r3, #4]
 80152b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80152b6:	683a      	ldr	r2, [r7, #0]
 80152b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80152ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	3248      	adds	r2, #72	@ 0x48
 80152c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	689b      	ldr	r3, [r3, #8]
 80152c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	68db      	ldr	r3, [r3, #12]
 80152ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80152d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80152d6:	6979      	ldr	r1, [r7, #20]
 80152d8:	3348      	adds	r3, #72	@ 0x48
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	440b      	add	r3, r1
 80152de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	699b      	ldr	r3, [r3, #24]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d109      	bne.n	80152fc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	43db      	mvns	r3, r3
 80152f2:	401a      	ands	r2, r3
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80152fa:	e007      	b.n	801530c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	431a      	orrs	r2, r3
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	691b      	ldr	r3, [r3, #16]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d109      	bne.n	8015328 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	43db      	mvns	r3, r3
 801531e:	401a      	ands	r2, r3
 8015320:	697b      	ldr	r3, [r7, #20]
 8015322:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8015326:	e007      	b.n	8015338 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	431a      	orrs	r2, r3
 8015332:	697b      	ldr	r3, [r7, #20]
 8015334:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	6a1b      	ldr	r3, [r3, #32]
 801533c:	2b01      	cmp	r3, #1
 801533e:	d107      	bne.n	8015350 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8015340:	697b      	ldr	r3, [r7, #20]
 8015342:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	431a      	orrs	r2, r3
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8015356:	f023 0201 	bic.w	r2, r3, #1
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8015360:	2300      	movs	r3, #0
 8015362:	e006      	b.n	8015372 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015368:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8015370:	2301      	movs	r3, #1
  }
}
 8015372:	4618      	mov	r0, r3
 8015374:	371c      	adds	r7, #28
 8015376:	46bd      	mov	sp, r7
 8015378:	bc80      	pop	{r7}
 801537a:	4770      	bx	lr

0801537c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f893 3020 	ldrb.w	r3, [r3, #32]
 801538a:	b2db      	uxtb	r3, r3
 801538c:	2b01      	cmp	r3, #1
 801538e:	d12e      	bne.n	80153ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	2202      	movs	r2, #2
 8015394:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	f022 0201 	bic.w	r2, r2, #1
 80153a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80153a8:	f7ff fdf6 	bl	8014f98 <HAL_GetTick>
 80153ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80153ae:	e012      	b.n	80153d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80153b0:	f7ff fdf2 	bl	8014f98 <HAL_GetTick>
 80153b4:	4602      	mov	r2, r0
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	1ad3      	subs	r3, r2, r3
 80153ba:	2b0a      	cmp	r3, #10
 80153bc:	d90b      	bls.n	80153d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2205      	movs	r2, #5
 80153ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80153d2:	2301      	movs	r3, #1
 80153d4:	e012      	b.n	80153fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	f003 0301 	and.w	r3, r3, #1
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d1e5      	bne.n	80153b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2200      	movs	r2, #0
 80153e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80153ea:	2300      	movs	r3, #0
 80153ec:	e006      	b.n	80153fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153f2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80153fa:	2301      	movs	r3, #1
  }
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	3710      	adds	r7, #16
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8015404:	b480      	push	{r7}
 8015406:	b089      	sub	sp, #36	@ 0x24
 8015408:	af00      	add	r7, sp, #0
 801540a:	60f8      	str	r0, [r7, #12]
 801540c:	60b9      	str	r1, [r7, #8]
 801540e:	607a      	str	r2, [r7, #4]
 8015410:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015418:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	689b      	ldr	r3, [r3, #8]
 8015420:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8015422:	7ffb      	ldrb	r3, [r7, #31]
 8015424:	2b01      	cmp	r3, #1
 8015426:	d003      	beq.n	8015430 <HAL_CAN_AddTxMessage+0x2c>
 8015428:	7ffb      	ldrb	r3, [r7, #31]
 801542a:	2b02      	cmp	r3, #2
 801542c:	f040 80ad 	bne.w	801558a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015430:	69bb      	ldr	r3, [r7, #24]
 8015432:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8015436:	2b00      	cmp	r3, #0
 8015438:	d10a      	bne.n	8015450 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801543a:	69bb      	ldr	r3, [r7, #24]
 801543c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015440:	2b00      	cmp	r3, #0
 8015442:	d105      	bne.n	8015450 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8015444:	69bb      	ldr	r3, [r7, #24]
 8015446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801544a:	2b00      	cmp	r3, #0
 801544c:	f000 8095 	beq.w	801557a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8015450:	69bb      	ldr	r3, [r7, #24]
 8015452:	0e1b      	lsrs	r3, r3, #24
 8015454:	f003 0303 	and.w	r3, r3, #3
 8015458:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 801545a:	2201      	movs	r2, #1
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	409a      	lsls	r2, r3
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	689b      	ldr	r3, [r3, #8]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d10d      	bne.n	8015488 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015476:	68f9      	ldr	r1, [r7, #12]
 8015478:	6809      	ldr	r1, [r1, #0]
 801547a:	431a      	orrs	r2, r3
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	3318      	adds	r3, #24
 8015480:	011b      	lsls	r3, r3, #4
 8015482:	440b      	add	r3, r1
 8015484:	601a      	str	r2, [r3, #0]
 8015486:	e00f      	b.n	80154a8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015492:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015498:	68f9      	ldr	r1, [r7, #12]
 801549a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 801549c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	3318      	adds	r3, #24
 80154a2:	011b      	lsls	r3, r3, #4
 80154a4:	440b      	add	r3, r1
 80154a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	6819      	ldr	r1, [r3, #0]
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	691a      	ldr	r2, [r3, #16]
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	3318      	adds	r3, #24
 80154b4:	011b      	lsls	r3, r3, #4
 80154b6:	440b      	add	r3, r1
 80154b8:	3304      	adds	r3, #4
 80154ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	7d1b      	ldrb	r3, [r3, #20]
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d111      	bne.n	80154e8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	681a      	ldr	r2, [r3, #0]
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	3318      	adds	r3, #24
 80154cc:	011b      	lsls	r3, r3, #4
 80154ce:	4413      	add	r3, r2
 80154d0:	3304      	adds	r3, #4
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	68fa      	ldr	r2, [r7, #12]
 80154d6:	6811      	ldr	r1, [r2, #0]
 80154d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	3318      	adds	r3, #24
 80154e0:	011b      	lsls	r3, r3, #4
 80154e2:	440b      	add	r3, r1
 80154e4:	3304      	adds	r3, #4
 80154e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	3307      	adds	r3, #7
 80154ec:	781b      	ldrb	r3, [r3, #0]
 80154ee:	061a      	lsls	r2, r3, #24
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	3306      	adds	r3, #6
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	041b      	lsls	r3, r3, #16
 80154f8:	431a      	orrs	r2, r3
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	3305      	adds	r3, #5
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	021b      	lsls	r3, r3, #8
 8015502:	4313      	orrs	r3, r2
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	3204      	adds	r2, #4
 8015508:	7812      	ldrb	r2, [r2, #0]
 801550a:	4610      	mov	r0, r2
 801550c:	68fa      	ldr	r2, [r7, #12]
 801550e:	6811      	ldr	r1, [r2, #0]
 8015510:	ea43 0200 	orr.w	r2, r3, r0
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	011b      	lsls	r3, r3, #4
 8015518:	440b      	add	r3, r1
 801551a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 801551e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	3303      	adds	r3, #3
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	061a      	lsls	r2, r3, #24
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	3302      	adds	r3, #2
 801552c:	781b      	ldrb	r3, [r3, #0]
 801552e:	041b      	lsls	r3, r3, #16
 8015530:	431a      	orrs	r2, r3
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	3301      	adds	r3, #1
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	021b      	lsls	r3, r3, #8
 801553a:	4313      	orrs	r3, r2
 801553c:	687a      	ldr	r2, [r7, #4]
 801553e:	7812      	ldrb	r2, [r2, #0]
 8015540:	4610      	mov	r0, r2
 8015542:	68fa      	ldr	r2, [r7, #12]
 8015544:	6811      	ldr	r1, [r2, #0]
 8015546:	ea43 0200 	orr.w	r2, r3, r0
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	011b      	lsls	r3, r3, #4
 801554e:	440b      	add	r3, r1
 8015550:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8015554:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	3318      	adds	r3, #24
 801555e:	011b      	lsls	r3, r3, #4
 8015560:	4413      	add	r3, r2
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	68fa      	ldr	r2, [r7, #12]
 8015566:	6811      	ldr	r1, [r2, #0]
 8015568:	f043 0201 	orr.w	r2, r3, #1
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	3318      	adds	r3, #24
 8015570:	011b      	lsls	r3, r3, #4
 8015572:	440b      	add	r3, r1
 8015574:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8015576:	2300      	movs	r3, #0
 8015578:	e00e      	b.n	8015598 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801557e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8015586:	2301      	movs	r3, #1
 8015588:	e006      	b.n	8015598 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801558e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8015596:	2301      	movs	r3, #1
  }
}
 8015598:	4618      	mov	r0, r3
 801559a:	3724      	adds	r7, #36	@ 0x24
 801559c:	46bd      	mov	sp, r7
 801559e:	bc80      	pop	{r7}
 80155a0:	4770      	bx	lr

080155a2 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80155a2:	b480      	push	{r7}
 80155a4:	b085      	sub	sp, #20
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
 80155aa:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80155ac:	2300      	movs	r3, #0
 80155ae:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80155b6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80155b8:	7afb      	ldrb	r3, [r7, #11]
 80155ba:	2b01      	cmp	r3, #1
 80155bc:	d002      	beq.n	80155c4 <HAL_CAN_IsTxMessagePending+0x22>
 80155be:	7afb      	ldrb	r3, [r7, #11]
 80155c0:	2b02      	cmp	r3, #2
 80155c2:	d10b      	bne.n	80155dc <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	689a      	ldr	r2, [r3, #8]
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	069b      	lsls	r3, r3, #26
 80155ce:	401a      	ands	r2, r3
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	069b      	lsls	r3, r3, #26
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d001      	beq.n	80155dc <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80155d8:	2301      	movs	r3, #1
 80155da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80155dc:	68fb      	ldr	r3, [r7, #12]
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3714      	adds	r7, #20
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bc80      	pop	{r7}
 80155e6:	4770      	bx	lr

080155e8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80155e8:	b480      	push	{r7}
 80155ea:	b087      	sub	sp, #28
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	607a      	str	r2, [r7, #4]
 80155f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80155fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80155fe:	7dfb      	ldrb	r3, [r7, #23]
 8015600:	2b01      	cmp	r3, #1
 8015602:	d003      	beq.n	801560c <HAL_CAN_GetRxMessage+0x24>
 8015604:	7dfb      	ldrb	r3, [r7, #23]
 8015606:	2b02      	cmp	r3, #2
 8015608:	f040 8103 	bne.w	8015812 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d10e      	bne.n	8015630 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	f003 0303 	and.w	r3, r3, #3
 801561c:	2b00      	cmp	r3, #0
 801561e:	d116      	bne.n	801564e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015624:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 801562c:	2301      	movs	r3, #1
 801562e:	e0f7      	b.n	8015820 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	691b      	ldr	r3, [r3, #16]
 8015636:	f003 0303 	and.w	r3, r3, #3
 801563a:	2b00      	cmp	r3, #0
 801563c:	d107      	bne.n	801564e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015642:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 801564a:	2301      	movs	r3, #1
 801564c:	e0e8      	b.n	8015820 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	331b      	adds	r3, #27
 8015656:	011b      	lsls	r3, r3, #4
 8015658:	4413      	add	r3, r2
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f003 0204 	and.w	r2, r3, #4
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	689b      	ldr	r3, [r3, #8]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d10c      	bne.n	8015686 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681a      	ldr	r2, [r3, #0]
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	331b      	adds	r3, #27
 8015674:	011b      	lsls	r3, r3, #4
 8015676:	4413      	add	r3, r2
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	0d5b      	lsrs	r3, r3, #21
 801567c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	601a      	str	r2, [r3, #0]
 8015684:	e00b      	b.n	801569e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	331b      	adds	r3, #27
 801568e:	011b      	lsls	r3, r3, #4
 8015690:	4413      	add	r3, r2
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	08db      	lsrs	r3, r3, #3
 8015696:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	331b      	adds	r3, #27
 80156a6:	011b      	lsls	r3, r3, #4
 80156a8:	4413      	add	r3, r2
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f003 0202 	and.w	r2, r3, #2
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	681a      	ldr	r2, [r3, #0]
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	331b      	adds	r3, #27
 80156bc:	011b      	lsls	r3, r3, #4
 80156be:	4413      	add	r3, r2
 80156c0:	3304      	adds	r3, #4
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f003 0308 	and.w	r3, r3, #8
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d003      	beq.n	80156d4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2208      	movs	r2, #8
 80156d0:	611a      	str	r2, [r3, #16]
 80156d2:	e00b      	b.n	80156ec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	681a      	ldr	r2, [r3, #0]
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	331b      	adds	r3, #27
 80156dc:	011b      	lsls	r3, r3, #4
 80156de:	4413      	add	r3, r2
 80156e0:	3304      	adds	r3, #4
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	f003 020f 	and.w	r2, r3, #15
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	331b      	adds	r3, #27
 80156f4:	011b      	lsls	r3, r3, #4
 80156f6:	4413      	add	r3, r2
 80156f8:	3304      	adds	r3, #4
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	0a1b      	lsrs	r3, r3, #8
 80156fe:	b2da      	uxtb	r2, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	681a      	ldr	r2, [r3, #0]
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	331b      	adds	r3, #27
 801570c:	011b      	lsls	r3, r3, #4
 801570e:	4413      	add	r3, r2
 8015710:	3304      	adds	r3, #4
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	0c1b      	lsrs	r3, r3, #16
 8015716:	b29a      	uxth	r2, r3
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	011b      	lsls	r3, r3, #4
 8015724:	4413      	add	r3, r2
 8015726:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	b2da      	uxtb	r2, r3
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	011b      	lsls	r3, r3, #4
 801573a:	4413      	add	r3, r2
 801573c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	0a1a      	lsrs	r2, r3, #8
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	3301      	adds	r3, #1
 8015748:	b2d2      	uxtb	r2, r2
 801574a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	011b      	lsls	r3, r3, #4
 8015754:	4413      	add	r3, r2
 8015756:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	0c1a      	lsrs	r2, r3, #16
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	3302      	adds	r3, #2
 8015762:	b2d2      	uxtb	r2, r2
 8015764:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	011b      	lsls	r3, r3, #4
 801576e:	4413      	add	r3, r2
 8015770:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	0e1a      	lsrs	r2, r3, #24
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	3303      	adds	r3, #3
 801577c:	b2d2      	uxtb	r2, r2
 801577e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	681a      	ldr	r2, [r3, #0]
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	011b      	lsls	r3, r3, #4
 8015788:	4413      	add	r3, r2
 801578a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	3304      	adds	r3, #4
 8015794:	b2d2      	uxtb	r2, r2
 8015796:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	011b      	lsls	r3, r3, #4
 80157a0:	4413      	add	r3, r2
 80157a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	0a1a      	lsrs	r2, r3, #8
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	3305      	adds	r3, #5
 80157ae:	b2d2      	uxtb	r2, r2
 80157b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	681a      	ldr	r2, [r3, #0]
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	011b      	lsls	r3, r3, #4
 80157ba:	4413      	add	r3, r2
 80157bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	0c1a      	lsrs	r2, r3, #16
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	3306      	adds	r3, #6
 80157c8:	b2d2      	uxtb	r2, r2
 80157ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	681a      	ldr	r2, [r3, #0]
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	011b      	lsls	r3, r3, #4
 80157d4:	4413      	add	r3, r2
 80157d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	0e1a      	lsrs	r2, r3, #24
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	3307      	adds	r3, #7
 80157e2:	b2d2      	uxtb	r2, r2
 80157e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d108      	bne.n	80157fe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	68da      	ldr	r2, [r3, #12]
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	f042 0220 	orr.w	r2, r2, #32
 80157fa:	60da      	str	r2, [r3, #12]
 80157fc:	e007      	b.n	801580e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	691a      	ldr	r2, [r3, #16]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	f042 0220 	orr.w	r2, r2, #32
 801580c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 801580e:	2300      	movs	r3, #0
 8015810:	e006      	b.n	8015820 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015816:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 801581e:	2301      	movs	r3, #1
  }
}
 8015820:	4618      	mov	r0, r3
 8015822:	371c      	adds	r7, #28
 8015824:	46bd      	mov	sp, r7
 8015826:	bc80      	pop	{r7}
 8015828:	4770      	bx	lr

0801582a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 801582a:	b480      	push	{r7}
 801582c:	b085      	sub	sp, #20
 801582e:	af00      	add	r7, sp, #0
 8015830:	6078      	str	r0, [r7, #4]
 8015832:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f893 3020 	ldrb.w	r3, [r3, #32]
 801583a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801583c:	7bfb      	ldrb	r3, [r7, #15]
 801583e:	2b01      	cmp	r3, #1
 8015840:	d002      	beq.n	8015848 <HAL_CAN_ActivateNotification+0x1e>
 8015842:	7bfb      	ldrb	r3, [r7, #15]
 8015844:	2b02      	cmp	r3, #2
 8015846:	d109      	bne.n	801585c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	6959      	ldr	r1, [r3, #20]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	430a      	orrs	r2, r1
 8015856:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8015858:	2300      	movs	r3, #0
 801585a:	e006      	b.n	801586a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015860:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8015868:	2301      	movs	r3, #1
  }
}
 801586a:	4618      	mov	r0, r3
 801586c:	3714      	adds	r7, #20
 801586e:	46bd      	mov	sp, r7
 8015870:	bc80      	pop	{r7}
 8015872:	4770      	bx	lr

08015874 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b08a      	sub	sp, #40	@ 0x28
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801587c:	2300      	movs	r3, #0
 801587e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	695b      	ldr	r3, [r3, #20]
 8015886:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	689b      	ldr	r3, [r3, #8]
 8015896:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	691b      	ldr	r3, [r3, #16]
 80158a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	699b      	ldr	r3, [r3, #24]
 80158ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80158b0:	6a3b      	ldr	r3, [r7, #32]
 80158b2:	f003 0301 	and.w	r3, r3, #1
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d07c      	beq.n	80159b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	f003 0301 	and.w	r3, r3, #1
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d023      	beq.n	801590c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2201      	movs	r2, #1
 80158ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80158cc:	69bb      	ldr	r3, [r7, #24]
 80158ce:	f003 0302 	and.w	r3, r3, #2
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d003      	beq.n	80158de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f000 f983 	bl	8015be2 <HAL_CAN_TxMailbox0CompleteCallback>
 80158dc:	e016      	b.n	801590c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	f003 0304 	and.w	r3, r3, #4
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d004      	beq.n	80158f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80158e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80158ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80158f0:	e00c      	b.n	801590c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	f003 0308 	and.w	r3, r3, #8
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d004      	beq.n	8015906 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80158fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015902:	627b      	str	r3, [r7, #36]	@ 0x24
 8015904:	e002      	b.n	801590c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 f986 	bl	8015c18 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015912:	2b00      	cmp	r3, #0
 8015914:	d024      	beq.n	8015960 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801591e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8015920:	69bb      	ldr	r3, [r7, #24]
 8015922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015926:	2b00      	cmp	r3, #0
 8015928:	d003      	beq.n	8015932 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f000 f962 	bl	8015bf4 <HAL_CAN_TxMailbox1CompleteCallback>
 8015930:	e016      	b.n	8015960 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8015932:	69bb      	ldr	r3, [r7, #24]
 8015934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015938:	2b00      	cmp	r3, #0
 801593a:	d004      	beq.n	8015946 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 801593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801593e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015942:	627b      	str	r3, [r7, #36]	@ 0x24
 8015944:	e00c      	b.n	8015960 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8015946:	69bb      	ldr	r3, [r7, #24]
 8015948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801594c:	2b00      	cmp	r3, #0
 801594e:	d004      	beq.n	801595a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8015950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015956:	627b      	str	r3, [r7, #36]	@ 0x24
 8015958:	e002      	b.n	8015960 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f000 f965 	bl	8015c2a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8015960:	69bb      	ldr	r3, [r7, #24]
 8015962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015966:	2b00      	cmp	r3, #0
 8015968:	d024      	beq.n	80159b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015972:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8015974:	69bb      	ldr	r3, [r7, #24]
 8015976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801597a:	2b00      	cmp	r3, #0
 801597c:	d003      	beq.n	8015986 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f000 f941 	bl	8015c06 <HAL_CAN_TxMailbox2CompleteCallback>
 8015984:	e016      	b.n	80159b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801598c:	2b00      	cmp	r3, #0
 801598e:	d004      	beq.n	801599a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8015990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015996:	627b      	str	r3, [r7, #36]	@ 0x24
 8015998:	e00c      	b.n	80159b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d004      	beq.n	80159ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80159a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80159aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80159ac:	e002      	b.n	80159b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 f944 	bl	8015c3c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80159b4:	6a3b      	ldr	r3, [r7, #32]
 80159b6:	f003 0308 	and.w	r3, r3, #8
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00c      	beq.n	80159d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	f003 0310 	and.w	r3, r3, #16
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d007      	beq.n	80159d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80159c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80159ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2210      	movs	r2, #16
 80159d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80159d8:	6a3b      	ldr	r3, [r7, #32]
 80159da:	f003 0304 	and.w	r3, r3, #4
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d00b      	beq.n	80159fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	f003 0308 	and.w	r3, r3, #8
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d006      	beq.n	80159fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	2208      	movs	r2, #8
 80159f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f000 f92a 	bl	8015c4e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80159fa:	6a3b      	ldr	r3, [r7, #32]
 80159fc:	f003 0302 	and.w	r3, r3, #2
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d009      	beq.n	8015a18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	f003 0303 	and.w	r3, r3, #3
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d002      	beq.n	8015a18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f7fe fe6e 	bl	80146f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8015a18:	6a3b      	ldr	r3, [r7, #32]
 8015a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d00c      	beq.n	8015a3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	f003 0310 	and.w	r3, r3, #16
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d007      	beq.n	8015a3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8015a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015a32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	2210      	movs	r2, #16
 8015a3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8015a3c:	6a3b      	ldr	r3, [r7, #32]
 8015a3e:	f003 0320 	and.w	r3, r3, #32
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00b      	beq.n	8015a5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	f003 0308 	and.w	r3, r3, #8
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d006      	beq.n	8015a5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2208      	movs	r2, #8
 8015a56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8015a58:	6878      	ldr	r0, [r7, #4]
 8015a5a:	f000 f90a 	bl	8015c72 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8015a5e:	6a3b      	ldr	r3, [r7, #32]
 8015a60:	f003 0310 	and.w	r3, r3, #16
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d009      	beq.n	8015a7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	691b      	ldr	r3, [r3, #16]
 8015a6e:	f003 0303 	and.w	r3, r3, #3
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d002      	beq.n	8015a7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f000 f8f2 	bl	8015c60 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8015a7c:	6a3b      	ldr	r3, [r7, #32]
 8015a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d00b      	beq.n	8015a9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8015a86:	69fb      	ldr	r3, [r7, #28]
 8015a88:	f003 0310 	and.w	r3, r3, #16
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d006      	beq.n	8015a9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2210      	movs	r2, #16
 8015a96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 f8f3 	bl	8015c84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8015a9e:	6a3b      	ldr	r3, [r7, #32]
 8015aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d00b      	beq.n	8015ac0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	f003 0308 	and.w	r3, r3, #8
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d006      	beq.n	8015ac0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	2208      	movs	r2, #8
 8015ab8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 f8eb 	bl	8015c96 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8015ac0:	6a3b      	ldr	r3, [r7, #32]
 8015ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d07b      	beq.n	8015bc2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8015aca:	69fb      	ldr	r3, [r7, #28]
 8015acc:	f003 0304 	and.w	r3, r3, #4
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d072      	beq.n	8015bba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015ad4:	6a3b      	ldr	r3, [r7, #32]
 8015ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d008      	beq.n	8015af0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d003      	beq.n	8015af0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8015ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aea:	f043 0301 	orr.w	r3, r3, #1
 8015aee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015af0:	6a3b      	ldr	r3, [r7, #32]
 8015af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d008      	beq.n	8015b0c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d003      	beq.n	8015b0c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8015b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b06:	f043 0302 	orr.w	r3, r3, #2
 8015b0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015b0c:	6a3b      	ldr	r3, [r7, #32]
 8015b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d008      	beq.n	8015b28 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d003      	beq.n	8015b28 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8015b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b22:	f043 0304 	orr.w	r3, r3, #4
 8015b26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015b28:	6a3b      	ldr	r3, [r7, #32]
 8015b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d043      	beq.n	8015bba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d03e      	beq.n	8015bba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015b42:	2b60      	cmp	r3, #96	@ 0x60
 8015b44:	d02b      	beq.n	8015b9e <HAL_CAN_IRQHandler+0x32a>
 8015b46:	2b60      	cmp	r3, #96	@ 0x60
 8015b48:	d82e      	bhi.n	8015ba8 <HAL_CAN_IRQHandler+0x334>
 8015b4a:	2b50      	cmp	r3, #80	@ 0x50
 8015b4c:	d022      	beq.n	8015b94 <HAL_CAN_IRQHandler+0x320>
 8015b4e:	2b50      	cmp	r3, #80	@ 0x50
 8015b50:	d82a      	bhi.n	8015ba8 <HAL_CAN_IRQHandler+0x334>
 8015b52:	2b40      	cmp	r3, #64	@ 0x40
 8015b54:	d019      	beq.n	8015b8a <HAL_CAN_IRQHandler+0x316>
 8015b56:	2b40      	cmp	r3, #64	@ 0x40
 8015b58:	d826      	bhi.n	8015ba8 <HAL_CAN_IRQHandler+0x334>
 8015b5a:	2b30      	cmp	r3, #48	@ 0x30
 8015b5c:	d010      	beq.n	8015b80 <HAL_CAN_IRQHandler+0x30c>
 8015b5e:	2b30      	cmp	r3, #48	@ 0x30
 8015b60:	d822      	bhi.n	8015ba8 <HAL_CAN_IRQHandler+0x334>
 8015b62:	2b10      	cmp	r3, #16
 8015b64:	d002      	beq.n	8015b6c <HAL_CAN_IRQHandler+0x2f8>
 8015b66:	2b20      	cmp	r3, #32
 8015b68:	d005      	beq.n	8015b76 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8015b6a:	e01d      	b.n	8015ba8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8015b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b6e:	f043 0308 	orr.w	r3, r3, #8
 8015b72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8015b74:	e019      	b.n	8015baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8015b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b78:	f043 0310 	orr.w	r3, r3, #16
 8015b7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8015b7e:	e014      	b.n	8015baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8015b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b82:	f043 0320 	orr.w	r3, r3, #32
 8015b86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8015b88:	e00f      	b.n	8015baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8015b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8015b92:	e00a      	b.n	8015baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8015b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8015b9c:	e005      	b.n	8015baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8015b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015ba4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8015ba6:	e000      	b.n	8015baa <HAL_CAN_IRQHandler+0x336>
            break;
 8015ba8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	699a      	ldr	r2, [r3, #24]
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8015bb8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2204      	movs	r2, #4
 8015bc0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8015bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d008      	beq.n	8015bda <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bce:	431a      	orrs	r2, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f000 f867 	bl	8015ca8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8015bda:	bf00      	nop
 8015bdc:	3728      	adds	r7, #40	@ 0x28
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015be2:	b480      	push	{r7}
 8015be4:	b083      	sub	sp, #12
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8015bea:	bf00      	nop
 8015bec:	370c      	adds	r7, #12
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bc80      	pop	{r7}
 8015bf2:	4770      	bx	lr

08015bf4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015bf4:	b480      	push	{r7}
 8015bf6:	b083      	sub	sp, #12
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8015bfc:	bf00      	nop
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bc80      	pop	{r7}
 8015c04:	4770      	bx	lr

08015c06 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015c06:	b480      	push	{r7}
 8015c08:	b083      	sub	sp, #12
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8015c0e:	bf00      	nop
 8015c10:	370c      	adds	r7, #12
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bc80      	pop	{r7}
 8015c16:	4770      	bx	lr

08015c18 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b083      	sub	sp, #12
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8015c20:	bf00      	nop
 8015c22:	370c      	adds	r7, #12
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bc80      	pop	{r7}
 8015c28:	4770      	bx	lr

08015c2a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015c2a:	b480      	push	{r7}
 8015c2c:	b083      	sub	sp, #12
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8015c32:	bf00      	nop
 8015c34:	370c      	adds	r7, #12
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bc80      	pop	{r7}
 8015c3a:	4770      	bx	lr

08015c3c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b083      	sub	sp, #12
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8015c44:	bf00      	nop
 8015c46:	370c      	adds	r7, #12
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bc80      	pop	{r7}
 8015c4c:	4770      	bx	lr

08015c4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8015c4e:	b480      	push	{r7}
 8015c50:	b083      	sub	sp, #12
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8015c56:	bf00      	nop
 8015c58:	370c      	adds	r7, #12
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bc80      	pop	{r7}
 8015c5e:	4770      	bx	lr

08015c60 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8015c68:	bf00      	nop
 8015c6a:	370c      	adds	r7, #12
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bc80      	pop	{r7}
 8015c70:	4770      	bx	lr

08015c72 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8015c72:	b480      	push	{r7}
 8015c74:	b083      	sub	sp, #12
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8015c7a:	bf00      	nop
 8015c7c:	370c      	adds	r7, #12
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bc80      	pop	{r7}
 8015c82:	4770      	bx	lr

08015c84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8015c84:	b480      	push	{r7}
 8015c86:	b083      	sub	sp, #12
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8015c8c:	bf00      	nop
 8015c8e:	370c      	adds	r7, #12
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bc80      	pop	{r7}
 8015c94:	4770      	bx	lr

08015c96 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8015c96:	b480      	push	{r7}
 8015c98:	b083      	sub	sp, #12
 8015c9a:	af00      	add	r7, sp, #0
 8015c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8015c9e:	bf00      	nop
 8015ca0:	370c      	adds	r7, #12
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bc80      	pop	{r7}
 8015ca6:	4770      	bx	lr

08015ca8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b083      	sub	sp, #12
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8015cb0:	bf00      	nop
 8015cb2:	370c      	adds	r7, #12
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bc80      	pop	{r7}
 8015cb8:	4770      	bx	lr
	...

08015cbc <__NVIC_SetPriorityGrouping>:
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b085      	sub	sp, #20
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f003 0307 	and.w	r3, r3, #7
 8015cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8015d00 <__NVIC_SetPriorityGrouping+0x44>)
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015cd2:	68ba      	ldr	r2, [r7, #8]
 8015cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8015cd8:	4013      	ands	r3, r2
 8015cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8015ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015cee:	4a04      	ldr	r2, [pc, #16]	@ (8015d00 <__NVIC_SetPriorityGrouping+0x44>)
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	60d3      	str	r3, [r2, #12]
}
 8015cf4:	bf00      	nop
 8015cf6:	3714      	adds	r7, #20
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bc80      	pop	{r7}
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop
 8015d00:	e000ed00 	.word	0xe000ed00

08015d04 <__NVIC_GetPriorityGrouping>:
{
 8015d04:	b480      	push	{r7}
 8015d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015d08:	4b04      	ldr	r3, [pc, #16]	@ (8015d1c <__NVIC_GetPriorityGrouping+0x18>)
 8015d0a:	68db      	ldr	r3, [r3, #12]
 8015d0c:	0a1b      	lsrs	r3, r3, #8
 8015d0e:	f003 0307 	and.w	r3, r3, #7
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bc80      	pop	{r7}
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop
 8015d1c:	e000ed00 	.word	0xe000ed00

08015d20 <__NVIC_EnableIRQ>:
{
 8015d20:	b480      	push	{r7}
 8015d22:	b083      	sub	sp, #12
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	4603      	mov	r3, r0
 8015d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	db0b      	blt.n	8015d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015d32:	79fb      	ldrb	r3, [r7, #7]
 8015d34:	f003 021f 	and.w	r2, r3, #31
 8015d38:	4906      	ldr	r1, [pc, #24]	@ (8015d54 <__NVIC_EnableIRQ+0x34>)
 8015d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d3e:	095b      	lsrs	r3, r3, #5
 8015d40:	2001      	movs	r0, #1
 8015d42:	fa00 f202 	lsl.w	r2, r0, r2
 8015d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015d4a:	bf00      	nop
 8015d4c:	370c      	adds	r7, #12
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bc80      	pop	{r7}
 8015d52:	4770      	bx	lr
 8015d54:	e000e100 	.word	0xe000e100

08015d58 <__NVIC_SetPriority>:
{
 8015d58:	b480      	push	{r7}
 8015d5a:	b083      	sub	sp, #12
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	4603      	mov	r3, r0
 8015d60:	6039      	str	r1, [r7, #0]
 8015d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	db0a      	blt.n	8015d82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	b2da      	uxtb	r2, r3
 8015d70:	490c      	ldr	r1, [pc, #48]	@ (8015da4 <__NVIC_SetPriority+0x4c>)
 8015d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d76:	0112      	lsls	r2, r2, #4
 8015d78:	b2d2      	uxtb	r2, r2
 8015d7a:	440b      	add	r3, r1
 8015d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8015d80:	e00a      	b.n	8015d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	b2da      	uxtb	r2, r3
 8015d86:	4908      	ldr	r1, [pc, #32]	@ (8015da8 <__NVIC_SetPriority+0x50>)
 8015d88:	79fb      	ldrb	r3, [r7, #7]
 8015d8a:	f003 030f 	and.w	r3, r3, #15
 8015d8e:	3b04      	subs	r3, #4
 8015d90:	0112      	lsls	r2, r2, #4
 8015d92:	b2d2      	uxtb	r2, r2
 8015d94:	440b      	add	r3, r1
 8015d96:	761a      	strb	r2, [r3, #24]
}
 8015d98:	bf00      	nop
 8015d9a:	370c      	adds	r7, #12
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bc80      	pop	{r7}
 8015da0:	4770      	bx	lr
 8015da2:	bf00      	nop
 8015da4:	e000e100 	.word	0xe000e100
 8015da8:	e000ed00 	.word	0xe000ed00

08015dac <NVIC_EncodePriority>:
{
 8015dac:	b480      	push	{r7}
 8015dae:	b089      	sub	sp, #36	@ 0x24
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	60f8      	str	r0, [r7, #12]
 8015db4:	60b9      	str	r1, [r7, #8]
 8015db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	f003 0307 	and.w	r3, r3, #7
 8015dbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015dc0:	69fb      	ldr	r3, [r7, #28]
 8015dc2:	f1c3 0307 	rsb	r3, r3, #7
 8015dc6:	2b04      	cmp	r3, #4
 8015dc8:	bf28      	it	cs
 8015dca:	2304      	movcs	r3, #4
 8015dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	3304      	adds	r3, #4
 8015dd2:	2b06      	cmp	r3, #6
 8015dd4:	d902      	bls.n	8015ddc <NVIC_EncodePriority+0x30>
 8015dd6:	69fb      	ldr	r3, [r7, #28]
 8015dd8:	3b03      	subs	r3, #3
 8015dda:	e000      	b.n	8015dde <NVIC_EncodePriority+0x32>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015de0:	f04f 32ff 	mov.w	r2, #4294967295
 8015de4:	69bb      	ldr	r3, [r7, #24]
 8015de6:	fa02 f303 	lsl.w	r3, r2, r3
 8015dea:	43da      	mvns	r2, r3
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	401a      	ands	r2, r3
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015df4:	f04f 31ff 	mov.w	r1, #4294967295
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8015dfe:	43d9      	mvns	r1, r3
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015e04:	4313      	orrs	r3, r2
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3724      	adds	r7, #36	@ 0x24
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bc80      	pop	{r7}
 8015e0e:	4770      	bx	lr

08015e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b082      	sub	sp, #8
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	3b01      	subs	r3, #1
 8015e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015e20:	d301      	bcc.n	8015e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015e22:	2301      	movs	r3, #1
 8015e24:	e00f      	b.n	8015e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015e26:	4a0a      	ldr	r2, [pc, #40]	@ (8015e50 <SysTick_Config+0x40>)
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	3b01      	subs	r3, #1
 8015e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015e2e:	210f      	movs	r1, #15
 8015e30:	f04f 30ff 	mov.w	r0, #4294967295
 8015e34:	f7ff ff90 	bl	8015d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015e38:	4b05      	ldr	r3, [pc, #20]	@ (8015e50 <SysTick_Config+0x40>)
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015e3e:	4b04      	ldr	r3, [pc, #16]	@ (8015e50 <SysTick_Config+0x40>)
 8015e40:	2207      	movs	r2, #7
 8015e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015e44:	2300      	movs	r3, #0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	e000e010 	.word	0xe000e010

08015e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b082      	sub	sp, #8
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f7ff ff2d 	bl	8015cbc <__NVIC_SetPriorityGrouping>
}
 8015e62:	bf00      	nop
 8015e64:	3708      	adds	r7, #8
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}

08015e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015e6a:	b580      	push	{r7, lr}
 8015e6c:	b086      	sub	sp, #24
 8015e6e:	af00      	add	r7, sp, #0
 8015e70:	4603      	mov	r3, r0
 8015e72:	60b9      	str	r1, [r7, #8]
 8015e74:	607a      	str	r2, [r7, #4]
 8015e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015e7c:	f7ff ff42 	bl	8015d04 <__NVIC_GetPriorityGrouping>
 8015e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015e82:	687a      	ldr	r2, [r7, #4]
 8015e84:	68b9      	ldr	r1, [r7, #8]
 8015e86:	6978      	ldr	r0, [r7, #20]
 8015e88:	f7ff ff90 	bl	8015dac <NVIC_EncodePriority>
 8015e8c:	4602      	mov	r2, r0
 8015e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e92:	4611      	mov	r1, r2
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7ff ff5f 	bl	8015d58 <__NVIC_SetPriority>
}
 8015e9a:	bf00      	nop
 8015e9c:	3718      	adds	r7, #24
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}

08015ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015ea2:	b580      	push	{r7, lr}
 8015ea4:	b082      	sub	sp, #8
 8015ea6:	af00      	add	r7, sp, #0
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7ff ff35 	bl	8015d20 <__NVIC_EnableIRQ>
}
 8015eb6:	bf00      	nop
 8015eb8:	3708      	adds	r7, #8
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b082      	sub	sp, #8
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f7ff ffa2 	bl	8015e10 <SysTick_Config>
 8015ecc:	4603      	mov	r3, r0
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3708      	adds	r7, #8
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
	...

08015ed8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8015ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eda:	b087      	sub	sp, #28
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	60b9      	str	r1, [r7, #8]
 8015ee2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8015eea:	2300      	movs	r3, #0
 8015eec:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8015fb0 <HAL_FLASH_Program+0xd8>)
 8015ef4:	7e1b      	ldrb	r3, [r3, #24]
 8015ef6:	2b01      	cmp	r3, #1
 8015ef8:	d101      	bne.n	8015efe <HAL_FLASH_Program+0x26>
 8015efa:	2302      	movs	r3, #2
 8015efc:	e054      	b.n	8015fa8 <HAL_FLASH_Program+0xd0>
 8015efe:	4b2c      	ldr	r3, [pc, #176]	@ (8015fb0 <HAL_FLASH_Program+0xd8>)
 8015f00:	2201      	movs	r2, #1
 8015f02:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015f04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8015f08:	f000 f8a8 	bl	801605c <FLASH_WaitForLastOperation>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8015f10:	7dfb      	ldrb	r3, [r7, #23]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d144      	bne.n	8015fa0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d102      	bne.n	8015f22 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	757b      	strb	r3, [r7, #21]
 8015f20:	e007      	b.n	8015f32 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	2b02      	cmp	r3, #2
 8015f26:	d102      	bne.n	8015f2e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8015f28:	2302      	movs	r3, #2
 8015f2a:	757b      	strb	r3, [r7, #21]
 8015f2c:	e001      	b.n	8015f32 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8015f2e:	2304      	movs	r3, #4
 8015f30:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8015f32:	2300      	movs	r3, #0
 8015f34:	75bb      	strb	r3, [r7, #22]
 8015f36:	e02d      	b.n	8015f94 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8015f38:	7dbb      	ldrb	r3, [r7, #22]
 8015f3a:	005a      	lsls	r2, r3, #1
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	eb02 0c03 	add.w	ip, r2, r3
 8015f42:	7dbb      	ldrb	r3, [r7, #22]
 8015f44:	0119      	lsls	r1, r3, #4
 8015f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f4a:	f1c1 0620 	rsb	r6, r1, #32
 8015f4e:	f1a1 0020 	sub.w	r0, r1, #32
 8015f52:	fa22 f401 	lsr.w	r4, r2, r1
 8015f56:	fa03 f606 	lsl.w	r6, r3, r6
 8015f5a:	4334      	orrs	r4, r6
 8015f5c:	fa23 f000 	lsr.w	r0, r3, r0
 8015f60:	4304      	orrs	r4, r0
 8015f62:	fa23 f501 	lsr.w	r5, r3, r1
 8015f66:	b2a3      	uxth	r3, r4
 8015f68:	4619      	mov	r1, r3
 8015f6a:	4660      	mov	r0, ip
 8015f6c:	f000 f85a 	bl	8016024 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015f70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8015f74:	f000 f872 	bl	801605c <FLASH_WaitForLastOperation>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8015f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8015fb4 <HAL_FLASH_Program+0xdc>)
 8015f7e:	691b      	ldr	r3, [r3, #16]
 8015f80:	4a0c      	ldr	r2, [pc, #48]	@ (8015fb4 <HAL_FLASH_Program+0xdc>)
 8015f82:	f023 0301 	bic.w	r3, r3, #1
 8015f86:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8015f88:	7dfb      	ldrb	r3, [r7, #23]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d107      	bne.n	8015f9e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8015f8e:	7dbb      	ldrb	r3, [r7, #22]
 8015f90:	3301      	adds	r3, #1
 8015f92:	75bb      	strb	r3, [r7, #22]
 8015f94:	7dba      	ldrb	r2, [r7, #22]
 8015f96:	7d7b      	ldrb	r3, [r7, #21]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d3cd      	bcc.n	8015f38 <HAL_FLASH_Program+0x60>
 8015f9c:	e000      	b.n	8015fa0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8015f9e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015fa0:	4b03      	ldr	r3, [pc, #12]	@ (8015fb0 <HAL_FLASH_Program+0xd8>)
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	761a      	strb	r2, [r3, #24]

  return status;
 8015fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	371c      	adds	r7, #28
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fb0:	20004908 	.word	0x20004908
 8015fb4:	40022000 	.word	0x40022000

08015fb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8015fb8:	b480      	push	{r7}
 8015fba:	b083      	sub	sp, #12
 8015fbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8015fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8015ff8 <HAL_FLASH_Unlock+0x40>)
 8015fc4:	691b      	ldr	r3, [r3, #16]
 8015fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d00d      	beq.n	8015fea <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8015fce:	4b0a      	ldr	r3, [pc, #40]	@ (8015ff8 <HAL_FLASH_Unlock+0x40>)
 8015fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8015ffc <HAL_FLASH_Unlock+0x44>)
 8015fd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8015fd4:	4b08      	ldr	r3, [pc, #32]	@ (8015ff8 <HAL_FLASH_Unlock+0x40>)
 8015fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8016000 <HAL_FLASH_Unlock+0x48>)
 8015fd8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8015fda:	4b07      	ldr	r3, [pc, #28]	@ (8015ff8 <HAL_FLASH_Unlock+0x40>)
 8015fdc:	691b      	ldr	r3, [r3, #16]
 8015fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d001      	beq.n	8015fea <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8015fea:	79fb      	ldrb	r3, [r7, #7]
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	370c      	adds	r7, #12
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bc80      	pop	{r7}
 8015ff4:	4770      	bx	lr
 8015ff6:	bf00      	nop
 8015ff8:	40022000 	.word	0x40022000
 8015ffc:	45670123 	.word	0x45670123
 8016000:	cdef89ab 	.word	0xcdef89ab

08016004 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8016004:	b480      	push	{r7}
 8016006:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8016008:	4b05      	ldr	r3, [pc, #20]	@ (8016020 <HAL_FLASH_Lock+0x1c>)
 801600a:	691b      	ldr	r3, [r3, #16]
 801600c:	4a04      	ldr	r2, [pc, #16]	@ (8016020 <HAL_FLASH_Lock+0x1c>)
 801600e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016012:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8016014:	2300      	movs	r3, #0
}
 8016016:	4618      	mov	r0, r3
 8016018:	46bd      	mov	sp, r7
 801601a:	bc80      	pop	{r7}
 801601c:	4770      	bx	lr
 801601e:	bf00      	nop
 8016020:	40022000 	.word	0x40022000

08016024 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8016024:	b480      	push	{r7}
 8016026:	b083      	sub	sp, #12
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	460b      	mov	r3, r1
 801602e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8016030:	4b08      	ldr	r3, [pc, #32]	@ (8016054 <FLASH_Program_HalfWord+0x30>)
 8016032:	2200      	movs	r2, #0
 8016034:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8016036:	4b08      	ldr	r3, [pc, #32]	@ (8016058 <FLASH_Program_HalfWord+0x34>)
 8016038:	691b      	ldr	r3, [r3, #16]
 801603a:	4a07      	ldr	r2, [pc, #28]	@ (8016058 <FLASH_Program_HalfWord+0x34>)
 801603c:	f043 0301 	orr.w	r3, r3, #1
 8016040:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	887a      	ldrh	r2, [r7, #2]
 8016046:	801a      	strh	r2, [r3, #0]
}
 8016048:	bf00      	nop
 801604a:	370c      	adds	r7, #12
 801604c:	46bd      	mov	sp, r7
 801604e:	bc80      	pop	{r7}
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop
 8016054:	20004908 	.word	0x20004908
 8016058:	40022000 	.word	0x40022000

0801605c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b084      	sub	sp, #16
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8016064:	f7fe ff98 	bl	8014f98 <HAL_GetTick>
 8016068:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801606a:	e010      	b.n	801608e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016072:	d00c      	beq.n	801608e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d007      	beq.n	801608a <FLASH_WaitForLastOperation+0x2e>
 801607a:	f7fe ff8d 	bl	8014f98 <HAL_GetTick>
 801607e:	4602      	mov	r2, r0
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	1ad3      	subs	r3, r2, r3
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	429a      	cmp	r2, r3
 8016088:	d201      	bcs.n	801608e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 801608a:	2303      	movs	r3, #3
 801608c:	e025      	b.n	80160da <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801608e:	4b15      	ldr	r3, [pc, #84]	@ (80160e4 <FLASH_WaitForLastOperation+0x88>)
 8016090:	68db      	ldr	r3, [r3, #12]
 8016092:	f003 0301 	and.w	r3, r3, #1
 8016096:	2b00      	cmp	r3, #0
 8016098:	d1e8      	bne.n	801606c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801609a:	4b12      	ldr	r3, [pc, #72]	@ (80160e4 <FLASH_WaitForLastOperation+0x88>)
 801609c:	68db      	ldr	r3, [r3, #12]
 801609e:	f003 0320 	and.w	r3, r3, #32
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d002      	beq.n	80160ac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80160a6:	4b0f      	ldr	r3, [pc, #60]	@ (80160e4 <FLASH_WaitForLastOperation+0x88>)
 80160a8:	2220      	movs	r2, #32
 80160aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80160ac:	4b0d      	ldr	r3, [pc, #52]	@ (80160e4 <FLASH_WaitForLastOperation+0x88>)
 80160ae:	68db      	ldr	r3, [r3, #12]
 80160b0:	f003 0310 	and.w	r3, r3, #16
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d10b      	bne.n	80160d0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80160b8:	4b0a      	ldr	r3, [pc, #40]	@ (80160e4 <FLASH_WaitForLastOperation+0x88>)
 80160ba:	69db      	ldr	r3, [r3, #28]
 80160bc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d105      	bne.n	80160d0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80160c4:	4b07      	ldr	r3, [pc, #28]	@ (80160e4 <FLASH_WaitForLastOperation+0x88>)
 80160c6:	68db      	ldr	r3, [r3, #12]
 80160c8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d003      	beq.n	80160d8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80160d0:	f000 f80a 	bl	80160e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80160d4:	2301      	movs	r3, #1
 80160d6:	e000      	b.n	80160da <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80160d8:	2300      	movs	r3, #0
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3710      	adds	r7, #16
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	40022000 	.word	0x40022000

080160e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80160e8:	b480      	push	{r7}
 80160ea:	b083      	sub	sp, #12
 80160ec:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80160ee:	2300      	movs	r3, #0
 80160f0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80160f2:	4b23      	ldr	r3, [pc, #140]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	f003 0310 	and.w	r3, r3, #16
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d009      	beq.n	8016112 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80160fe:	4b21      	ldr	r3, [pc, #132]	@ (8016184 <FLASH_SetErrorCode+0x9c>)
 8016100:	69db      	ldr	r3, [r3, #28]
 8016102:	f043 0302 	orr.w	r3, r3, #2
 8016106:	4a1f      	ldr	r2, [pc, #124]	@ (8016184 <FLASH_SetErrorCode+0x9c>)
 8016108:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f043 0310 	orr.w	r3, r3, #16
 8016110:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8016112:	4b1b      	ldr	r3, [pc, #108]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 8016114:	68db      	ldr	r3, [r3, #12]
 8016116:	f003 0304 	and.w	r3, r3, #4
 801611a:	2b00      	cmp	r3, #0
 801611c:	d009      	beq.n	8016132 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 801611e:	4b19      	ldr	r3, [pc, #100]	@ (8016184 <FLASH_SetErrorCode+0x9c>)
 8016120:	69db      	ldr	r3, [r3, #28]
 8016122:	f043 0301 	orr.w	r3, r3, #1
 8016126:	4a17      	ldr	r2, [pc, #92]	@ (8016184 <FLASH_SetErrorCode+0x9c>)
 8016128:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f043 0304 	orr.w	r3, r3, #4
 8016130:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8016132:	4b13      	ldr	r3, [pc, #76]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 8016134:	69db      	ldr	r3, [r3, #28]
 8016136:	f003 0301 	and.w	r3, r3, #1
 801613a:	2b00      	cmp	r3, #0
 801613c:	d00b      	beq.n	8016156 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 801613e:	4b11      	ldr	r3, [pc, #68]	@ (8016184 <FLASH_SetErrorCode+0x9c>)
 8016140:	69db      	ldr	r3, [r3, #28]
 8016142:	f043 0304 	orr.w	r3, r3, #4
 8016146:	4a0f      	ldr	r2, [pc, #60]	@ (8016184 <FLASH_SetErrorCode+0x9c>)
 8016148:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 801614a:	4b0d      	ldr	r3, [pc, #52]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 801614c:	69db      	ldr	r3, [r3, #28]
 801614e:	4a0c      	ldr	r2, [pc, #48]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 8016150:	f023 0301 	bic.w	r3, r3, #1
 8016154:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f240 1201 	movw	r2, #257	@ 0x101
 801615c:	4293      	cmp	r3, r2
 801615e:	d106      	bne.n	801616e <FLASH_SetErrorCode+0x86>
 8016160:	4b07      	ldr	r3, [pc, #28]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 8016162:	69db      	ldr	r3, [r3, #28]
 8016164:	4a06      	ldr	r2, [pc, #24]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 8016166:	f023 0301 	bic.w	r3, r3, #1
 801616a:	61d3      	str	r3, [r2, #28]
}  
 801616c:	e002      	b.n	8016174 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 801616e:	4a04      	ldr	r2, [pc, #16]	@ (8016180 <FLASH_SetErrorCode+0x98>)
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	60d3      	str	r3, [r2, #12]
}  
 8016174:	bf00      	nop
 8016176:	370c      	adds	r7, #12
 8016178:	46bd      	mov	sp, r7
 801617a:	bc80      	pop	{r7}
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop
 8016180:	40022000 	.word	0x40022000
 8016184:	20004908 	.word	0x20004908

08016188 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8016192:	2301      	movs	r3, #1
 8016194:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8016196:	2300      	movs	r3, #0
 8016198:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801619a:	4b2f      	ldr	r3, [pc, #188]	@ (8016258 <HAL_FLASHEx_Erase+0xd0>)
 801619c:	7e1b      	ldrb	r3, [r3, #24]
 801619e:	2b01      	cmp	r3, #1
 80161a0:	d101      	bne.n	80161a6 <HAL_FLASHEx_Erase+0x1e>
 80161a2:	2302      	movs	r3, #2
 80161a4:	e053      	b.n	801624e <HAL_FLASHEx_Erase+0xc6>
 80161a6:	4b2c      	ldr	r3, [pc, #176]	@ (8016258 <HAL_FLASHEx_Erase+0xd0>)
 80161a8:	2201      	movs	r2, #1
 80161aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	2b02      	cmp	r3, #2
 80161b2:	d116      	bne.n	80161e2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80161b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80161b8:	f7ff ff50 	bl	801605c <FLASH_WaitForLastOperation>
 80161bc:	4603      	mov	r3, r0
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d141      	bne.n	8016246 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80161c2:	2001      	movs	r0, #1
 80161c4:	f000 f84c 	bl	8016260 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80161c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80161cc:	f7ff ff46 	bl	801605c <FLASH_WaitForLastOperation>
 80161d0:	4603      	mov	r3, r0
 80161d2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80161d4:	4b21      	ldr	r3, [pc, #132]	@ (801625c <HAL_FLASHEx_Erase+0xd4>)
 80161d6:	691b      	ldr	r3, [r3, #16]
 80161d8:	4a20      	ldr	r2, [pc, #128]	@ (801625c <HAL_FLASHEx_Erase+0xd4>)
 80161da:	f023 0304 	bic.w	r3, r3, #4
 80161de:	6113      	str	r3, [r2, #16]
 80161e0:	e031      	b.n	8016246 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80161e2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80161e6:	f7ff ff39 	bl	801605c <FLASH_WaitForLastOperation>
 80161ea:	4603      	mov	r3, r0
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d12a      	bne.n	8016246 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	f04f 32ff 	mov.w	r2, #4294967295
 80161f6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	689b      	ldr	r3, [r3, #8]
 80161fc:	60bb      	str	r3, [r7, #8]
 80161fe:	e019      	b.n	8016234 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8016200:	68b8      	ldr	r0, [r7, #8]
 8016202:	f000 f849 	bl	8016298 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8016206:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801620a:	f7ff ff27 	bl	801605c <FLASH_WaitForLastOperation>
 801620e:	4603      	mov	r3, r0
 8016210:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8016212:	4b12      	ldr	r3, [pc, #72]	@ (801625c <HAL_FLASHEx_Erase+0xd4>)
 8016214:	691b      	ldr	r3, [r3, #16]
 8016216:	4a11      	ldr	r2, [pc, #68]	@ (801625c <HAL_FLASHEx_Erase+0xd4>)
 8016218:	f023 0302 	bic.w	r3, r3, #2
 801621c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 801621e:	7bfb      	ldrb	r3, [r7, #15]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d003      	beq.n	801622c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	601a      	str	r2, [r3, #0]
            break;
 801622a:	e00c      	b.n	8016246 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8016232:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	029a      	lsls	r2, r3, #10
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	689b      	ldr	r3, [r3, #8]
 801623e:	4413      	add	r3, r2
 8016240:	68ba      	ldr	r2, [r7, #8]
 8016242:	429a      	cmp	r2, r3
 8016244:	d3dc      	bcc.n	8016200 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8016246:	4b04      	ldr	r3, [pc, #16]	@ (8016258 <HAL_FLASHEx_Erase+0xd0>)
 8016248:	2200      	movs	r2, #0
 801624a:	761a      	strb	r2, [r3, #24]

  return status;
 801624c:	7bfb      	ldrb	r3, [r7, #15]
}
 801624e:	4618      	mov	r0, r3
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	20004908 	.word	0x20004908
 801625c:	40022000 	.word	0x40022000

08016260 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8016260:	b480      	push	{r7}
 8016262:	b083      	sub	sp, #12
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8016268:	4b09      	ldr	r3, [pc, #36]	@ (8016290 <FLASH_MassErase+0x30>)
 801626a:	2200      	movs	r2, #0
 801626c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801626e:	4b09      	ldr	r3, [pc, #36]	@ (8016294 <FLASH_MassErase+0x34>)
 8016270:	691b      	ldr	r3, [r3, #16]
 8016272:	4a08      	ldr	r2, [pc, #32]	@ (8016294 <FLASH_MassErase+0x34>)
 8016274:	f043 0304 	orr.w	r3, r3, #4
 8016278:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801627a:	4b06      	ldr	r3, [pc, #24]	@ (8016294 <FLASH_MassErase+0x34>)
 801627c:	691b      	ldr	r3, [r3, #16]
 801627e:	4a05      	ldr	r2, [pc, #20]	@ (8016294 <FLASH_MassErase+0x34>)
 8016280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016284:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8016286:	bf00      	nop
 8016288:	370c      	adds	r7, #12
 801628a:	46bd      	mov	sp, r7
 801628c:	bc80      	pop	{r7}
 801628e:	4770      	bx	lr
 8016290:	20004908 	.word	0x20004908
 8016294:	40022000 	.word	0x40022000

08016298 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8016298:	b480      	push	{r7}
 801629a:	b083      	sub	sp, #12
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80162a0:	4b0b      	ldr	r3, [pc, #44]	@ (80162d0 <FLASH_PageErase+0x38>)
 80162a2:	2200      	movs	r2, #0
 80162a4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80162a6:	4b0b      	ldr	r3, [pc, #44]	@ (80162d4 <FLASH_PageErase+0x3c>)
 80162a8:	691b      	ldr	r3, [r3, #16]
 80162aa:	4a0a      	ldr	r2, [pc, #40]	@ (80162d4 <FLASH_PageErase+0x3c>)
 80162ac:	f043 0302 	orr.w	r3, r3, #2
 80162b0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80162b2:	4a08      	ldr	r2, [pc, #32]	@ (80162d4 <FLASH_PageErase+0x3c>)
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80162b8:	4b06      	ldr	r3, [pc, #24]	@ (80162d4 <FLASH_PageErase+0x3c>)
 80162ba:	691b      	ldr	r3, [r3, #16]
 80162bc:	4a05      	ldr	r2, [pc, #20]	@ (80162d4 <FLASH_PageErase+0x3c>)
 80162be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162c2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80162c4:	bf00      	nop
 80162c6:	370c      	adds	r7, #12
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bc80      	pop	{r7}
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop
 80162d0:	20004908 	.word	0x20004908
 80162d4:	40022000 	.word	0x40022000

080162d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80162d8:	b480      	push	{r7}
 80162da:	b08b      	sub	sp, #44	@ 0x2c
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80162e2:	2300      	movs	r3, #0
 80162e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80162e6:	2300      	movs	r3, #0
 80162e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80162ea:	e169      	b.n	80165c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80162ec:	2201      	movs	r2, #1
 80162ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162f0:	fa02 f303 	lsl.w	r3, r2, r3
 80162f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	69fa      	ldr	r2, [r7, #28]
 80162fc:	4013      	ands	r3, r2
 80162fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8016300:	69ba      	ldr	r2, [r7, #24]
 8016302:	69fb      	ldr	r3, [r7, #28]
 8016304:	429a      	cmp	r2, r3
 8016306:	f040 8158 	bne.w	80165ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	4a9a      	ldr	r2, [pc, #616]	@ (8016578 <HAL_GPIO_Init+0x2a0>)
 8016310:	4293      	cmp	r3, r2
 8016312:	d05e      	beq.n	80163d2 <HAL_GPIO_Init+0xfa>
 8016314:	4a98      	ldr	r2, [pc, #608]	@ (8016578 <HAL_GPIO_Init+0x2a0>)
 8016316:	4293      	cmp	r3, r2
 8016318:	d875      	bhi.n	8016406 <HAL_GPIO_Init+0x12e>
 801631a:	4a98      	ldr	r2, [pc, #608]	@ (801657c <HAL_GPIO_Init+0x2a4>)
 801631c:	4293      	cmp	r3, r2
 801631e:	d058      	beq.n	80163d2 <HAL_GPIO_Init+0xfa>
 8016320:	4a96      	ldr	r2, [pc, #600]	@ (801657c <HAL_GPIO_Init+0x2a4>)
 8016322:	4293      	cmp	r3, r2
 8016324:	d86f      	bhi.n	8016406 <HAL_GPIO_Init+0x12e>
 8016326:	4a96      	ldr	r2, [pc, #600]	@ (8016580 <HAL_GPIO_Init+0x2a8>)
 8016328:	4293      	cmp	r3, r2
 801632a:	d052      	beq.n	80163d2 <HAL_GPIO_Init+0xfa>
 801632c:	4a94      	ldr	r2, [pc, #592]	@ (8016580 <HAL_GPIO_Init+0x2a8>)
 801632e:	4293      	cmp	r3, r2
 8016330:	d869      	bhi.n	8016406 <HAL_GPIO_Init+0x12e>
 8016332:	4a94      	ldr	r2, [pc, #592]	@ (8016584 <HAL_GPIO_Init+0x2ac>)
 8016334:	4293      	cmp	r3, r2
 8016336:	d04c      	beq.n	80163d2 <HAL_GPIO_Init+0xfa>
 8016338:	4a92      	ldr	r2, [pc, #584]	@ (8016584 <HAL_GPIO_Init+0x2ac>)
 801633a:	4293      	cmp	r3, r2
 801633c:	d863      	bhi.n	8016406 <HAL_GPIO_Init+0x12e>
 801633e:	4a92      	ldr	r2, [pc, #584]	@ (8016588 <HAL_GPIO_Init+0x2b0>)
 8016340:	4293      	cmp	r3, r2
 8016342:	d046      	beq.n	80163d2 <HAL_GPIO_Init+0xfa>
 8016344:	4a90      	ldr	r2, [pc, #576]	@ (8016588 <HAL_GPIO_Init+0x2b0>)
 8016346:	4293      	cmp	r3, r2
 8016348:	d85d      	bhi.n	8016406 <HAL_GPIO_Init+0x12e>
 801634a:	2b12      	cmp	r3, #18
 801634c:	d82a      	bhi.n	80163a4 <HAL_GPIO_Init+0xcc>
 801634e:	2b12      	cmp	r3, #18
 8016350:	d859      	bhi.n	8016406 <HAL_GPIO_Init+0x12e>
 8016352:	a201      	add	r2, pc, #4	@ (adr r2, 8016358 <HAL_GPIO_Init+0x80>)
 8016354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016358:	080163d3 	.word	0x080163d3
 801635c:	080163ad 	.word	0x080163ad
 8016360:	080163bf 	.word	0x080163bf
 8016364:	08016401 	.word	0x08016401
 8016368:	08016407 	.word	0x08016407
 801636c:	08016407 	.word	0x08016407
 8016370:	08016407 	.word	0x08016407
 8016374:	08016407 	.word	0x08016407
 8016378:	08016407 	.word	0x08016407
 801637c:	08016407 	.word	0x08016407
 8016380:	08016407 	.word	0x08016407
 8016384:	08016407 	.word	0x08016407
 8016388:	08016407 	.word	0x08016407
 801638c:	08016407 	.word	0x08016407
 8016390:	08016407 	.word	0x08016407
 8016394:	08016407 	.word	0x08016407
 8016398:	08016407 	.word	0x08016407
 801639c:	080163b5 	.word	0x080163b5
 80163a0:	080163c9 	.word	0x080163c9
 80163a4:	4a79      	ldr	r2, [pc, #484]	@ (801658c <HAL_GPIO_Init+0x2b4>)
 80163a6:	4293      	cmp	r3, r2
 80163a8:	d013      	beq.n	80163d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80163aa:	e02c      	b.n	8016406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	68db      	ldr	r3, [r3, #12]
 80163b0:	623b      	str	r3, [r7, #32]
          break;
 80163b2:	e029      	b.n	8016408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	68db      	ldr	r3, [r3, #12]
 80163b8:	3304      	adds	r3, #4
 80163ba:	623b      	str	r3, [r7, #32]
          break;
 80163bc:	e024      	b.n	8016408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	3308      	adds	r3, #8
 80163c4:	623b      	str	r3, [r7, #32]
          break;
 80163c6:	e01f      	b.n	8016408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80163c8:	683b      	ldr	r3, [r7, #0]
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	330c      	adds	r3, #12
 80163ce:	623b      	str	r3, [r7, #32]
          break;
 80163d0:	e01a      	b.n	8016408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	689b      	ldr	r3, [r3, #8]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d102      	bne.n	80163e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80163da:	2304      	movs	r3, #4
 80163dc:	623b      	str	r3, [r7, #32]
          break;
 80163de:	e013      	b.n	8016408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	689b      	ldr	r3, [r3, #8]
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d105      	bne.n	80163f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80163e8:	2308      	movs	r3, #8
 80163ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	69fa      	ldr	r2, [r7, #28]
 80163f0:	611a      	str	r2, [r3, #16]
          break;
 80163f2:	e009      	b.n	8016408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80163f4:	2308      	movs	r3, #8
 80163f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	69fa      	ldr	r2, [r7, #28]
 80163fc:	615a      	str	r2, [r3, #20]
          break;
 80163fe:	e003      	b.n	8016408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8016400:	2300      	movs	r3, #0
 8016402:	623b      	str	r3, [r7, #32]
          break;
 8016404:	e000      	b.n	8016408 <HAL_GPIO_Init+0x130>
          break;
 8016406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	2bff      	cmp	r3, #255	@ 0xff
 801640c:	d801      	bhi.n	8016412 <HAL_GPIO_Init+0x13a>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	e001      	b.n	8016416 <HAL_GPIO_Init+0x13e>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	3304      	adds	r3, #4
 8016416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8016418:	69bb      	ldr	r3, [r7, #24]
 801641a:	2bff      	cmp	r3, #255	@ 0xff
 801641c:	d802      	bhi.n	8016424 <HAL_GPIO_Init+0x14c>
 801641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016420:	009b      	lsls	r3, r3, #2
 8016422:	e002      	b.n	801642a <HAL_GPIO_Init+0x152>
 8016424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016426:	3b08      	subs	r3, #8
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801642c:	697b      	ldr	r3, [r7, #20]
 801642e:	681a      	ldr	r2, [r3, #0]
 8016430:	210f      	movs	r1, #15
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	fa01 f303 	lsl.w	r3, r1, r3
 8016438:	43db      	mvns	r3, r3
 801643a:	401a      	ands	r2, r3
 801643c:	6a39      	ldr	r1, [r7, #32]
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	fa01 f303 	lsl.w	r3, r1, r3
 8016444:	431a      	orrs	r2, r3
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016452:	2b00      	cmp	r3, #0
 8016454:	f000 80b1 	beq.w	80165ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8016458:	4b4d      	ldr	r3, [pc, #308]	@ (8016590 <HAL_GPIO_Init+0x2b8>)
 801645a:	699b      	ldr	r3, [r3, #24]
 801645c:	4a4c      	ldr	r2, [pc, #304]	@ (8016590 <HAL_GPIO_Init+0x2b8>)
 801645e:	f043 0301 	orr.w	r3, r3, #1
 8016462:	6193      	str	r3, [r2, #24]
 8016464:	4b4a      	ldr	r3, [pc, #296]	@ (8016590 <HAL_GPIO_Init+0x2b8>)
 8016466:	699b      	ldr	r3, [r3, #24]
 8016468:	f003 0301 	and.w	r3, r3, #1
 801646c:	60bb      	str	r3, [r7, #8]
 801646e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8016470:	4a48      	ldr	r2, [pc, #288]	@ (8016594 <HAL_GPIO_Init+0x2bc>)
 8016472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016474:	089b      	lsrs	r3, r3, #2
 8016476:	3302      	adds	r3, #2
 8016478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801647c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 801647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016480:	f003 0303 	and.w	r3, r3, #3
 8016484:	009b      	lsls	r3, r3, #2
 8016486:	220f      	movs	r2, #15
 8016488:	fa02 f303 	lsl.w	r3, r2, r3
 801648c:	43db      	mvns	r3, r3
 801648e:	68fa      	ldr	r2, [r7, #12]
 8016490:	4013      	ands	r3, r2
 8016492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	4a40      	ldr	r2, [pc, #256]	@ (8016598 <HAL_GPIO_Init+0x2c0>)
 8016498:	4293      	cmp	r3, r2
 801649a:	d013      	beq.n	80164c4 <HAL_GPIO_Init+0x1ec>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	4a3f      	ldr	r2, [pc, #252]	@ (801659c <HAL_GPIO_Init+0x2c4>)
 80164a0:	4293      	cmp	r3, r2
 80164a2:	d00d      	beq.n	80164c0 <HAL_GPIO_Init+0x1e8>
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	4a3e      	ldr	r2, [pc, #248]	@ (80165a0 <HAL_GPIO_Init+0x2c8>)
 80164a8:	4293      	cmp	r3, r2
 80164aa:	d007      	beq.n	80164bc <HAL_GPIO_Init+0x1e4>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	4a3d      	ldr	r2, [pc, #244]	@ (80165a4 <HAL_GPIO_Init+0x2cc>)
 80164b0:	4293      	cmp	r3, r2
 80164b2:	d101      	bne.n	80164b8 <HAL_GPIO_Init+0x1e0>
 80164b4:	2303      	movs	r3, #3
 80164b6:	e006      	b.n	80164c6 <HAL_GPIO_Init+0x1ee>
 80164b8:	2304      	movs	r3, #4
 80164ba:	e004      	b.n	80164c6 <HAL_GPIO_Init+0x1ee>
 80164bc:	2302      	movs	r3, #2
 80164be:	e002      	b.n	80164c6 <HAL_GPIO_Init+0x1ee>
 80164c0:	2301      	movs	r3, #1
 80164c2:	e000      	b.n	80164c6 <HAL_GPIO_Init+0x1ee>
 80164c4:	2300      	movs	r3, #0
 80164c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164c8:	f002 0203 	and.w	r2, r2, #3
 80164cc:	0092      	lsls	r2, r2, #2
 80164ce:	4093      	lsls	r3, r2
 80164d0:	68fa      	ldr	r2, [r7, #12]
 80164d2:	4313      	orrs	r3, r2
 80164d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80164d6:	492f      	ldr	r1, [pc, #188]	@ (8016594 <HAL_GPIO_Init+0x2bc>)
 80164d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164da:	089b      	lsrs	r3, r3, #2
 80164dc:	3302      	adds	r3, #2
 80164de:	68fa      	ldr	r2, [r7, #12]
 80164e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d006      	beq.n	80164fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80164f0:	4b2d      	ldr	r3, [pc, #180]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 80164f2:	689a      	ldr	r2, [r3, #8]
 80164f4:	492c      	ldr	r1, [pc, #176]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 80164f6:	69bb      	ldr	r3, [r7, #24]
 80164f8:	4313      	orrs	r3, r2
 80164fa:	608b      	str	r3, [r1, #8]
 80164fc:	e006      	b.n	801650c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80164fe:	4b2a      	ldr	r3, [pc, #168]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016500:	689a      	ldr	r2, [r3, #8]
 8016502:	69bb      	ldr	r3, [r7, #24]
 8016504:	43db      	mvns	r3, r3
 8016506:	4928      	ldr	r1, [pc, #160]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016508:	4013      	ands	r3, r2
 801650a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016514:	2b00      	cmp	r3, #0
 8016516:	d006      	beq.n	8016526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8016518:	4b23      	ldr	r3, [pc, #140]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 801651a:	68da      	ldr	r2, [r3, #12]
 801651c:	4922      	ldr	r1, [pc, #136]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 801651e:	69bb      	ldr	r3, [r7, #24]
 8016520:	4313      	orrs	r3, r2
 8016522:	60cb      	str	r3, [r1, #12]
 8016524:	e006      	b.n	8016534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8016526:	4b20      	ldr	r3, [pc, #128]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016528:	68da      	ldr	r2, [r3, #12]
 801652a:	69bb      	ldr	r3, [r7, #24]
 801652c:	43db      	mvns	r3, r3
 801652e:	491e      	ldr	r1, [pc, #120]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016530:	4013      	ands	r3, r2
 8016532:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801653c:	2b00      	cmp	r3, #0
 801653e:	d006      	beq.n	801654e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8016540:	4b19      	ldr	r3, [pc, #100]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016542:	685a      	ldr	r2, [r3, #4]
 8016544:	4918      	ldr	r1, [pc, #96]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016546:	69bb      	ldr	r3, [r7, #24]
 8016548:	4313      	orrs	r3, r2
 801654a:	604b      	str	r3, [r1, #4]
 801654c:	e006      	b.n	801655c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 801654e:	4b16      	ldr	r3, [pc, #88]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016550:	685a      	ldr	r2, [r3, #4]
 8016552:	69bb      	ldr	r3, [r7, #24]
 8016554:	43db      	mvns	r3, r3
 8016556:	4914      	ldr	r1, [pc, #80]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 8016558:	4013      	ands	r3, r2
 801655a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016564:	2b00      	cmp	r3, #0
 8016566:	d021      	beq.n	80165ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8016568:	4b0f      	ldr	r3, [pc, #60]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 801656a:	681a      	ldr	r2, [r3, #0]
 801656c:	490e      	ldr	r1, [pc, #56]	@ (80165a8 <HAL_GPIO_Init+0x2d0>)
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	4313      	orrs	r3, r2
 8016572:	600b      	str	r3, [r1, #0]
 8016574:	e021      	b.n	80165ba <HAL_GPIO_Init+0x2e2>
 8016576:	bf00      	nop
 8016578:	10320000 	.word	0x10320000
 801657c:	10310000 	.word	0x10310000
 8016580:	10220000 	.word	0x10220000
 8016584:	10210000 	.word	0x10210000
 8016588:	10120000 	.word	0x10120000
 801658c:	10110000 	.word	0x10110000
 8016590:	40021000 	.word	0x40021000
 8016594:	40010000 	.word	0x40010000
 8016598:	40010800 	.word	0x40010800
 801659c:	40010c00 	.word	0x40010c00
 80165a0:	40011000 	.word	0x40011000
 80165a4:	40011400 	.word	0x40011400
 80165a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80165ac:	4b0b      	ldr	r3, [pc, #44]	@ (80165dc <HAL_GPIO_Init+0x304>)
 80165ae:	681a      	ldr	r2, [r3, #0]
 80165b0:	69bb      	ldr	r3, [r7, #24]
 80165b2:	43db      	mvns	r3, r3
 80165b4:	4909      	ldr	r1, [pc, #36]	@ (80165dc <HAL_GPIO_Init+0x304>)
 80165b6:	4013      	ands	r3, r2
 80165b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80165ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165bc:	3301      	adds	r3, #1
 80165be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165c6:	fa22 f303 	lsr.w	r3, r2, r3
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f47f ae8e 	bne.w	80162ec <HAL_GPIO_Init+0x14>
  }
}
 80165d0:	bf00      	nop
 80165d2:	bf00      	nop
 80165d4:	372c      	adds	r7, #44	@ 0x2c
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bc80      	pop	{r7}
 80165da:	4770      	bx	lr
 80165dc:	40010400 	.word	0x40010400

080165e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80165e0:	b480      	push	{r7}
 80165e2:	b083      	sub	sp, #12
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	460b      	mov	r3, r1
 80165ea:	807b      	strh	r3, [r7, #2]
 80165ec:	4613      	mov	r3, r2
 80165ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80165f0:	787b      	ldrb	r3, [r7, #1]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d003      	beq.n	80165fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80165f6:	887a      	ldrh	r2, [r7, #2]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80165fc:	e003      	b.n	8016606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80165fe:	887b      	ldrh	r3, [r7, #2]
 8016600:	041a      	lsls	r2, r3, #16
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	611a      	str	r2, [r3, #16]
}
 8016606:	bf00      	nop
 8016608:	370c      	adds	r7, #12
 801660a:	46bd      	mov	sp, r7
 801660c:	bc80      	pop	{r7}
 801660e:	4770      	bx	lr

08016610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	4603      	mov	r3, r0
 8016618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801661a:	4b08      	ldr	r3, [pc, #32]	@ (801663c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801661c:	695a      	ldr	r2, [r3, #20]
 801661e:	88fb      	ldrh	r3, [r7, #6]
 8016620:	4013      	ands	r3, r2
 8016622:	2b00      	cmp	r3, #0
 8016624:	d006      	beq.n	8016634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016626:	4a05      	ldr	r2, [pc, #20]	@ (801663c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016628:	88fb      	ldrh	r3, [r7, #6]
 801662a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801662c:	88fb      	ldrh	r3, [r7, #6]
 801662e:	4618      	mov	r0, r3
 8016630:	f000 f806 	bl	8016640 <HAL_GPIO_EXTI_Callback>
  }
}
 8016634:	bf00      	nop
 8016636:	3708      	adds	r7, #8
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	40010400 	.word	0x40010400

08016640 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8016640:	b480      	push	{r7}
 8016642:	b083      	sub	sp, #12
 8016644:	af00      	add	r7, sp, #0
 8016646:	4603      	mov	r3, r0
 8016648:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801664a:	bf00      	nop
 801664c:	370c      	adds	r7, #12
 801664e:	46bd      	mov	sp, r7
 8016650:	bc80      	pop	{r7}
 8016652:	4770      	bx	lr

08016654 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016654:	b480      	push	{r7}
 8016656:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8016658:	4b03      	ldr	r3, [pc, #12]	@ (8016668 <HAL_PWR_EnableBkUpAccess+0x14>)
 801665a:	2201      	movs	r2, #1
 801665c:	601a      	str	r2, [r3, #0]
}
 801665e:	bf00      	nop
 8016660:	46bd      	mov	sp, r7
 8016662:	bc80      	pop	{r7}
 8016664:	4770      	bx	lr
 8016666:	bf00      	nop
 8016668:	420e0020 	.word	0x420e0020

0801666c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b086      	sub	sp, #24
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d101      	bne.n	801667e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801667a:	2301      	movs	r3, #1
 801667c:	e272      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	f003 0301 	and.w	r3, r3, #1
 8016686:	2b00      	cmp	r3, #0
 8016688:	f000 8087 	beq.w	801679a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801668c:	4b92      	ldr	r3, [pc, #584]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	f003 030c 	and.w	r3, r3, #12
 8016694:	2b04      	cmp	r3, #4
 8016696:	d00c      	beq.n	80166b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8016698:	4b8f      	ldr	r3, [pc, #572]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	f003 030c 	and.w	r3, r3, #12
 80166a0:	2b08      	cmp	r3, #8
 80166a2:	d112      	bne.n	80166ca <HAL_RCC_OscConfig+0x5e>
 80166a4:	4b8c      	ldr	r3, [pc, #560]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166a6:	685b      	ldr	r3, [r3, #4]
 80166a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80166ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80166b0:	d10b      	bne.n	80166ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80166b2:	4b89      	ldr	r3, [pc, #548]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d06c      	beq.n	8016798 <HAL_RCC_OscConfig+0x12c>
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d168      	bne.n	8016798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80166c6:	2301      	movs	r3, #1
 80166c8:	e24c      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80166d2:	d106      	bne.n	80166e2 <HAL_RCC_OscConfig+0x76>
 80166d4:	4b80      	ldr	r3, [pc, #512]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4a7f      	ldr	r2, [pc, #508]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80166de:	6013      	str	r3, [r2, #0]
 80166e0:	e02e      	b.n	8016740 <HAL_RCC_OscConfig+0xd4>
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d10c      	bne.n	8016704 <HAL_RCC_OscConfig+0x98>
 80166ea:	4b7b      	ldr	r3, [pc, #492]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	4a7a      	ldr	r2, [pc, #488]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80166f4:	6013      	str	r3, [r2, #0]
 80166f6:	4b78      	ldr	r3, [pc, #480]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	4a77      	ldr	r2, [pc, #476]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80166fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016700:	6013      	str	r3, [r2, #0]
 8016702:	e01d      	b.n	8016740 <HAL_RCC_OscConfig+0xd4>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	685b      	ldr	r3, [r3, #4]
 8016708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801670c:	d10c      	bne.n	8016728 <HAL_RCC_OscConfig+0xbc>
 801670e:	4b72      	ldr	r3, [pc, #456]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	4a71      	ldr	r2, [pc, #452]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 8016714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016718:	6013      	str	r3, [r2, #0]
 801671a:	4b6f      	ldr	r3, [pc, #444]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	4a6e      	ldr	r2, [pc, #440]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 8016720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016724:	6013      	str	r3, [r2, #0]
 8016726:	e00b      	b.n	8016740 <HAL_RCC_OscConfig+0xd4>
 8016728:	4b6b      	ldr	r3, [pc, #428]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	4a6a      	ldr	r2, [pc, #424]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801672e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016732:	6013      	str	r3, [r2, #0]
 8016734:	4b68      	ldr	r3, [pc, #416]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	4a67      	ldr	r2, [pc, #412]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801673a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801673e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d013      	beq.n	8016770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016748:	f7fe fc26 	bl	8014f98 <HAL_GetTick>
 801674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801674e:	e008      	b.n	8016762 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016750:	f7fe fc22 	bl	8014f98 <HAL_GetTick>
 8016754:	4602      	mov	r2, r0
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	1ad3      	subs	r3, r2, r3
 801675a:	2b64      	cmp	r3, #100	@ 0x64
 801675c:	d901      	bls.n	8016762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801675e:	2303      	movs	r3, #3
 8016760:	e200      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016762:	4b5d      	ldr	r3, [pc, #372]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801676a:	2b00      	cmp	r3, #0
 801676c:	d0f0      	beq.n	8016750 <HAL_RCC_OscConfig+0xe4>
 801676e:	e014      	b.n	801679a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016770:	f7fe fc12 	bl	8014f98 <HAL_GetTick>
 8016774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016776:	e008      	b.n	801678a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016778:	f7fe fc0e 	bl	8014f98 <HAL_GetTick>
 801677c:	4602      	mov	r2, r0
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	2b64      	cmp	r3, #100	@ 0x64
 8016784:	d901      	bls.n	801678a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8016786:	2303      	movs	r3, #3
 8016788:	e1ec      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801678a:	4b53      	ldr	r3, [pc, #332]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016792:	2b00      	cmp	r3, #0
 8016794:	d1f0      	bne.n	8016778 <HAL_RCC_OscConfig+0x10c>
 8016796:	e000      	b.n	801679a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	f003 0302 	and.w	r3, r3, #2
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d063      	beq.n	801686e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80167a6:	4b4c      	ldr	r3, [pc, #304]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80167a8:	685b      	ldr	r3, [r3, #4]
 80167aa:	f003 030c 	and.w	r3, r3, #12
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d00b      	beq.n	80167ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80167b2:	4b49      	ldr	r3, [pc, #292]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80167b4:	685b      	ldr	r3, [r3, #4]
 80167b6:	f003 030c 	and.w	r3, r3, #12
 80167ba:	2b08      	cmp	r3, #8
 80167bc:	d11c      	bne.n	80167f8 <HAL_RCC_OscConfig+0x18c>
 80167be:	4b46      	ldr	r3, [pc, #280]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d116      	bne.n	80167f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80167ca:	4b43      	ldr	r3, [pc, #268]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	f003 0302 	and.w	r3, r3, #2
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d005      	beq.n	80167e2 <HAL_RCC_OscConfig+0x176>
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	691b      	ldr	r3, [r3, #16]
 80167da:	2b01      	cmp	r3, #1
 80167dc:	d001      	beq.n	80167e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80167de:	2301      	movs	r3, #1
 80167e0:	e1c0      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80167e2:	4b3d      	ldr	r3, [pc, #244]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	695b      	ldr	r3, [r3, #20]
 80167ee:	00db      	lsls	r3, r3, #3
 80167f0:	4939      	ldr	r1, [pc, #228]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80167f2:	4313      	orrs	r3, r2
 80167f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80167f6:	e03a      	b.n	801686e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	691b      	ldr	r3, [r3, #16]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d020      	beq.n	8016842 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016800:	4b36      	ldr	r3, [pc, #216]	@ (80168dc <HAL_RCC_OscConfig+0x270>)
 8016802:	2201      	movs	r2, #1
 8016804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016806:	f7fe fbc7 	bl	8014f98 <HAL_GetTick>
 801680a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801680c:	e008      	b.n	8016820 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801680e:	f7fe fbc3 	bl	8014f98 <HAL_GetTick>
 8016812:	4602      	mov	r2, r0
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	1ad3      	subs	r3, r2, r3
 8016818:	2b02      	cmp	r3, #2
 801681a:	d901      	bls.n	8016820 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 801681c:	2303      	movs	r3, #3
 801681e:	e1a1      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016820:	4b2d      	ldr	r3, [pc, #180]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	f003 0302 	and.w	r3, r3, #2
 8016828:	2b00      	cmp	r3, #0
 801682a:	d0f0      	beq.n	801680e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801682c:	4b2a      	ldr	r3, [pc, #168]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	695b      	ldr	r3, [r3, #20]
 8016838:	00db      	lsls	r3, r3, #3
 801683a:	4927      	ldr	r1, [pc, #156]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 801683c:	4313      	orrs	r3, r2
 801683e:	600b      	str	r3, [r1, #0]
 8016840:	e015      	b.n	801686e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016842:	4b26      	ldr	r3, [pc, #152]	@ (80168dc <HAL_RCC_OscConfig+0x270>)
 8016844:	2200      	movs	r2, #0
 8016846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016848:	f7fe fba6 	bl	8014f98 <HAL_GetTick>
 801684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801684e:	e008      	b.n	8016862 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016850:	f7fe fba2 	bl	8014f98 <HAL_GetTick>
 8016854:	4602      	mov	r2, r0
 8016856:	693b      	ldr	r3, [r7, #16]
 8016858:	1ad3      	subs	r3, r2, r3
 801685a:	2b02      	cmp	r3, #2
 801685c:	d901      	bls.n	8016862 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 801685e:	2303      	movs	r3, #3
 8016860:	e180      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016862:	4b1d      	ldr	r3, [pc, #116]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	f003 0302 	and.w	r3, r3, #2
 801686a:	2b00      	cmp	r3, #0
 801686c:	d1f0      	bne.n	8016850 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	f003 0308 	and.w	r3, r3, #8
 8016876:	2b00      	cmp	r3, #0
 8016878:	d03a      	beq.n	80168f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	699b      	ldr	r3, [r3, #24]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d019      	beq.n	80168b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016882:	4b17      	ldr	r3, [pc, #92]	@ (80168e0 <HAL_RCC_OscConfig+0x274>)
 8016884:	2201      	movs	r2, #1
 8016886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016888:	f7fe fb86 	bl	8014f98 <HAL_GetTick>
 801688c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801688e:	e008      	b.n	80168a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016890:	f7fe fb82 	bl	8014f98 <HAL_GetTick>
 8016894:	4602      	mov	r2, r0
 8016896:	693b      	ldr	r3, [r7, #16]
 8016898:	1ad3      	subs	r3, r2, r3
 801689a:	2b02      	cmp	r3, #2
 801689c:	d901      	bls.n	80168a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 801689e:	2303      	movs	r3, #3
 80168a0:	e160      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80168a2:	4b0d      	ldr	r3, [pc, #52]	@ (80168d8 <HAL_RCC_OscConfig+0x26c>)
 80168a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168a6:	f003 0302 	and.w	r3, r3, #2
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d0f0      	beq.n	8016890 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80168ae:	2001      	movs	r0, #1
 80168b0:	f000 face 	bl	8016e50 <RCC_Delay>
 80168b4:	e01c      	b.n	80168f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80168b6:	4b0a      	ldr	r3, [pc, #40]	@ (80168e0 <HAL_RCC_OscConfig+0x274>)
 80168b8:	2200      	movs	r2, #0
 80168ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80168bc:	f7fe fb6c 	bl	8014f98 <HAL_GetTick>
 80168c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80168c2:	e00f      	b.n	80168e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80168c4:	f7fe fb68 	bl	8014f98 <HAL_GetTick>
 80168c8:	4602      	mov	r2, r0
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	2b02      	cmp	r3, #2
 80168d0:	d908      	bls.n	80168e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80168d2:	2303      	movs	r3, #3
 80168d4:	e146      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
 80168d6:	bf00      	nop
 80168d8:	40021000 	.word	0x40021000
 80168dc:	42420000 	.word	0x42420000
 80168e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80168e4:	4b92      	ldr	r3, [pc, #584]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80168e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168e8:	f003 0302 	and.w	r3, r3, #2
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d1e9      	bne.n	80168c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	f003 0304 	and.w	r3, r3, #4
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f000 80a6 	beq.w	8016a4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80168fe:	2300      	movs	r3, #0
 8016900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016902:	4b8b      	ldr	r3, [pc, #556]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016904:	69db      	ldr	r3, [r3, #28]
 8016906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801690a:	2b00      	cmp	r3, #0
 801690c:	d10d      	bne.n	801692a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801690e:	4b88      	ldr	r3, [pc, #544]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016910:	69db      	ldr	r3, [r3, #28]
 8016912:	4a87      	ldr	r2, [pc, #540]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016918:	61d3      	str	r3, [r2, #28]
 801691a:	4b85      	ldr	r3, [pc, #532]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 801691c:	69db      	ldr	r3, [r3, #28]
 801691e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016922:	60bb      	str	r3, [r7, #8]
 8016924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016926:	2301      	movs	r3, #1
 8016928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801692a:	4b82      	ldr	r3, [pc, #520]	@ (8016b34 <HAL_RCC_OscConfig+0x4c8>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016932:	2b00      	cmp	r3, #0
 8016934:	d118      	bne.n	8016968 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016936:	4b7f      	ldr	r3, [pc, #508]	@ (8016b34 <HAL_RCC_OscConfig+0x4c8>)
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	4a7e      	ldr	r2, [pc, #504]	@ (8016b34 <HAL_RCC_OscConfig+0x4c8>)
 801693c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016942:	f7fe fb29 	bl	8014f98 <HAL_GetTick>
 8016946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016948:	e008      	b.n	801695c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801694a:	f7fe fb25 	bl	8014f98 <HAL_GetTick>
 801694e:	4602      	mov	r2, r0
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	1ad3      	subs	r3, r2, r3
 8016954:	2b64      	cmp	r3, #100	@ 0x64
 8016956:	d901      	bls.n	801695c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8016958:	2303      	movs	r3, #3
 801695a:	e103      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801695c:	4b75      	ldr	r3, [pc, #468]	@ (8016b34 <HAL_RCC_OscConfig+0x4c8>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016964:	2b00      	cmp	r3, #0
 8016966:	d0f0      	beq.n	801694a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	68db      	ldr	r3, [r3, #12]
 801696c:	2b01      	cmp	r3, #1
 801696e:	d106      	bne.n	801697e <HAL_RCC_OscConfig+0x312>
 8016970:	4b6f      	ldr	r3, [pc, #444]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016972:	6a1b      	ldr	r3, [r3, #32]
 8016974:	4a6e      	ldr	r2, [pc, #440]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016976:	f043 0301 	orr.w	r3, r3, #1
 801697a:	6213      	str	r3, [r2, #32]
 801697c:	e02d      	b.n	80169da <HAL_RCC_OscConfig+0x36e>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	68db      	ldr	r3, [r3, #12]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d10c      	bne.n	80169a0 <HAL_RCC_OscConfig+0x334>
 8016986:	4b6a      	ldr	r3, [pc, #424]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016988:	6a1b      	ldr	r3, [r3, #32]
 801698a:	4a69      	ldr	r2, [pc, #420]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 801698c:	f023 0301 	bic.w	r3, r3, #1
 8016990:	6213      	str	r3, [r2, #32]
 8016992:	4b67      	ldr	r3, [pc, #412]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016994:	6a1b      	ldr	r3, [r3, #32]
 8016996:	4a66      	ldr	r2, [pc, #408]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016998:	f023 0304 	bic.w	r3, r3, #4
 801699c:	6213      	str	r3, [r2, #32]
 801699e:	e01c      	b.n	80169da <HAL_RCC_OscConfig+0x36e>
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	68db      	ldr	r3, [r3, #12]
 80169a4:	2b05      	cmp	r3, #5
 80169a6:	d10c      	bne.n	80169c2 <HAL_RCC_OscConfig+0x356>
 80169a8:	4b61      	ldr	r3, [pc, #388]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169aa:	6a1b      	ldr	r3, [r3, #32]
 80169ac:	4a60      	ldr	r2, [pc, #384]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169ae:	f043 0304 	orr.w	r3, r3, #4
 80169b2:	6213      	str	r3, [r2, #32]
 80169b4:	4b5e      	ldr	r3, [pc, #376]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169b6:	6a1b      	ldr	r3, [r3, #32]
 80169b8:	4a5d      	ldr	r2, [pc, #372]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169ba:	f043 0301 	orr.w	r3, r3, #1
 80169be:	6213      	str	r3, [r2, #32]
 80169c0:	e00b      	b.n	80169da <HAL_RCC_OscConfig+0x36e>
 80169c2:	4b5b      	ldr	r3, [pc, #364]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169c4:	6a1b      	ldr	r3, [r3, #32]
 80169c6:	4a5a      	ldr	r2, [pc, #360]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169c8:	f023 0301 	bic.w	r3, r3, #1
 80169cc:	6213      	str	r3, [r2, #32]
 80169ce:	4b58      	ldr	r3, [pc, #352]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169d0:	6a1b      	ldr	r3, [r3, #32]
 80169d2:	4a57      	ldr	r2, [pc, #348]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 80169d4:	f023 0304 	bic.w	r3, r3, #4
 80169d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	68db      	ldr	r3, [r3, #12]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d015      	beq.n	8016a0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80169e2:	f7fe fad9 	bl	8014f98 <HAL_GetTick>
 80169e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80169e8:	e00a      	b.n	8016a00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80169ea:	f7fe fad5 	bl	8014f98 <HAL_GetTick>
 80169ee:	4602      	mov	r2, r0
 80169f0:	693b      	ldr	r3, [r7, #16]
 80169f2:	1ad3      	subs	r3, r2, r3
 80169f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80169f8:	4293      	cmp	r3, r2
 80169fa:	d901      	bls.n	8016a00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80169fc:	2303      	movs	r3, #3
 80169fe:	e0b1      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016a00:	4b4b      	ldr	r3, [pc, #300]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016a02:	6a1b      	ldr	r3, [r3, #32]
 8016a04:	f003 0302 	and.w	r3, r3, #2
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d0ee      	beq.n	80169ea <HAL_RCC_OscConfig+0x37e>
 8016a0c:	e014      	b.n	8016a38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016a0e:	f7fe fac3 	bl	8014f98 <HAL_GetTick>
 8016a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016a14:	e00a      	b.n	8016a2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016a16:	f7fe fabf 	bl	8014f98 <HAL_GetTick>
 8016a1a:	4602      	mov	r2, r0
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	1ad3      	subs	r3, r2, r3
 8016a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016a24:	4293      	cmp	r3, r2
 8016a26:	d901      	bls.n	8016a2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8016a28:	2303      	movs	r3, #3
 8016a2a:	e09b      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016a2c:	4b40      	ldr	r3, [pc, #256]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016a2e:	6a1b      	ldr	r3, [r3, #32]
 8016a30:	f003 0302 	and.w	r3, r3, #2
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d1ee      	bne.n	8016a16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8016a38:	7dfb      	ldrb	r3, [r7, #23]
 8016a3a:	2b01      	cmp	r3, #1
 8016a3c:	d105      	bne.n	8016a4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016a40:	69db      	ldr	r3, [r3, #28]
 8016a42:	4a3b      	ldr	r2, [pc, #236]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016a48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	69db      	ldr	r3, [r3, #28]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f000 8087 	beq.w	8016b62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016a54:	4b36      	ldr	r3, [pc, #216]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016a56:	685b      	ldr	r3, [r3, #4]
 8016a58:	f003 030c 	and.w	r3, r3, #12
 8016a5c:	2b08      	cmp	r3, #8
 8016a5e:	d061      	beq.n	8016b24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	69db      	ldr	r3, [r3, #28]
 8016a64:	2b02      	cmp	r3, #2
 8016a66:	d146      	bne.n	8016af6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016a68:	4b33      	ldr	r3, [pc, #204]	@ (8016b38 <HAL_RCC_OscConfig+0x4cc>)
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016a6e:	f7fe fa93 	bl	8014f98 <HAL_GetTick>
 8016a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8016a74:	e008      	b.n	8016a88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016a76:	f7fe fa8f 	bl	8014f98 <HAL_GetTick>
 8016a7a:	4602      	mov	r2, r0
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	1ad3      	subs	r3, r2, r3
 8016a80:	2b02      	cmp	r3, #2
 8016a82:	d901      	bls.n	8016a88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8016a84:	2303      	movs	r3, #3
 8016a86:	e06d      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8016a88:	4b29      	ldr	r3, [pc, #164]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d1f0      	bne.n	8016a76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	6a1b      	ldr	r3, [r3, #32]
 8016a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016a9c:	d108      	bne.n	8016ab0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8016a9e:	4b24      	ldr	r3, [pc, #144]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	689b      	ldr	r3, [r3, #8]
 8016aaa:	4921      	ldr	r1, [pc, #132]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016aac:	4313      	orrs	r3, r2
 8016aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8016ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6a19      	ldr	r1, [r3, #32]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ac0:	430b      	orrs	r3, r1
 8016ac2:	491b      	ldr	r1, [pc, #108]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016ac4:	4313      	orrs	r3, r2
 8016ac6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8016ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8016b38 <HAL_RCC_OscConfig+0x4cc>)
 8016aca:	2201      	movs	r2, #1
 8016acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016ace:	f7fe fa63 	bl	8014f98 <HAL_GetTick>
 8016ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8016ad4:	e008      	b.n	8016ae8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016ad6:	f7fe fa5f 	bl	8014f98 <HAL_GetTick>
 8016ada:	4602      	mov	r2, r0
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	1ad3      	subs	r3, r2, r3
 8016ae0:	2b02      	cmp	r3, #2
 8016ae2:	d901      	bls.n	8016ae8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8016ae4:	2303      	movs	r3, #3
 8016ae6:	e03d      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8016ae8:	4b11      	ldr	r3, [pc, #68]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d0f0      	beq.n	8016ad6 <HAL_RCC_OscConfig+0x46a>
 8016af4:	e035      	b.n	8016b62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016af6:	4b10      	ldr	r3, [pc, #64]	@ (8016b38 <HAL_RCC_OscConfig+0x4cc>)
 8016af8:	2200      	movs	r2, #0
 8016afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016afc:	f7fe fa4c 	bl	8014f98 <HAL_GetTick>
 8016b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8016b02:	e008      	b.n	8016b16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016b04:	f7fe fa48 	bl	8014f98 <HAL_GetTick>
 8016b08:	4602      	mov	r2, r0
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	1ad3      	subs	r3, r2, r3
 8016b0e:	2b02      	cmp	r3, #2
 8016b10:	d901      	bls.n	8016b16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8016b12:	2303      	movs	r3, #3
 8016b14:	e026      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8016b16:	4b06      	ldr	r3, [pc, #24]	@ (8016b30 <HAL_RCC_OscConfig+0x4c4>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d1f0      	bne.n	8016b04 <HAL_RCC_OscConfig+0x498>
 8016b22:	e01e      	b.n	8016b62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	69db      	ldr	r3, [r3, #28]
 8016b28:	2b01      	cmp	r3, #1
 8016b2a:	d107      	bne.n	8016b3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	e019      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
 8016b30:	40021000 	.word	0x40021000
 8016b34:	40007000 	.word	0x40007000
 8016b38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8016b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8016b6c <HAL_RCC_OscConfig+0x500>)
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	6a1b      	ldr	r3, [r3, #32]
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d106      	bne.n	8016b5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d001      	beq.n	8016b62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8016b5e:	2301      	movs	r3, #1
 8016b60:	e000      	b.n	8016b64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8016b62:	2300      	movs	r3, #0
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	3718      	adds	r7, #24
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}
 8016b6c:	40021000 	.word	0x40021000

08016b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b084      	sub	sp, #16
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d101      	bne.n	8016b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016b80:	2301      	movs	r3, #1
 8016b82:	e0d0      	b.n	8016d26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016b84:	4b6a      	ldr	r3, [pc, #424]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f003 0307 	and.w	r3, r3, #7
 8016b8c:	683a      	ldr	r2, [r7, #0]
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	d910      	bls.n	8016bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016b92:	4b67      	ldr	r3, [pc, #412]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	f023 0207 	bic.w	r2, r3, #7
 8016b9a:	4965      	ldr	r1, [pc, #404]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	4313      	orrs	r3, r2
 8016ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016ba2:	4b63      	ldr	r3, [pc, #396]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	f003 0307 	and.w	r3, r3, #7
 8016baa:	683a      	ldr	r2, [r7, #0]
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d001      	beq.n	8016bb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	e0b8      	b.n	8016d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	f003 0302 	and.w	r3, r3, #2
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d020      	beq.n	8016c02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	f003 0304 	and.w	r3, r3, #4
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d005      	beq.n	8016bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016bcc:	4b59      	ldr	r3, [pc, #356]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	4a58      	ldr	r2, [pc, #352]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016bd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8016bd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	f003 0308 	and.w	r3, r3, #8
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d005      	beq.n	8016bf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016be4:	4b53      	ldr	r3, [pc, #332]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016be6:	685b      	ldr	r3, [r3, #4]
 8016be8:	4a52      	ldr	r2, [pc, #328]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016bea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8016bee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016bf0:	4b50      	ldr	r3, [pc, #320]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	689b      	ldr	r3, [r3, #8]
 8016bfc:	494d      	ldr	r1, [pc, #308]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016bfe:	4313      	orrs	r3, r2
 8016c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	f003 0301 	and.w	r3, r3, #1
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d040      	beq.n	8016c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	685b      	ldr	r3, [r3, #4]
 8016c12:	2b01      	cmp	r3, #1
 8016c14:	d107      	bne.n	8016c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016c16:	4b47      	ldr	r3, [pc, #284]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d115      	bne.n	8016c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016c22:	2301      	movs	r3, #1
 8016c24:	e07f      	b.n	8016d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	2b02      	cmp	r3, #2
 8016c2c:	d107      	bne.n	8016c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016c2e:	4b41      	ldr	r3, [pc, #260]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d109      	bne.n	8016c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	e073      	b.n	8016d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	f003 0302 	and.w	r3, r3, #2
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d101      	bne.n	8016c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016c4a:	2301      	movs	r3, #1
 8016c4c:	e06b      	b.n	8016d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016c4e:	4b39      	ldr	r3, [pc, #228]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	f023 0203 	bic.w	r2, r3, #3
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	4936      	ldr	r1, [pc, #216]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016c5c:	4313      	orrs	r3, r2
 8016c5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016c60:	f7fe f99a 	bl	8014f98 <HAL_GetTick>
 8016c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016c66:	e00a      	b.n	8016c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016c68:	f7fe f996 	bl	8014f98 <HAL_GetTick>
 8016c6c:	4602      	mov	r2, r0
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	1ad3      	subs	r3, r2, r3
 8016c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016c76:	4293      	cmp	r3, r2
 8016c78:	d901      	bls.n	8016c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8016c7a:	2303      	movs	r3, #3
 8016c7c:	e053      	b.n	8016d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016c80:	685b      	ldr	r3, [r3, #4]
 8016c82:	f003 020c 	and.w	r2, r3, #12
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	009b      	lsls	r3, r3, #2
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d1eb      	bne.n	8016c68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016c90:	4b27      	ldr	r3, [pc, #156]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	f003 0307 	and.w	r3, r3, #7
 8016c98:	683a      	ldr	r2, [r7, #0]
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d210      	bcs.n	8016cc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016c9e:	4b24      	ldr	r3, [pc, #144]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	f023 0207 	bic.w	r2, r3, #7
 8016ca6:	4922      	ldr	r1, [pc, #136]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	4313      	orrs	r3, r2
 8016cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016cae:	4b20      	ldr	r3, [pc, #128]	@ (8016d30 <HAL_RCC_ClockConfig+0x1c0>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	f003 0307 	and.w	r3, r3, #7
 8016cb6:	683a      	ldr	r2, [r7, #0]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d001      	beq.n	8016cc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	e032      	b.n	8016d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	f003 0304 	and.w	r3, r3, #4
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d008      	beq.n	8016cde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016ccc:	4b19      	ldr	r3, [pc, #100]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	68db      	ldr	r3, [r3, #12]
 8016cd8:	4916      	ldr	r1, [pc, #88]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016cda:	4313      	orrs	r3, r2
 8016cdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	f003 0308 	and.w	r3, r3, #8
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d009      	beq.n	8016cfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8016cea:	4b12      	ldr	r3, [pc, #72]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	691b      	ldr	r3, [r3, #16]
 8016cf6:	00db      	lsls	r3, r3, #3
 8016cf8:	490e      	ldr	r1, [pc, #56]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016cfa:	4313      	orrs	r3, r2
 8016cfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8016cfe:	f000 f821 	bl	8016d44 <HAL_RCC_GetSysClockFreq>
 8016d02:	4602      	mov	r2, r0
 8016d04:	4b0b      	ldr	r3, [pc, #44]	@ (8016d34 <HAL_RCC_ClockConfig+0x1c4>)
 8016d06:	685b      	ldr	r3, [r3, #4]
 8016d08:	091b      	lsrs	r3, r3, #4
 8016d0a:	f003 030f 	and.w	r3, r3, #15
 8016d0e:	490a      	ldr	r1, [pc, #40]	@ (8016d38 <HAL_RCC_ClockConfig+0x1c8>)
 8016d10:	5ccb      	ldrb	r3, [r1, r3]
 8016d12:	fa22 f303 	lsr.w	r3, r2, r3
 8016d16:	4a09      	ldr	r2, [pc, #36]	@ (8016d3c <HAL_RCC_ClockConfig+0x1cc>)
 8016d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8016d1a:	4b09      	ldr	r3, [pc, #36]	@ (8016d40 <HAL_RCC_ClockConfig+0x1d0>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7fe f8f8 	bl	8014f14 <HAL_InitTick>

  return HAL_OK;
 8016d24:	2300      	movs	r3, #0
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3710      	adds	r7, #16
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}
 8016d2e:	bf00      	nop
 8016d30:	40022000 	.word	0x40022000
 8016d34:	40021000 	.word	0x40021000
 8016d38:	080170f4 	.word	0x080170f4
 8016d3c:	20000008 	.word	0x20000008
 8016d40:	2000000c 	.word	0x2000000c

08016d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016d44:	b480      	push	{r7}
 8016d46:	b087      	sub	sp, #28
 8016d48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	60fb      	str	r3, [r7, #12]
 8016d4e:	2300      	movs	r3, #0
 8016d50:	60bb      	str	r3, [r7, #8]
 8016d52:	2300      	movs	r3, #0
 8016d54:	617b      	str	r3, [r7, #20]
 8016d56:	2300      	movs	r3, #0
 8016d58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8016d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8016dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8016d60:	685b      	ldr	r3, [r3, #4]
 8016d62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	f003 030c 	and.w	r3, r3, #12
 8016d6a:	2b04      	cmp	r3, #4
 8016d6c:	d002      	beq.n	8016d74 <HAL_RCC_GetSysClockFreq+0x30>
 8016d6e:	2b08      	cmp	r3, #8
 8016d70:	d003      	beq.n	8016d7a <HAL_RCC_GetSysClockFreq+0x36>
 8016d72:	e027      	b.n	8016dc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8016d74:	4b19      	ldr	r3, [pc, #100]	@ (8016ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8016d76:	613b      	str	r3, [r7, #16]
      break;
 8016d78:	e027      	b.n	8016dca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	0c9b      	lsrs	r3, r3, #18
 8016d7e:	f003 030f 	and.w	r3, r3, #15
 8016d82:	4a17      	ldr	r2, [pc, #92]	@ (8016de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8016d84:	5cd3      	ldrb	r3, [r2, r3]
 8016d86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d010      	beq.n	8016db4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8016d92:	4b11      	ldr	r3, [pc, #68]	@ (8016dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8016d94:	685b      	ldr	r3, [r3, #4]
 8016d96:	0c5b      	lsrs	r3, r3, #17
 8016d98:	f003 0301 	and.w	r3, r3, #1
 8016d9c:	4a11      	ldr	r2, [pc, #68]	@ (8016de4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8016d9e:	5cd3      	ldrb	r3, [r2, r3]
 8016da0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	4a0d      	ldr	r2, [pc, #52]	@ (8016ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8016da6:	fb03 f202 	mul.w	r2, r3, r2
 8016daa:	68bb      	ldr	r3, [r7, #8]
 8016dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8016db0:	617b      	str	r3, [r7, #20]
 8016db2:	e004      	b.n	8016dbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	4a0c      	ldr	r2, [pc, #48]	@ (8016de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8016db8:	fb02 f303 	mul.w	r3, r2, r3
 8016dbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	613b      	str	r3, [r7, #16]
      break;
 8016dc2:	e002      	b.n	8016dca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8016dc4:	4b05      	ldr	r3, [pc, #20]	@ (8016ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8016dc6:	613b      	str	r3, [r7, #16]
      break;
 8016dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016dca:	693b      	ldr	r3, [r7, #16]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	371c      	adds	r7, #28
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bc80      	pop	{r7}
 8016dd4:	4770      	bx	lr
 8016dd6:	bf00      	nop
 8016dd8:	40021000 	.word	0x40021000
 8016ddc:	007a1200 	.word	0x007a1200
 8016de0:	0801710c 	.word	0x0801710c
 8016de4:	0801711c 	.word	0x0801711c
 8016de8:	003d0900 	.word	0x003d0900

08016dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016dec:	b480      	push	{r7}
 8016dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016df0:	4b02      	ldr	r3, [pc, #8]	@ (8016dfc <HAL_RCC_GetHCLKFreq+0x10>)
 8016df2:	681b      	ldr	r3, [r3, #0]
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bc80      	pop	{r7}
 8016dfa:	4770      	bx	lr
 8016dfc:	20000008 	.word	0x20000008

08016e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016e04:	f7ff fff2 	bl	8016dec <HAL_RCC_GetHCLKFreq>
 8016e08:	4602      	mov	r2, r0
 8016e0a:	4b05      	ldr	r3, [pc, #20]	@ (8016e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8016e0c:	685b      	ldr	r3, [r3, #4]
 8016e0e:	0a1b      	lsrs	r3, r3, #8
 8016e10:	f003 0307 	and.w	r3, r3, #7
 8016e14:	4903      	ldr	r1, [pc, #12]	@ (8016e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8016e16:	5ccb      	ldrb	r3, [r1, r3]
 8016e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	40021000 	.word	0x40021000
 8016e24:	08017104 	.word	0x08017104

08016e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8016e2c:	f7ff ffde 	bl	8016dec <HAL_RCC_GetHCLKFreq>
 8016e30:	4602      	mov	r2, r0
 8016e32:	4b05      	ldr	r3, [pc, #20]	@ (8016e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8016e34:	685b      	ldr	r3, [r3, #4]
 8016e36:	0adb      	lsrs	r3, r3, #11
 8016e38:	f003 0307 	and.w	r3, r3, #7
 8016e3c:	4903      	ldr	r1, [pc, #12]	@ (8016e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8016e3e:	5ccb      	ldrb	r3, [r1, r3]
 8016e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	bd80      	pop	{r7, pc}
 8016e48:	40021000 	.word	0x40021000
 8016e4c:	08017104 	.word	0x08017104

08016e50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8016e50:	b480      	push	{r7}
 8016e52:	b085      	sub	sp, #20
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8016e58:	4b0a      	ldr	r3, [pc, #40]	@ (8016e84 <RCC_Delay+0x34>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8016e88 <RCC_Delay+0x38>)
 8016e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8016e62:	0a5b      	lsrs	r3, r3, #9
 8016e64:	687a      	ldr	r2, [r7, #4]
 8016e66:	fb02 f303 	mul.w	r3, r2, r3
 8016e6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8016e6c:	bf00      	nop
  }
  while (Delay --);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	1e5a      	subs	r2, r3, #1
 8016e72:	60fa      	str	r2, [r7, #12]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d1f9      	bne.n	8016e6c <RCC_Delay+0x1c>
}
 8016e78:	bf00      	nop
 8016e7a:	bf00      	nop
 8016e7c:	3714      	adds	r7, #20
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bc80      	pop	{r7}
 8016e82:	4770      	bx	lr
 8016e84:	20000008 	.word	0x20000008
 8016e88:	10624dd3 	.word	0x10624dd3

08016e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d101      	bne.n	8016e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	e042      	b.n	8016f24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d106      	bne.n	8016eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	2200      	movs	r2, #0
 8016eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f7fd ffb4 	bl	8014e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	2224      	movs	r2, #36	@ 0x24
 8016ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	68da      	ldr	r2, [r3, #12]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8016ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f000 f82b 	bl	8016f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	691a      	ldr	r2, [r3, #16]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8016ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	695a      	ldr	r2, [r3, #20]
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8016ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	68da      	ldr	r2, [r3, #12]
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8016f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2200      	movs	r2, #0
 8016f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2220      	movs	r2, #32
 8016f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2220      	movs	r2, #32
 8016f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8016f22:	2300      	movs	r3, #0
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3708      	adds	r7, #8
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b084      	sub	sp, #16
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	691b      	ldr	r3, [r3, #16]
 8016f3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	68da      	ldr	r2, [r3, #12]
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	430a      	orrs	r2, r1
 8016f48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	689a      	ldr	r2, [r3, #8]
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	691b      	ldr	r3, [r3, #16]
 8016f52:	431a      	orrs	r2, r3
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	695b      	ldr	r3, [r3, #20]
 8016f58:	4313      	orrs	r3, r2
 8016f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	68db      	ldr	r3, [r3, #12]
 8016f62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8016f66:	f023 030c 	bic.w	r3, r3, #12
 8016f6a:	687a      	ldr	r2, [r7, #4]
 8016f6c:	6812      	ldr	r2, [r2, #0]
 8016f6e:	68b9      	ldr	r1, [r7, #8]
 8016f70:	430b      	orrs	r3, r1
 8016f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	695b      	ldr	r3, [r3, #20]
 8016f7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	699a      	ldr	r2, [r3, #24]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	430a      	orrs	r2, r1
 8016f88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8017040 <UART_SetConfig+0x114>)
 8016f90:	4293      	cmp	r3, r2
 8016f92:	d103      	bne.n	8016f9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8016f94:	f7ff ff48 	bl	8016e28 <HAL_RCC_GetPCLK2Freq>
 8016f98:	60f8      	str	r0, [r7, #12]
 8016f9a:	e002      	b.n	8016fa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8016f9c:	f7ff ff30 	bl	8016e00 <HAL_RCC_GetPCLK1Freq>
 8016fa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016fa2:	68fa      	ldr	r2, [r7, #12]
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	4413      	add	r3, r2
 8016faa:	009a      	lsls	r2, r3, #2
 8016fac:	441a      	add	r2, r3
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	009b      	lsls	r3, r3, #2
 8016fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8016fb8:	4a22      	ldr	r2, [pc, #136]	@ (8017044 <UART_SetConfig+0x118>)
 8016fba:	fba2 2303 	umull	r2, r3, r2, r3
 8016fbe:	095b      	lsrs	r3, r3, #5
 8016fc0:	0119      	lsls	r1, r3, #4
 8016fc2:	68fa      	ldr	r2, [r7, #12]
 8016fc4:	4613      	mov	r3, r2
 8016fc6:	009b      	lsls	r3, r3, #2
 8016fc8:	4413      	add	r3, r2
 8016fca:	009a      	lsls	r2, r3, #2
 8016fcc:	441a      	add	r2, r3
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	685b      	ldr	r3, [r3, #4]
 8016fd2:	009b      	lsls	r3, r3, #2
 8016fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8016fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8017044 <UART_SetConfig+0x118>)
 8016fda:	fba3 0302 	umull	r0, r3, r3, r2
 8016fde:	095b      	lsrs	r3, r3, #5
 8016fe0:	2064      	movs	r0, #100	@ 0x64
 8016fe2:	fb00 f303 	mul.w	r3, r0, r3
 8016fe6:	1ad3      	subs	r3, r2, r3
 8016fe8:	011b      	lsls	r3, r3, #4
 8016fea:	3332      	adds	r3, #50	@ 0x32
 8016fec:	4a15      	ldr	r2, [pc, #84]	@ (8017044 <UART_SetConfig+0x118>)
 8016fee:	fba2 2303 	umull	r2, r3, r2, r3
 8016ff2:	095b      	lsrs	r3, r3, #5
 8016ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016ff8:	4419      	add	r1, r3
 8016ffa:	68fa      	ldr	r2, [r7, #12]
 8016ffc:	4613      	mov	r3, r2
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	4413      	add	r3, r2
 8017002:	009a      	lsls	r2, r3, #2
 8017004:	441a      	add	r2, r3
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	685b      	ldr	r3, [r3, #4]
 801700a:	009b      	lsls	r3, r3, #2
 801700c:	fbb2 f2f3 	udiv	r2, r2, r3
 8017010:	4b0c      	ldr	r3, [pc, #48]	@ (8017044 <UART_SetConfig+0x118>)
 8017012:	fba3 0302 	umull	r0, r3, r3, r2
 8017016:	095b      	lsrs	r3, r3, #5
 8017018:	2064      	movs	r0, #100	@ 0x64
 801701a:	fb00 f303 	mul.w	r3, r0, r3
 801701e:	1ad3      	subs	r3, r2, r3
 8017020:	011b      	lsls	r3, r3, #4
 8017022:	3332      	adds	r3, #50	@ 0x32
 8017024:	4a07      	ldr	r2, [pc, #28]	@ (8017044 <UART_SetConfig+0x118>)
 8017026:	fba2 2303 	umull	r2, r3, r2, r3
 801702a:	095b      	lsrs	r3, r3, #5
 801702c:	f003 020f 	and.w	r2, r3, #15
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	440a      	add	r2, r1
 8017036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8017038:	bf00      	nop
 801703a:	3710      	adds	r7, #16
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}
 8017040:	40013800 	.word	0x40013800
 8017044:	51eb851f 	.word	0x51eb851f

08017048 <memcmp>:
 8017048:	b510      	push	{r4, lr}
 801704a:	3901      	subs	r1, #1
 801704c:	4402      	add	r2, r0
 801704e:	4290      	cmp	r0, r2
 8017050:	d101      	bne.n	8017056 <memcmp+0xe>
 8017052:	2000      	movs	r0, #0
 8017054:	e005      	b.n	8017062 <memcmp+0x1a>
 8017056:	7803      	ldrb	r3, [r0, #0]
 8017058:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801705c:	42a3      	cmp	r3, r4
 801705e:	d001      	beq.n	8017064 <memcmp+0x1c>
 8017060:	1b18      	subs	r0, r3, r4
 8017062:	bd10      	pop	{r4, pc}
 8017064:	3001      	adds	r0, #1
 8017066:	e7f2      	b.n	801704e <memcmp+0x6>

08017068 <memset>:
 8017068:	4603      	mov	r3, r0
 801706a:	4402      	add	r2, r0
 801706c:	4293      	cmp	r3, r2
 801706e:	d100      	bne.n	8017072 <memset+0xa>
 8017070:	4770      	bx	lr
 8017072:	f803 1b01 	strb.w	r1, [r3], #1
 8017076:	e7f9      	b.n	801706c <memset+0x4>

08017078 <__libc_init_array>:
 8017078:	b570      	push	{r4, r5, r6, lr}
 801707a:	2600      	movs	r6, #0
 801707c:	4d0c      	ldr	r5, [pc, #48]	@ (80170b0 <__libc_init_array+0x38>)
 801707e:	4c0d      	ldr	r4, [pc, #52]	@ (80170b4 <__libc_init_array+0x3c>)
 8017080:	1b64      	subs	r4, r4, r5
 8017082:	10a4      	asrs	r4, r4, #2
 8017084:	42a6      	cmp	r6, r4
 8017086:	d109      	bne.n	801709c <__libc_init_array+0x24>
 8017088:	f000 f828 	bl	80170dc <_init>
 801708c:	2600      	movs	r6, #0
 801708e:	4d0a      	ldr	r5, [pc, #40]	@ (80170b8 <__libc_init_array+0x40>)
 8017090:	4c0a      	ldr	r4, [pc, #40]	@ (80170bc <__libc_init_array+0x44>)
 8017092:	1b64      	subs	r4, r4, r5
 8017094:	10a4      	asrs	r4, r4, #2
 8017096:	42a6      	cmp	r6, r4
 8017098:	d105      	bne.n	80170a6 <__libc_init_array+0x2e>
 801709a:	bd70      	pop	{r4, r5, r6, pc}
 801709c:	f855 3b04 	ldr.w	r3, [r5], #4
 80170a0:	4798      	blx	r3
 80170a2:	3601      	adds	r6, #1
 80170a4:	e7ee      	b.n	8017084 <__libc_init_array+0xc>
 80170a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80170aa:	4798      	blx	r3
 80170ac:	3601      	adds	r6, #1
 80170ae:	e7f2      	b.n	8017096 <__libc_init_array+0x1e>
 80170b0:	08017120 	.word	0x08017120
 80170b4:	08017120 	.word	0x08017120
 80170b8:	08017120 	.word	0x08017120
 80170bc:	08017124 	.word	0x08017124

080170c0 <memcpy>:
 80170c0:	440a      	add	r2, r1
 80170c2:	4291      	cmp	r1, r2
 80170c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80170c8:	d100      	bne.n	80170cc <memcpy+0xc>
 80170ca:	4770      	bx	lr
 80170cc:	b510      	push	{r4, lr}
 80170ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170d2:	4291      	cmp	r1, r2
 80170d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170d8:	d1f9      	bne.n	80170ce <memcpy+0xe>
 80170da:	bd10      	pop	{r4, pc}

080170dc <_init>:
 80170dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170de:	bf00      	nop
 80170e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170e2:	bc08      	pop	{r3}
 80170e4:	469e      	mov	lr, r3
 80170e6:	4770      	bx	lr

080170e8 <_fini>:
 80170e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ea:	bf00      	nop
 80170ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ee:	bc08      	pop	{r3}
 80170f0:	469e      	mov	lr, r3
 80170f2:	4770      	bx	lr

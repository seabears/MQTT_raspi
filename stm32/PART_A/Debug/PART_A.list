
PART_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003298  0800810c  0800810c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b3a4  0800b3a4  000043a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b418  0800b418  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  0800b418  0800b418  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b418  0800b418  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b418  0800b418  00004418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b41c  0800b41c  0000441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800b420  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004910  20000018  0800b434  00005018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004928  0800b434  00005928  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a741  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021eb  00000000  00000000  0000f77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00011970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  00012358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017953  00000000  00000000  00012ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf0d  00000000  00000000  0002a425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853e6  00000000  00000000  00036332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000bb75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bde00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	@ (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	@ (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000018 	.word	0x20000018
 8008128:	00000000 	.word	0x00000000
 800812c:	0800b38c 	.word	0x0800b38c

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	@ (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	@ (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	2000001c 	.word	0x2000001c
 8008148:	0800b38c 	.word	0x0800b38c

0800814c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  __HAL_RCC_CAN1_CLK_ENABLE();
 8008152:	4b1f      	ldr	r3, [pc, #124]	@ (80081d0 <MX_CAN_Init+0x84>)
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	4a1e      	ldr	r2, [pc, #120]	@ (80081d0 <MX_CAN_Init+0x84>)
 8008158:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800815c:	61d3      	str	r3, [r2, #28]
 800815e:	4b1c      	ldr	r3, [pc, #112]	@ (80081d0 <MX_CAN_Init+0x84>)
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008166:	607b      	str	r3, [r7, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800816a:	4b1a      	ldr	r3, [pc, #104]	@ (80081d4 <MX_CAN_Init+0x88>)
 800816c:	4a1a      	ldr	r2, [pc, #104]	@ (80081d8 <MX_CAN_Init+0x8c>)
 800816e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8008170:	4b18      	ldr	r3, [pc, #96]	@ (80081d4 <MX_CAN_Init+0x88>)
 8008172:	2204      	movs	r2, #4
 8008174:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008176:	4b17      	ldr	r3, [pc, #92]	@ (80081d4 <MX_CAN_Init+0x88>)
 8008178:	2200      	movs	r2, #0
 800817a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800817c:	4b15      	ldr	r3, [pc, #84]	@ (80081d4 <MX_CAN_Init+0x88>)
 800817e:	2200      	movs	r2, #0
 8008180:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8008182:	4b14      	ldr	r3, [pc, #80]	@ (80081d4 <MX_CAN_Init+0x88>)
 8008184:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8008188:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800818a:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <MX_CAN_Init+0x88>)
 800818c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008190:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008192:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <MX_CAN_Init+0x88>)
 8008194:	2200      	movs	r2, #0
 8008196:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008198:	4b0e      	ldr	r3, [pc, #56]	@ (80081d4 <MX_CAN_Init+0x88>)
 800819a:	2200      	movs	r2, #0
 800819c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <MX_CAN_Init+0x88>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80081a4:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <MX_CAN_Init+0x88>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80081aa:	4b0a      	ldr	r3, [pc, #40]	@ (80081d4 <MX_CAN_Init+0x88>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80081b0:	4b08      	ldr	r3, [pc, #32]	@ (80081d4 <MX_CAN_Init+0x88>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80081b6:	4807      	ldr	r0, [pc, #28]	@ (80081d4 <MX_CAN_Init+0x88>)
 80081b8:	f000 ff2e 	bl	8009018 <HAL_CAN_Init>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <MX_CAN_Init+0x7a>
  {
    Error_Handler();
 80081c2:	f000 fd85 	bl	8008cd0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40021000 	.word	0x40021000
 80081d4:	20000034 	.word	0x20000034
 80081d8:	40006400 	.word	0x40006400

080081dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e4:	f107 0310 	add.w	r3, r7, #16
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	609a      	str	r2, [r3, #8]
 80081f0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a24      	ldr	r2, [pc, #144]	@ (8008288 <HAL_CAN_MspInit+0xac>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d141      	bne.n	8008280 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80081fc:	4b23      	ldr	r3, [pc, #140]	@ (800828c <HAL_CAN_MspInit+0xb0>)
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	4a22      	ldr	r2, [pc, #136]	@ (800828c <HAL_CAN_MspInit+0xb0>)
 8008202:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008206:	61d3      	str	r3, [r2, #28]
 8008208:	4b20      	ldr	r3, [pc, #128]	@ (800828c <HAL_CAN_MspInit+0xb0>)
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008214:	4b1d      	ldr	r3, [pc, #116]	@ (800828c <HAL_CAN_MspInit+0xb0>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	4a1c      	ldr	r2, [pc, #112]	@ (800828c <HAL_CAN_MspInit+0xb0>)
 800821a:	f043 0304 	orr.w	r3, r3, #4
 800821e:	6193      	str	r3, [r2, #24]
 8008220:	4b1a      	ldr	r3, [pc, #104]	@ (800828c <HAL_CAN_MspInit+0xb0>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800822c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823a:	f107 0310 	add.w	r3, r7, #16
 800823e:	4619      	mov	r1, r3
 8008240:	4813      	ldr	r0, [pc, #76]	@ (8008290 <HAL_CAN_MspInit+0xb4>)
 8008242:	f002 f85b 	bl	800a2fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800824a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824c:	2302      	movs	r3, #2
 800824e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008250:	2303      	movs	r3, #3
 8008252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008254:	f107 0310 	add.w	r3, r7, #16
 8008258:	4619      	mov	r1, r3
 800825a:	480d      	ldr	r0, [pc, #52]	@ (8008290 <HAL_CAN_MspInit+0xb4>)
 800825c:	f002 f84e 	bl	800a2fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008260:	2200      	movs	r2, #0
 8008262:	2100      	movs	r1, #0
 8008264:	2014      	movs	r0, #20
 8008266:	f001 fe12 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800826a:	2014      	movs	r0, #20
 800826c:	f001 fe2b 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	2015      	movs	r0, #21
 8008276:	f001 fe0a 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800827a:	2015      	movs	r0, #21
 800827c:	f001 fe23 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8008280:	bf00      	nop
 8008282:	3720      	adds	r7, #32
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40006400 	.word	0x40006400
 800828c:	40021000 	.word	0x40021000
 8008290:	40010800 	.word	0x40010800

08008294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	609a      	str	r2, [r3, #8]
 80082a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082ae:	f043 0310 	orr.w	r3, r3, #16
 80082b2:	6193      	str	r3, [r2, #24]
 80082b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f003 0310 	and.w	r3, r3, #16
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082c0:	4b27      	ldr	r3, [pc, #156]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	4a26      	ldr	r2, [pc, #152]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082c6:	f043 0320 	orr.w	r3, r3, #32
 80082ca:	6193      	str	r3, [r2, #24]
 80082cc:	4b24      	ldr	r3, [pc, #144]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	60bb      	str	r3, [r7, #8]
 80082d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082d8:	4b21      	ldr	r3, [pc, #132]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	4a20      	ldr	r2, [pc, #128]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082de:	f043 0304 	orr.w	r3, r3, #4
 80082e2:	6193      	str	r3, [r2, #24]
 80082e4:	4b1e      	ldr	r3, [pc, #120]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082f6:	f043 0308 	orr.w	r3, r3, #8
 80082fa:	6193      	str	r3, [r2, #24]
 80082fc:	4b18      	ldr	r3, [pc, #96]	@ (8008360 <MX_GPIO_Init+0xcc>)
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	603b      	str	r3, [r7, #0]
 8008306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008308:	2200      	movs	r2, #0
 800830a:	2120      	movs	r1, #32
 800830c:	4815      	ldr	r0, [pc, #84]	@ (8008364 <MX_GPIO_Init+0xd0>)
 800830e:	f002 f979 	bl	800a604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008312:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008318:	4b13      	ldr	r3, [pc, #76]	@ (8008368 <MX_GPIO_Init+0xd4>)
 800831a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800831c:	2300      	movs	r3, #0
 800831e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008320:	f107 0310 	add.w	r3, r7, #16
 8008324:	4619      	mov	r1, r3
 8008326:	4811      	ldr	r0, [pc, #68]	@ (800836c <MX_GPIO_Init+0xd8>)
 8008328:	f001 ffe8 	bl	800a2fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800832c:	2320      	movs	r3, #32
 800832e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008330:	2301      	movs	r3, #1
 8008332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008338:	2302      	movs	r3, #2
 800833a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	4619      	mov	r1, r3
 8008342:	4808      	ldr	r0, [pc, #32]	@ (8008364 <MX_GPIO_Init+0xd0>)
 8008344:	f001 ffda 	bl	800a2fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	2028      	movs	r0, #40	@ 0x28
 800834e:	f001 fd9e 	bl	8009e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008352:	2028      	movs	r0, #40	@ 0x28
 8008354:	f001 fdb7 	bl	8009ec6 <HAL_NVIC_EnableIRQ>

}
 8008358:	bf00      	nop
 800835a:	3720      	adds	r7, #32
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40021000 	.word	0x40021000
 8008364:	40010800 	.word	0x40010800
 8008368:	10110000 	.word	0x10110000
 800836c:	40011000 	.word	0x40011000

08008370 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008374:	f3bf 8f4f 	dsb	sy
}
 8008378:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800837a:	4b06      	ldr	r3, [pc, #24]	@ (8008394 <__NVIC_SystemReset+0x24>)
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008382:	4904      	ldr	r1, [pc, #16]	@ (8008394 <__NVIC_SystemReset+0x24>)
 8008384:	4b04      	ldr	r3, [pc, #16]	@ (8008398 <__NVIC_SystemReset+0x28>)
 8008386:	4313      	orrs	r3, r2
 8008388:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800838a:	f3bf 8f4f 	dsb	sy
}
 800838e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <__NVIC_SystemReset+0x20>
 8008394:	e000ed00 	.word	0xe000ed00
 8008398:	05fa0004 	.word	0x05fa0004

0800839c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08c      	sub	sp, #48	@ 0x30
 80083a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80083a2:	f000 fdb3 	bl	8008f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80083a6:	f000 f893 	bl	80084d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  NVIC_Config();
 80083aa:	f000 f971 	bl	8008690 <NVIC_Config>

  HAL_PWR_EnableBkUpAccess();
 80083ae:	f002 f963 	bl	800a678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BKP_CLK_ENABLE();
 80083b2:	4b40      	ldr	r3, [pc, #256]	@ (80084b4 <main+0x118>)
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	4a3f      	ldr	r2, [pc, #252]	@ (80084b4 <main+0x118>)
 80083b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80083bc:	61d3      	str	r3, [r2, #28]
 80083be:	4b3d      	ldr	r3, [pc, #244]	@ (80084b4 <main+0x118>)
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083c6:	607b      	str	r3, [r7, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80083ca:	f7ff ff63 	bl	8008294 <MX_GPIO_Init>
  MX_CAN_Init();
 80083ce:	f7ff febd 	bl	800814c <MX_CAN_Init>
  MX_USART2_UART_Init();
 80083d2:	f000 fd0d 	bl	8008df0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK){
 80083d6:	4838      	ldr	r0, [pc, #224]	@ (80084b8 <main+0x11c>)
 80083d8:	f000 ffe2 	bl	80093a0 <HAL_CAN_Start>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <main+0x4a>
	  Error_Handler();
 80083e2:	f000 fc75 	bl	8008cd0 <Error_Handler>
  }

  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80083e6:	2301      	movs	r3, #1
 80083e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  canFilterConfig.FilterBank = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterIdHigh = 0x0000;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow = 0x0000;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh = 0x0000;
 80083fa:	2300      	movs	r3, #0
 80083fc:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8008402:	2300      	movs	r3, #0
 8008404:	623b      	str	r3, [r7, #32]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8008406:	2301      	movs	r3, #1
 8008408:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK)
 800840a:	f107 0308 	add.w	r3, r7, #8
 800840e:	4619      	mov	r1, r3
 8008410:	4829      	ldr	r0, [pc, #164]	@ (80084b8 <main+0x11c>)
 8008412:	f000 fefc 	bl	800920e <HAL_CAN_ConfigFilter>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <main+0x84>
  {
	  Error_Handler();
 800841c:	f000 fc58 	bl	8008cd0 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8008420:	2102      	movs	r1, #2
 8008422:	4825      	ldr	r0, [pc, #148]	@ (80084b8 <main+0x11c>)
 8008424:	f001 fa13 	bl	800984e <HAL_CAN_ActivateNotification>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <main+0x96>
	  Error_Handler();
 800842e:	f000 fc4f 	bl	8008cd0 <Error_Handler>
  }

  SendFirmwareStartedMessage();
 8008432:	f000 f8fb 	bl	800862c <SendFirmwareStartedMessage>
  TxHeader.DLC = 8;
 8008436:	4b21      	ldr	r3, [pc, #132]	@ (80084bc <main+0x120>)
 8008438:	2208      	movs	r2, #8
 800843a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800843c:	4b1f      	ldr	r3, [pc, #124]	@ (80084bc <main+0x120>)
 800843e:	2200      	movs	r2, #0
 8008440:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8008442:	4b1e      	ldr	r3, [pc, #120]	@ (80084bc <main+0x120>)
 8008444:	2200      	movs	r2, #0
 8008446:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x80;
 8008448:	4b1c      	ldr	r3, [pc, #112]	@ (80084bc <main+0x120>)
 800844a:	2280      	movs	r2, #128	@ 0x80
 800844c:	601a      	str	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	if (fwUpdateState == FW_UPDATE_IDLE){
 800844e:	4b1c      	ldr	r3, [pc, #112]	@ (80084c0 <main+0x124>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d12b      	bne.n	80084ae <main+0x112>
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8008456:	4b1b      	ldr	r3, [pc, #108]	@ (80084c4 <main+0x128>)
 8008458:	4a1b      	ldr	r2, [pc, #108]	@ (80084c8 <main+0x12c>)
 800845a:	4918      	ldr	r1, [pc, #96]	@ (80084bc <main+0x120>)
 800845c:	4816      	ldr	r0, [pc, #88]	@ (80084b8 <main+0x11c>)
 800845e:	f000 ffe3 	bl	8009428 <HAL_CAN_AddTxMessage>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <main+0xd0>
			Error_Handler();
 8008468:	f000 fc32 	bl	8008cd0 <Error_Handler>
		}

		TxData[0] += 0x11;
 800846c:	4b16      	ldr	r3, [pc, #88]	@ (80084c8 <main+0x12c>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	3311      	adds	r3, #17
 8008472:	b2da      	uxtb	r2, r3
 8008474:	4b14      	ldr	r3, [pc, #80]	@ (80084c8 <main+0x12c>)
 8008476:	701a      	strb	r2, [r3, #0]
		TxData[1] += 0x12;
 8008478:	4b13      	ldr	r3, [pc, #76]	@ (80084c8 <main+0x12c>)
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	3312      	adds	r3, #18
 800847e:	b2da      	uxtb	r2, r3
 8008480:	4b11      	ldr	r3, [pc, #68]	@ (80084c8 <main+0x12c>)
 8008482:	705a      	strb	r2, [r3, #1]
		TxData[2] += 0x13;
 8008484:	4b10      	ldr	r3, [pc, #64]	@ (80084c8 <main+0x12c>)
 8008486:	789b      	ldrb	r3, [r3, #2]
 8008488:	3313      	adds	r3, #19
 800848a:	b2da      	uxtb	r2, r3
 800848c:	4b0e      	ldr	r3, [pc, #56]	@ (80084c8 <main+0x12c>)
 800848e:	709a      	strb	r2, [r3, #2]
		HAL_Delay(100);
 8008490:	2064      	movs	r0, #100	@ 0x64
 8008492:	f000 fd9d 	bl	8008fd0 <HAL_Delay>

		LD2Counter++;
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <main+0x130>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	3301      	adds	r3, #1
 800849c:	b2da      	uxtb	r2, r3
 800849e:	4b0b      	ldr	r3, [pc, #44]	@ (80084cc <main+0x130>)
 80084a0:	701a      	strb	r2, [r3, #0]
		if (LD2Counter > 30)
 80084a2:	4b0a      	ldr	r3, [pc, #40]	@ (80084cc <main+0x130>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	2b1e      	cmp	r3, #30
 80084a8:	d901      	bls.n	80084ae <main+0x112>
			LD2Flip();
 80084aa:	f000 f877 	bl	800859c <LD2Flip>
//
//	}



	FirmwareUpdateStateMachine();
 80084ae:	f000 fb0f 	bl	8008ad0 <FirmwareUpdateStateMachine>
	if (fwUpdateState == FW_UPDATE_IDLE){
 80084b2:	e7cc      	b.n	800844e <main+0xb2>
 80084b4:	40021000 	.word	0x40021000
 80084b8:	20000034 	.word	0x20000034
 80084bc:	2000005c 	.word	0x2000005c
 80084c0:	20000080 	.word	0x20000080
 80084c4:	2000007c 	.word	0x2000007c
 80084c8:	20000074 	.word	0x20000074
 80084cc:	20000090 	.word	0x20000090

080084d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b092      	sub	sp, #72	@ 0x48
 80084d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084d6:	f107 031c 	add.w	r3, r7, #28
 80084da:	2228      	movs	r2, #40	@ 0x28
 80084dc:	2100      	movs	r1, #0
 80084de:	4618      	mov	r0, r3
 80084e0:	f002 ff1a 	bl	800b318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084e4:	f107 0308 	add.w	r3, r7, #8
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	605a      	str	r2, [r3, #4]
 80084ee:	609a      	str	r2, [r3, #8]
 80084f0:	60da      	str	r2, [r3, #12]
 80084f2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80084f4:	2301      	movs	r3, #1
 80084f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80084fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80084fe:	2300      	movs	r3, #0
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008502:	2301      	movs	r3, #1
 8008504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008506:	2302      	movs	r3, #2
 8008508:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800850a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8008510:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8008514:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008516:	f107 031c 	add.w	r3, r7, #28
 800851a:	4618      	mov	r0, r3
 800851c:	f002 f8b8 	bl	800a690 <HAL_RCC_OscConfig>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8008526:	f000 fbd3 	bl	8008cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800852a:	230f      	movs	r3, #15
 800852c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800852e:	2302      	movs	r3, #2
 8008530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8008536:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800853a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800853c:	2300      	movs	r3, #0
 800853e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008540:	f107 0308 	add.w	r3, r7, #8
 8008544:	2102      	movs	r1, #2
 8008546:	4618      	mov	r0, r3
 8008548:	f002 fb24 	bl	800ab94 <HAL_RCC_ClockConfig>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8008552:	f000 fbbd 	bl	8008cd0 <Error_Handler>
  }

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008556:	4b0f      	ldr	r3, [pc, #60]	@ (8008594 <SystemClock_Config+0xc4>)
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	4a0e      	ldr	r2, [pc, #56]	@ (8008594 <SystemClock_Config+0xc4>)
 800855c:	f043 0301 	orr.w	r3, r3, #1
 8008560:	6193      	str	r3, [r2, #24]
 8008562:	4b0c      	ldr	r3, [pc, #48]	@ (8008594 <SystemClock_Config+0xc4>)
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	607b      	str	r3, [r7, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800856e:	4b0a      	ldr	r3, [pc, #40]	@ (8008598 <SystemClock_Config+0xc8>)
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	647b      	str	r3, [r7, #68]	@ 0x44
 8008574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008576:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800857a:	647b      	str	r3, [r7, #68]	@ 0x44
 800857c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800857e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008582:	647b      	str	r3, [r7, #68]	@ 0x44
 8008584:	4a04      	ldr	r2, [pc, #16]	@ (8008598 <SystemClock_Config+0xc8>)
 8008586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008588:	6053      	str	r3, [r2, #4]
}
 800858a:	bf00      	nop
 800858c:	3748      	adds	r7, #72	@ 0x48
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40021000 	.word	0x40021000
 8008598:	40010000 	.word	0x40010000

0800859c <LD2Flip>:

/* USER CODE BEGIN 4 */
void LD2Flip(void){
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
	if (ledState == 0)
 80085a0:	4b0c      	ldr	r3, [pc, #48]	@ (80085d4 <LD2Flip+0x38>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d108      	bne.n	80085ba <LD2Flip+0x1e>
	{
		ledState = 1;
 80085a8:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <LD2Flip+0x38>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80085ae:	2201      	movs	r2, #1
 80085b0:	2120      	movs	r1, #32
 80085b2:	4809      	ldr	r0, [pc, #36]	@ (80085d8 <LD2Flip+0x3c>)
 80085b4:	f002 f826 	bl	800a604 <HAL_GPIO_WritePin>
 80085b8:	e007      	b.n	80085ca <LD2Flip+0x2e>
	}
	else
	{
		ledState = 0;
 80085ba:	4b06      	ldr	r3, [pc, #24]	@ (80085d4 <LD2Flip+0x38>)
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80085c0:	2200      	movs	r2, #0
 80085c2:	2120      	movs	r1, #32
 80085c4:	4804      	ldr	r0, [pc, #16]	@ (80085d8 <LD2Flip+0x3c>)
 80085c6:	f002 f81d 	bl	800a604 <HAL_GPIO_WritePin>
	}
	LD2Counter = 0;
 80085ca:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <LD2Flip+0x40>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
}
 80085d0:	bf00      	nop
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000091 	.word	0x20000091
 80085d8:	40010800 	.word	0x40010800
 80085dc:	20000090 	.word	0x20000090

080085e0 <SetBootFlag>:
void SetBootFlag(void){
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();
 80085e6:	f002 f847 	bl	800a678 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_BKP_CLK_ENABLE();
 80085ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008624 <SetBootFlag+0x44>)
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	4a0d      	ldr	r2, [pc, #52]	@ (8008624 <SetBootFlag+0x44>)
 80085f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085f4:	61d3      	str	r3, [r2, #28]
 80085f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008624 <SetBootFlag+0x44>)
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
	uint32_t boot_flag = BOOT_FLAG_ADDR;
 8008602:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <SetBootFlag+0x48>)
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	607b      	str	r3, [r7, #4]
	if (boot_flag == BOOT_FLAG_A)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d103      	bne.n	8008616 <SetBootFlag+0x36>
		BOOT_FLAG_ADDR = BOOT_FLAG_B;
 800860e:	4b06      	ldr	r3, [pc, #24]	@ (8008628 <SetBootFlag+0x48>)
 8008610:	2202      	movs	r2, #2
 8008612:	605a      	str	r2, [r3, #4]
	else
		BOOT_FLAG_ADDR = BOOT_FLAG_A;
}
 8008614:	e002      	b.n	800861c <SetBootFlag+0x3c>
		BOOT_FLAG_ADDR = BOOT_FLAG_A;
 8008616:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <SetBootFlag+0x48>)
 8008618:	2201      	movs	r2, #1
 800861a:	605a      	str	r2, [r3, #4]
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40021000 	.word	0x40021000
 8008628:	40006c00 	.word	0x40006c00

0800862c <SendFirmwareStartedMessage>:

void SendFirmwareStartedMessage(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 8008630:	4b13      	ldr	r3, [pc, #76]	@ (8008680 <SendFirmwareStartedMessage+0x54>)
 8008632:	227a      	movs	r2, #122	@ 0x7a
 8008634:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 8008636:	4b12      	ldr	r3, [pc, #72]	@ (8008680 <SendFirmwareStartedMessage+0x54>)
 8008638:	2200      	movs	r2, #0
 800863a:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 800863c:	4b10      	ldr	r3, [pc, #64]	@ (8008680 <SendFirmwareStartedMessage+0x54>)
 800863e:	2200      	movs	r2, #0
 8008640:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 1;
 8008642:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <SendFirmwareStartedMessage+0x54>)
 8008644:	2201      	movs	r2, #1
 8008646:	611a      	str	r2, [r3, #16]

    txData[0] = 0x01; // 펌웨어 시작 알림 신호
 8008648:	4b0e      	ldr	r3, [pc, #56]	@ (8008684 <SendFirmwareStartedMessage+0x58>)
 800864a:	2201      	movs	r2, #1
 800864c:	701a      	strb	r2, [r3, #0]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 800864e:	4b0e      	ldr	r3, [pc, #56]	@ (8008688 <SendFirmwareStartedMessage+0x5c>)
 8008650:	4a0c      	ldr	r2, [pc, #48]	@ (8008684 <SendFirmwareStartedMessage+0x58>)
 8008652:	490b      	ldr	r1, [pc, #44]	@ (8008680 <SendFirmwareStartedMessage+0x54>)
 8008654:	480d      	ldr	r0, [pc, #52]	@ (800868c <SendFirmwareStartedMessage+0x60>)
 8008656:	f000 fee7 	bl	8009428 <HAL_CAN_AddTxMessage>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <SendFirmwareStartedMessage+0x38>
    {
    	Error_Handler();
 8008660:	f000 fb36 	bl	8008cd0 <Error_Handler>
    }

    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 8008664:	bf00      	nop
 8008666:	4b08      	ldr	r3, [pc, #32]	@ (8008688 <SendFirmwareStartedMessage+0x5c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	4807      	ldr	r0, [pc, #28]	@ (800868c <SendFirmwareStartedMessage+0x60>)
 800866e:	f000 ffaa 	bl	80095c6 <HAL_CAN_IsTxMessagePending>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1f6      	bne.n	8008666 <SendFirmwareStartedMessage+0x3a>

    }
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20004898 	.word	0x20004898
 8008684:	200048b0 	.word	0x200048b0
 8008688:	200048b8 	.word	0x200048b8
 800868c:	20000034 	.word	0x20000034

08008690 <NVIC_Config>:

void NVIC_Config(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	2014      	movs	r0, #20
 800869a:	f001 fbf8 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800869e:	2014      	movs	r0, #20
 80086a0:	f001 fc11 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
}
 80086a4:	bf00      	nop
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <ProcessFirmwareSizeMessage>:

void ProcessFirmwareSizeMessage(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
    if (rxHeader->DLC == 4)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b04      	cmp	r3, #4
 80086b8:	d113      	bne.n	80086e2 <ProcessFirmwareSizeMessage+0x3a>
    {
        // 펌웨어 크기 수신
        fwUpdateSize = (rxData[0] << 24) | (rxData[1] << 16) | (rxData[2] << 8) | rxData[3];
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	061a      	lsls	r2, r3, #24
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	041b      	lsls	r3, r3, #16
 80086c8:	431a      	orrs	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	3302      	adds	r3, #2
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	4313      	orrs	r3, r2
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	3203      	adds	r2, #3
 80086d8:	7812      	ldrb	r2, [r2, #0]
 80086da:	4313      	orrs	r3, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	4b03      	ldr	r3, [pc, #12]	@ (80086ec <ProcessFirmwareSizeMessage+0x44>)
 80086e0:	601a      	str	r2, [r3, #0]
    }

}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr
 80086ec:	20000088 	.word	0x20000088

080086f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08c      	sub	sp, #48	@ 0x30
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	f107 0214 	add.w	r2, r7, #20
 8008700:	2100      	movs	r1, #0
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 ff82 	bl	800960c <HAL_CAN_GetRxMessage>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
    {
    	Error_Handler();
 800870e:	f000 fadf 	bl	8008cd0 <Error_Handler>
 8008712:	e044      	b.n	800879e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
        return;
    }

    if (rxHeader.StdId == CAN_ID_CONTROL && fwUpdateRequested == 0)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2b7b      	cmp	r3, #123	@ 0x7b
 8008718:	d119      	bne.n	800874e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 800871a:	4b22      	ldr	r3, [pc, #136]	@ (80087a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d114      	bne.n	800874e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
    {
    	//HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);

    	if (!memcmp(command, rxData, sizeof(command))){
 8008724:	f107 030c 	add.w	r3, r7, #12
 8008728:	2208      	movs	r2, #8
 800872a:	4619      	mov	r1, r3
 800872c:	481e      	ldr	r0, [pc, #120]	@ (80087a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800872e:	f002 fde3 	bl	800b2f8 <memcmp>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d132      	bne.n	800879e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
    		HAL_UART_Transmit(&huart2, "req", sizeof("req"), HAL_MAX_DELAY);
 8008738:	f04f 33ff 	mov.w	r3, #4294967295
 800873c:	2204      	movs	r2, #4
 800873e:	491b      	ldr	r1, [pc, #108]	@ (80087ac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8008740:	481b      	ldr	r0, [pc, #108]	@ (80087b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8008742:	f002 fc05 	bl	800af50 <HAL_UART_Transmit>
    		fwUpdateRequested = 1;
 8008746:	4b17      	ldr	r3, [pc, #92]	@ (80087a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8008748:	2201      	movs	r2, #1
 800874a:	701a      	strb	r2, [r3, #0]
    	if (!memcmp(command, rxData, sizeof(command))){
 800874c:	e027      	b.n	800879e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
    		//HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);

    	}
    }
    else if (fwUpdateRequested == 1 && rxHeader.StdId == CAN_ID_SIZE)	//143360byte
 800874e:	4b15      	ldr	r3, [pc, #84]	@ (80087a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	d112      	bne.n	800877e <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b71      	cmp	r3, #113	@ 0x71
 800875c:	d10f      	bne.n	800877e <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
    {
    	ProcessFirmwareSizeMessage(&rxHeader, rxData);
 800875e:	f107 020c 	add.w	r2, r7, #12
 8008762:	f107 0314 	add.w	r3, r7, #20
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff ff9d 	bl	80086a8 <ProcessFirmwareSizeMessage>

    	HAL_UART_Transmit(&huart2, "size", sizeof("size"), HAL_MAX_DELAY);
 800876e:	f04f 33ff 	mov.w	r3, #4294967295
 8008772:	2205      	movs	r2, #5
 8008774:	490f      	ldr	r1, [pc, #60]	@ (80087b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8008776:	480e      	ldr	r0, [pc, #56]	@ (80087b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8008778:	f002 fbea 	bl	800af50 <HAL_UART_Transmit>
 800877c:	e00f      	b.n	800879e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
    }

    else if (fwUpdateRequested == 1 && rxHeader.StdId == CAN_ID_FILE)
 800877e:	4b09      	ldr	r3, [pc, #36]	@ (80087a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10a      	bne.n	800879e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b70      	cmp	r3, #112	@ 0x70
 800878c:	d107      	bne.n	800879e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
    {
    	//HAL_UART_Transmit(&huart2, "file_start", sizeof("file_start"), HAL_MAX_DELAY);
        MessageBufferPut(&rxHeader, rxData);
 800878e:	f107 020c 	add.w	r2, r7, #12
 8008792:	f107 0314 	add.w	r3, r7, #20
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f000 f911 	bl	80089c0 <MessageBufferPut>
        //HAL_UART_Transmit(&huart2, "file_end", sizeof("file_end"), HAL_MAX_DELAY);
    }
}
 800879e:	3730      	adds	r7, #48	@ 0x30
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000081 	.word	0x20000081
 80087a8:	20000000 	.word	0x20000000
 80087ac:	0800b3a4 	.word	0x0800b3a4
 80087b0:	200048bc 	.word	0x200048bc
 80087b4:	0800b3a8 	.word	0x0800b3a8

080087b8 <EraseFlashMemory>:

void EraseFlashMemory(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80087be:	f001 fc0d 	bl	8009fdc <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	607b      	str	r3, [r7, #4]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.PageAddress = fwUpdateAddress;
 80087ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008804 <EraseFlashMemory+0x4c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbPages = NUMBER_OF_PAGES_IN_PARTITION;
 80087d0:	2330      	movs	r3, #48	@ 0x30
 80087d2:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 80087d4:	1d3a      	adds	r2, r7, #4
 80087d6:	f107 0308 	add.w	r3, r7, #8
 80087da:	4611      	mov	r1, r2
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 fce5 	bl	800a1ac <HAL_FLASHEx_Erase>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d006      	beq.n	80087f6 <EraseFlashMemory+0x3e>
    {
        HAL_FLASH_Lock();
 80087e8:	f001 fc1e 	bl	800a028 <HAL_FLASH_Lock>
        fwUpdateState = FW_UPDATE_IDLE;
 80087ec:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <EraseFlashMemory+0x50>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
        NVIC_SystemReset();
 80087f2:	f7ff fdbd 	bl	8008370 <__NVIC_SystemReset>
    }

    HAL_FLASH_Lock();
 80087f6:	f001 fc17 	bl	800a028 <HAL_FLASH_Lock>

}
 80087fa:	bf00      	nop
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000084 	.word	0x20000084
 8008808:	20000080 	.word	0x20000080

0800880c <StartFirmwareUpdate>:

void StartFirmwareUpdate(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0

	if (BOOT_FLAG_ADDR == BOOT_FLAG_A)
 8008810:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <StartFirmwareUpdate+0x2c>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d103      	bne.n	8008820 <StartFirmwareUpdate+0x14>
		fwUpdateAddress = APPLICATION_B_ADDRESS;
 8008818:	4b08      	ldr	r3, [pc, #32]	@ (800883c <StartFirmwareUpdate+0x30>)
 800881a:	4a09      	ldr	r2, [pc, #36]	@ (8008840 <StartFirmwareUpdate+0x34>)
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	e002      	b.n	8008826 <StartFirmwareUpdate+0x1a>
	else
		fwUpdateAddress = APPLICATION_A_ADDRESS;
 8008820:	4b06      	ldr	r3, [pc, #24]	@ (800883c <StartFirmwareUpdate+0x30>)
 8008822:	4a08      	ldr	r2, [pc, #32]	@ (8008844 <StartFirmwareUpdate+0x38>)
 8008824:	601a      	str	r2, [r3, #0]

    fwUpdateReceivedBytes = 0;
 8008826:	4b08      	ldr	r3, [pc, #32]	@ (8008848 <StartFirmwareUpdate+0x3c>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

    EraseFlashMemory();
 800882c:	f7ff ffc4 	bl	80087b8 <EraseFlashMemory>

    SendInactivePartitionAddress();
 8008830:	f000 f80c 	bl	800884c <SendInactivePartitionAddress>
}
 8008834:	bf00      	nop
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40006c00 	.word	0x40006c00
 800883c:	20000084 	.word	0x20000084
 8008840:	08014000 	.word	0x08014000
 8008844:	08008000 	.word	0x08008000
 8008848:	2000008c 	.word	0x2000008c

0800884c <SendInactivePartitionAddress>:

void SendInactivePartitionAddress(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 8008852:	4b1e      	ldr	r3, [pc, #120]	@ (80088cc <SendInactivePartitionAddress+0x80>)
 8008854:	227a      	movs	r2, #122	@ 0x7a
 8008856:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 8008858:	4b1c      	ldr	r3, [pc, #112]	@ (80088cc <SendInactivePartitionAddress+0x80>)
 800885a:	2200      	movs	r2, #0
 800885c:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 800885e:	4b1b      	ldr	r3, [pc, #108]	@ (80088cc <SendInactivePartitionAddress+0x80>)
 8008860:	2200      	movs	r2, #0
 8008862:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 4; // 주소 전송
 8008864:	4b19      	ldr	r3, [pc, #100]	@ (80088cc <SendInactivePartitionAddress+0x80>)
 8008866:	2204      	movs	r2, #4
 8008868:	611a      	str	r2, [r3, #16]

    uint32_t targetAddress = fwUpdateAddress;
 800886a:	4b19      	ldr	r3, [pc, #100]	@ (80088d0 <SendInactivePartitionAddress+0x84>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	607b      	str	r3, [r7, #4]

    txData[0] = (targetAddress >> 24) & 0xFF;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	0e1b      	lsrs	r3, r3, #24
 8008874:	b2da      	uxtb	r2, r3
 8008876:	4b17      	ldr	r3, [pc, #92]	@ (80088d4 <SendInactivePartitionAddress+0x88>)
 8008878:	701a      	strb	r2, [r3, #0]
    txData[1] = (targetAddress >> 16) & 0xFF;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	0c1b      	lsrs	r3, r3, #16
 800887e:	b2da      	uxtb	r2, r3
 8008880:	4b14      	ldr	r3, [pc, #80]	@ (80088d4 <SendInactivePartitionAddress+0x88>)
 8008882:	705a      	strb	r2, [r3, #1]
    txData[2] = (targetAddress >> 8) & 0xFF;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	b2da      	uxtb	r2, r3
 800888a:	4b12      	ldr	r3, [pc, #72]	@ (80088d4 <SendInactivePartitionAddress+0x88>)
 800888c:	709a      	strb	r2, [r3, #2]
    txData[3] = (targetAddress) & 0xFF;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	b2da      	uxtb	r2, r3
 8008892:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <SendInactivePartitionAddress+0x88>)
 8008894:	70da      	strb	r2, [r3, #3]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8008896:	4b10      	ldr	r3, [pc, #64]	@ (80088d8 <SendInactivePartitionAddress+0x8c>)
 8008898:	4a0e      	ldr	r2, [pc, #56]	@ (80088d4 <SendInactivePartitionAddress+0x88>)
 800889a:	490c      	ldr	r1, [pc, #48]	@ (80088cc <SendInactivePartitionAddress+0x80>)
 800889c:	480f      	ldr	r0, [pc, #60]	@ (80088dc <SendInactivePartitionAddress+0x90>)
 800889e:	f000 fdc3 	bl	8009428 <HAL_CAN_AddTxMessage>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <SendInactivePartitionAddress+0x60>
    {
        Error_Handler();
 80088a8:	f000 fa12 	bl	8008cd0 <Error_Handler>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 80088ac:	bf00      	nop
 80088ae:	4b0a      	ldr	r3, [pc, #40]	@ (80088d8 <SendInactivePartitionAddress+0x8c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4619      	mov	r1, r3
 80088b4:	4809      	ldr	r0, [pc, #36]	@ (80088dc <SendInactivePartitionAddress+0x90>)
 80088b6:	f000 fe86 	bl	80095c6 <HAL_CAN_IsTxMessagePending>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1f6      	bne.n	80088ae <SendInactivePartitionAddress+0x62>
	}
}
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20004898 	.word	0x20004898
 80088d0:	20000084 	.word	0x20000084
 80088d4:	200048b0 	.word	0x200048b0
 80088d8:	200048b8 	.word	0x200048b8
 80088dc:	20000034 	.word	0x20000034

080088e0 <SendUpdateState>:

void SendUpdateState(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 80088e4:	4b17      	ldr	r3, [pc, #92]	@ (8008944 <SendUpdateState+0x64>)
 80088e6:	227a      	movs	r2, #122	@ 0x7a
 80088e8:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 80088ea:	4b16      	ldr	r3, [pc, #88]	@ (8008944 <SendUpdateState+0x64>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 80088f0:	4b14      	ldr	r3, [pc, #80]	@ (8008944 <SendUpdateState+0x64>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 1;
 80088f6:	4b13      	ldr	r3, [pc, #76]	@ (8008944 <SendUpdateState+0x64>)
 80088f8:	2201      	movs	r2, #1
 80088fa:	611a      	str	r2, [r3, #16]

    if (fwUpdateComplete == 1)
 80088fc:	4b12      	ldr	r3, [pc, #72]	@ (8008948 <SendUpdateState+0x68>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b01      	cmp	r3, #1
 8008904:	d103      	bne.n	800890e <SendUpdateState+0x2e>
    	txData[0] = 0x02; // 완료 신호
 8008906:	4b11      	ldr	r3, [pc, #68]	@ (800894c <SendUpdateState+0x6c>)
 8008908:	2202      	movs	r2, #2
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	e002      	b.n	8008914 <SendUpdateState+0x34>
    else
    	txData[0] = 0x03; // 실패 신호
 800890e:	4b0f      	ldr	r3, [pc, #60]	@ (800894c <SendUpdateState+0x6c>)
 8008910:	2203      	movs	r2, #3
 8008912:	701a      	strb	r2, [r3, #0]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8008914:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <SendUpdateState+0x70>)
 8008916:	4a0d      	ldr	r2, [pc, #52]	@ (800894c <SendUpdateState+0x6c>)
 8008918:	490a      	ldr	r1, [pc, #40]	@ (8008944 <SendUpdateState+0x64>)
 800891a:	480e      	ldr	r0, [pc, #56]	@ (8008954 <SendUpdateState+0x74>)
 800891c:	f000 fd84 	bl	8009428 <HAL_CAN_AddTxMessage>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <SendUpdateState+0x4a>
    {
        Error_Handler();
 8008926:	f000 f9d3 	bl	8008cd0 <Error_Handler>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 800892a:	bf00      	nop
 800892c:	4b08      	ldr	r3, [pc, #32]	@ (8008950 <SendUpdateState+0x70>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	4808      	ldr	r0, [pc, #32]	@ (8008954 <SendUpdateState+0x74>)
 8008934:	f000 fe47 	bl	80095c6 <HAL_CAN_IsTxMessagePending>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f6      	bne.n	800892c <SendUpdateState+0x4c>
    }
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20004898 	.word	0x20004898
 8008948:	20000082 	.word	0x20000082
 800894c:	200048b0 	.word	0x200048b0
 8008950:	200048b8 	.word	0x200048b8
 8008954:	20000034 	.word	0x20000034

08008958 <MessageBufferIsFull>:

uint8_t MessageBufferIsFull(void)
{
 8008958:	b480      	push	{r7}
 800895a:	af00      	add	r7, sp, #0
    return ((messageBufferHead + 1) % MESSAGE_BUFFER_SIZE) == messageBufferTail;
 800895c:	4b0b      	ldr	r3, [pc, #44]	@ (800898c <MessageBufferIsFull+0x34>)
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	3301      	adds	r3, #1
 8008964:	425a      	negs	r2, r3
 8008966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800896e:	bf58      	it	pl
 8008970:	4253      	negpl	r3, r2
 8008972:	4a07      	ldr	r2, [pc, #28]	@ (8008990 <MessageBufferIsFull+0x38>)
 8008974:	8812      	ldrh	r2, [r2, #0]
 8008976:	b292      	uxth	r2, r2
 8008978:	4293      	cmp	r3, r2
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
}
 8008982:	4618      	mov	r0, r3
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20004894 	.word	0x20004894
 8008990:	20004896 	.word	0x20004896

08008994 <MessageBufferIsEmpty>:

uint8_t MessageBufferIsEmpty(void)
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0
    return messageBufferHead == messageBufferTail;
 8008998:	4b07      	ldr	r3, [pc, #28]	@ (80089b8 <MessageBufferIsEmpty+0x24>)
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b29a      	uxth	r2, r3
 800899e:	4b07      	ldr	r3, [pc, #28]	@ (80089bc <MessageBufferIsEmpty+0x28>)
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	429a      	cmp	r2, r3
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20004894 	.word	0x20004894
 80089bc:	20004896 	.word	0x20004896

080089c0 <MessageBufferPut>:

void MessageBufferPut(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 80089c0:	b5b0      	push	{r4, r5, r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
    if (!MessageBufferIsFull())
 80089ca:	f7ff ffc5 	bl	8008958 <MessageBufferIsFull>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d131      	bne.n	8008a38 <MessageBufferPut+0x78>
    {
        messageBuffer[messageBufferHead].rxHeader = *rxHeader;
 80089d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a40 <MessageBufferPut+0x80>)
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	4619      	mov	r1, r3
 80089dc:	4a19      	ldr	r2, [pc, #100]	@ (8008a44 <MessageBufferPut+0x84>)
 80089de:	460b      	mov	r3, r1
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	440b      	add	r3, r1
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	441a      	add	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4614      	mov	r4, r2
 80089ec:	461d      	mov	r5, r3
 80089ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80089f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        memcpy(messageBuffer[messageBufferHead].rxData, rxData, 8);
 80089fa:	4b11      	ldr	r3, [pc, #68]	@ (8008a40 <MessageBufferPut+0x80>)
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	461a      	mov	r2, r3
 8008a02:	4613      	mov	r3, r2
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	3318      	adds	r3, #24
 8008a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008a44 <MessageBufferPut+0x84>)
 8008a0e:	4413      	add	r3, r2
 8008a10:	3304      	adds	r3, #4
 8008a12:	2208      	movs	r2, #8
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f002 fcaa 	bl	800b370 <memcpy>
        messageBufferHead = (messageBufferHead + 1) % MESSAGE_BUFFER_SIZE;
 8008a1c:	4b08      	ldr	r3, [pc, #32]	@ (8008a40 <MessageBufferPut+0x80>)
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3301      	adds	r3, #1
 8008a24:	425a      	negs	r2, r3
 8008a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a2e:	bf58      	it	pl
 8008a30:	4253      	negpl	r3, r2
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	4b02      	ldr	r3, [pc, #8]	@ (8008a40 <MessageBufferPut+0x80>)
 8008a36:	801a      	strh	r2, [r3, #0]
    }
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a40:	20004894 	.word	0x20004894
 8008a44:	20000094 	.word	0x20000094

08008a48 <MessageBufferGet>:

void MessageBufferGet(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 8008a48:	b5b0      	push	{r4, r5, r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
    if (!MessageBufferIsEmpty())
 8008a52:	f7ff ff9f 	bl	8008994 <MessageBufferIsEmpty>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d131      	bne.n	8008ac0 <MessageBufferGet+0x78>
    {
        *rxHeader = messageBuffer[messageBufferTail].rxHeader;
 8008a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac8 <MessageBufferGet+0x80>)
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4a19      	ldr	r2, [pc, #100]	@ (8008acc <MessageBufferGet+0x84>)
 8008a68:	460b      	mov	r3, r1
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	440b      	add	r3, r1
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	4604      	mov	r4, r0
 8008a74:	461d      	mov	r5, r3
 8008a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        memcpy(rxData, messageBuffer[messageBufferTail].rxData, 8);
 8008a82:	4b11      	ldr	r3, [pc, #68]	@ (8008ac8 <MessageBufferGet+0x80>)
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	3318      	adds	r3, #24
 8008a94:	4a0d      	ldr	r2, [pc, #52]	@ (8008acc <MessageBufferGet+0x84>)
 8008a96:	4413      	add	r3, r2
 8008a98:	3304      	adds	r3, #4
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6838      	ldr	r0, [r7, #0]
 8008aa0:	f002 fc66 	bl	800b370 <memcpy>
        messageBufferTail = (messageBufferTail + 1) % MESSAGE_BUFFER_SIZE;
 8008aa4:	4b08      	ldr	r3, [pc, #32]	@ (8008ac8 <MessageBufferGet+0x80>)
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	3301      	adds	r3, #1
 8008aac:	425a      	negs	r2, r3
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ab6:	bf58      	it	pl
 8008ab8:	4253      	negpl	r3, r2
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	4b02      	ldr	r3, [pc, #8]	@ (8008ac8 <MessageBufferGet+0x80>)
 8008abe:	801a      	strh	r2, [r3, #0]
    }
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ac8:	20004896 	.word	0x20004896
 8008acc:	20000094 	.word	0x20000094

08008ad0 <FirmwareUpdateStateMachine>:

void FirmwareUpdateStateMachine(void)
{
 8008ad0:	b5b0      	push	{r4, r5, r7, lr}
 8008ad2:	b08c      	sub	sp, #48	@ 0x30
 8008ad4:	af00      	add	r7, sp, #0
    switch (fwUpdateState)
 8008ad6:	4b71      	ldr	r3, [pc, #452]	@ (8008c9c <FirmwareUpdateStateMachine+0x1cc>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	f000 80c7 	beq.w	8008c6e <FirmwareUpdateStateMachine+0x19e>
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	f300 80d3 	bgt.w	8008c8c <FirmwareUpdateStateMachine+0x1bc>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <FirmwareUpdateStateMachine+0x20>
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d00c      	beq.n	8008b08 <FirmwareUpdateStateMachine+0x38>
 8008aee:	e0cd      	b.n	8008c8c <FirmwareUpdateStateMachine+0x1bc>
    {
        case FW_UPDATE_IDLE:
            if (fwUpdateRequested)
 8008af0:	4b6b      	ldr	r3, [pc, #428]	@ (8008ca0 <FirmwareUpdateStateMachine+0x1d0>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80cc 	beq.w	8008c94 <FirmwareUpdateStateMachine+0x1c4>
            {
                StartFirmwareUpdate();
 8008afc:	f7ff fe86 	bl	800880c <StartFirmwareUpdate>
                fwUpdateState = FW_UPDATE_IN_PROGRESS;
 8008b00:	4b66      	ldr	r3, [pc, #408]	@ (8008c9c <FirmwareUpdateStateMachine+0x1cc>)
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]

            }
            break;
 8008b06:	e0c5      	b.n	8008c94 <FirmwareUpdateStateMachine+0x1c4>

        case FW_UPDATE_IN_PROGRESS:
        	CAN_RxHeaderTypeDef rxHeader;
        	uint32_t currentAddress = fwUpdateAddress;
 8008b08:	4b66      	ldr	r3, [pc, #408]	@ (8008ca4 <FirmwareUpdateStateMachine+0x1d4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	uint8_t rxData[8];

        	HAL_UART_Transmit(&huart2, "file_start", sizeof("file_start"), HAL_MAX_DELAY);
 8008b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b12:	220b      	movs	r2, #11
 8008b14:	4964      	ldr	r1, [pc, #400]	@ (8008ca8 <FirmwareUpdateStateMachine+0x1d8>)
 8008b16:	4865      	ldr	r0, [pc, #404]	@ (8008cac <FirmwareUpdateStateMachine+0x1dc>)
 8008b18:	f002 fa1a 	bl	800af50 <HAL_UART_Transmit>
            while (fwUpdateSize > fwUpdateReceivedBytes)
 8008b1c:	e06a      	b.n	8008bf4 <FirmwareUpdateStateMachine+0x124>
            {
            	//HAL_UART_Transmit(&huart2, "file_start", sizeof("file_start"), HAL_MAX_DELAY);
            	if(!MessageBufferIsEmpty()){
 8008b1e:	f7ff ff39 	bl	8008994 <MessageBufferIsEmpty>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d165      	bne.n	8008bf4 <FirmwareUpdateStateMachine+0x124>
					MessageBufferGet(&rxHeader, rxData);
 8008b28:	463a      	mov	r2, r7
 8008b2a:	f107 0308 	add.w	r3, r7, #8
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff ff89 	bl	8008a48 <MessageBufferGet>

					uint8_t dataLength = rxHeader.DLC;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

					HAL_FLASH_Unlock();
 8008b3c:	f001 fa4e 	bl	8009fdc <HAL_FLASH_Unlock>

					for (uint8_t i = 0; i < dataLength; i += 2)
 8008b40:	2300      	movs	r3, #0
 8008b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b46:	e04f      	b.n	8008be8 <FirmwareUpdateStateMachine+0x118>
					{
						uint16_t data16 = rxData[i];
 8008b48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b4c:	3330      	adds	r3, #48	@ 0x30
 8008b4e:	443b      	add	r3, r7
 8008b50:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8008b54:	853b      	strh	r3, [r7, #40]	@ 0x28
						if (i + 1 < dataLength)
 8008b56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b60:	429a      	cmp	r2, r3
 8008b62:	da0d      	bge.n	8008b80 <FirmwareUpdateStateMachine+0xb0>
						{
							data16 |= rxData[i + 1] << 8;
 8008b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b68:	3301      	adds	r3, #1
 8008b6a:	3330      	adds	r3, #48	@ 0x30
 8008b6c:	443b      	add	r3, r7
 8008b6e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	b21a      	sxth	r2, r3
 8008b76:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	853b      	strh	r3, [r7, #40]	@ 0x28
						}


						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress, data16) != HAL_OK)
 8008b80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b82:	2200      	movs	r2, #0
 8008b84:	461c      	mov	r4, r3
 8008b86:	4615      	mov	r5, r2
 8008b88:	4622      	mov	r2, r4
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b8e:	2001      	movs	r0, #1
 8008b90:	f001 f9b4 	bl	8009efc <HAL_FLASH_Program>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d008      	beq.n	8008bac <FirmwareUpdateStateMachine+0xdc>
						{
							HAL_FLASH_Lock();
 8008b9a:	f001 fa45 	bl	800a028 <HAL_FLASH_Lock>
							fwUpdateRequested = 0;
 8008b9e:	4b40      	ldr	r3, [pc, #256]	@ (8008ca0 <FirmwareUpdateStateMachine+0x1d0>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	701a      	strb	r2, [r3, #0]
							fwUpdateState = FW_UPDATE_IDLE;
 8008ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8008c9c <FirmwareUpdateStateMachine+0x1cc>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	701a      	strb	r2, [r3, #0]
 8008baa:	e074      	b.n	8008c96 <FirmwareUpdateStateMachine+0x1c6>
							return;
						}
						currentAddress += 2;
 8008bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bae:	3302      	adds	r3, #2
 8008bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						fwUpdateReceivedBytes += (i + 1 < dataLength) ? 2 : 1;
 8008bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	da01      	bge.n	8008bc4 <FirmwareUpdateStateMachine+0xf4>
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	e000      	b.n	8008bc6 <FirmwareUpdateStateMachine+0xf6>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8008cb0 <FirmwareUpdateStateMachine+0x1e0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4413      	add	r3, r2
 8008bcc:	4a38      	ldr	r2, [pc, #224]	@ (8008cb0 <FirmwareUpdateStateMachine+0x1e0>)
 8008bce:	6013      	str	r3, [r2, #0]

                        // 디버깅: 수신된 바이트 수 출력
						HAL_UART_Transmit(&huart2, "p", sizeof("p"), HAL_MAX_DELAY);
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	4937      	ldr	r1, [pc, #220]	@ (8008cb4 <FirmwareUpdateStateMachine+0x1e4>)
 8008bd8:	4834      	ldr	r0, [pc, #208]	@ (8008cac <FirmwareUpdateStateMachine+0x1dc>)
 8008bda:	f002 f9b9 	bl	800af50 <HAL_UART_Transmit>
					for (uint8_t i = 0; i < dataLength; i += 2)
 8008bde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008be2:	3302      	adds	r3, #2
 8008be4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008be8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d3a9      	bcc.n	8008b48 <FirmwareUpdateStateMachine+0x78>
            while (fwUpdateSize > fwUpdateReceivedBytes)
 8008bf4:	4b30      	ldr	r3, [pc, #192]	@ (8008cb8 <FirmwareUpdateStateMachine+0x1e8>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8008cb0 <FirmwareUpdateStateMachine+0x1e0>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d88e      	bhi.n	8008b1e <FirmwareUpdateStateMachine+0x4e>

					}
            	}
            }
            fwUpdateRequested = 0;
 8008c00:	4b27      	ldr	r3, [pc, #156]	@ (8008ca0 <FirmwareUpdateStateMachine+0x1d0>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart2, "file_end", sizeof("file_end"), HAL_MAX_DELAY);
 8008c06:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0a:	2209      	movs	r2, #9
 8008c0c:	492b      	ldr	r1, [pc, #172]	@ (8008cbc <FirmwareUpdateStateMachine+0x1ec>)
 8008c0e:	4827      	ldr	r0, [pc, #156]	@ (8008cac <FirmwareUpdateStateMachine+0x1dc>)
 8008c10:	f002 f99e 	bl	800af50 <HAL_UART_Transmit>
			if (fwUpdateReceivedBytes != fwUpdateSize)
 8008c14:	4b26      	ldr	r3, [pc, #152]	@ (8008cb0 <FirmwareUpdateStateMachine+0x1e0>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	4b27      	ldr	r3, [pc, #156]	@ (8008cb8 <FirmwareUpdateStateMachine+0x1e8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d013      	beq.n	8008c48 <FirmwareUpdateStateMachine+0x178>
			{
				HAL_UART_Transmit(&huart2, "failed", sizeof("failed"), HAL_MAX_DELAY);
 8008c20:	f04f 33ff 	mov.w	r3, #4294967295
 8008c24:	2207      	movs	r2, #7
 8008c26:	4926      	ldr	r1, [pc, #152]	@ (8008cc0 <FirmwareUpdateStateMachine+0x1f0>)
 8008c28:	4820      	ldr	r0, [pc, #128]	@ (8008cac <FirmwareUpdateStateMachine+0x1dc>)
 8008c2a:	f002 f991 	bl	800af50 <HAL_UART_Transmit>
				SendUpdateState();
 8008c2e:	f7ff fe57 	bl	80088e0 <SendUpdateState>
				fwUpdateState = FW_UPDATE_IDLE;
 8008c32:	4b1a      	ldr	r3, [pc, #104]	@ (8008c9c <FirmwareUpdateStateMachine+0x1cc>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]

				//
	        	SetBootFlag();
 8008c38:	f7ff fcd2 	bl	80085e0 <SetBootFlag>
				HAL_Delay(1000);
 8008c3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c40:	f000 f9c6 	bl	8008fd0 <HAL_Delay>
				NVIC_SystemReset();
 8008c44:	f7ff fb94 	bl	8008370 <__NVIC_SystemReset>
			}
			else{
				HAL_UART_Transmit(&huart2, "ccomplete", sizeof("ccomplete"), HAL_MAX_DELAY);
 8008c48:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4c:	220a      	movs	r2, #10
 8008c4e:	491d      	ldr	r1, [pc, #116]	@ (8008cc4 <FirmwareUpdateStateMachine+0x1f4>)
 8008c50:	4816      	ldr	r0, [pc, #88]	@ (8008cac <FirmwareUpdateStateMachine+0x1dc>)
 8008c52:	f002 f97d 	bl	800af50 <HAL_UART_Transmit>
				fwUpdateComplete = 1;
 8008c56:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc8 <FirmwareUpdateStateMachine+0x1f8>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]
				SendUpdateState();
 8008c5c:	f7ff fe40 	bl	80088e0 <SendUpdateState>
				fwUpdateState = FW_UPDATE_COMPLETE;
 8008c60:	4b0e      	ldr	r3, [pc, #56]	@ (8008c9c <FirmwareUpdateStateMachine+0x1cc>)
 8008c62:	2203      	movs	r2, #3
 8008c64:	701a      	strb	r2, [r3, #0]
			}
			fwUpdateSize = 0;
 8008c66:	4b14      	ldr	r3, [pc, #80]	@ (8008cb8 <FirmwareUpdateStateMachine+0x1e8>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
            break;
 8008c6c:	e013      	b.n	8008c96 <FirmwareUpdateStateMachine+0x1c6>

        case FW_UPDATE_COMPLETE:
            HAL_UART_Transmit(&huart2, "complete", sizeof("complete"), HAL_MAX_DELAY);
 8008c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c72:	2209      	movs	r2, #9
 8008c74:	4915      	ldr	r1, [pc, #84]	@ (8008ccc <FirmwareUpdateStateMachine+0x1fc>)
 8008c76:	480d      	ldr	r0, [pc, #52]	@ (8008cac <FirmwareUpdateStateMachine+0x1dc>)
 8008c78:	f002 f96a 	bl	800af50 <HAL_UART_Transmit>
        	SetBootFlag();
 8008c7c:	f7ff fcb0 	bl	80085e0 <SetBootFlag>
			HAL_Delay(1000);
 8008c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c84:	f000 f9a4 	bl	8008fd0 <HAL_Delay>
			NVIC_SystemReset();
 8008c88:	f7ff fb72 	bl	8008370 <__NVIC_SystemReset>
            break;

        default:
        	fwUpdateState = FW_UPDATE_IDLE;
 8008c8c:	4b03      	ldr	r3, [pc, #12]	@ (8008c9c <FirmwareUpdateStateMachine+0x1cc>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
            break;
 8008c92:	e000      	b.n	8008c96 <FirmwareUpdateStateMachine+0x1c6>
            break;
 8008c94:	bf00      	nop
    }
}
 8008c96:	3730      	adds	r7, #48	@ 0x30
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c9c:	20000080 	.word	0x20000080
 8008ca0:	20000081 	.word	0x20000081
 8008ca4:	20000084 	.word	0x20000084
 8008ca8:	0800b3b0 	.word	0x0800b3b0
 8008cac:	200048bc 	.word	0x200048bc
 8008cb0:	2000008c 	.word	0x2000008c
 8008cb4:	0800b3bc 	.word	0x0800b3bc
 8008cb8:	20000088 	.word	0x20000088
 8008cbc:	0800b3c0 	.word	0x0800b3c0
 8008cc0:	0800b3cc 	.word	0x0800b3cc
 8008cc4:	0800b3d4 	.word	0x0800b3d4
 8008cc8:	20000082 	.word	0x20000082
 8008ccc:	0800b3e0 	.word	0x0800b3e0

08008cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008cd4:	b672      	cpsid	i
}
 8008cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8008cd8:	2201      	movs	r2, #1
 8008cda:	2120      	movs	r1, #32
 8008cdc:	4803      	ldr	r0, [pc, #12]	@ (8008cec <Error_Handler+0x1c>)
 8008cde:	f001 fc91 	bl	800a604 <HAL_GPIO_WritePin>
  while (1)
  {
	  SetBootFlag();
 8008ce2:	f7ff fc7d 	bl	80085e0 <SetBootFlag>
	  NVIC_SystemReset();
 8008ce6:	f7ff fb43 	bl	8008370 <__NVIC_SystemReset>
 8008cea:	bf00      	nop
 8008cec:	40010800 	.word	0x40010800

08008cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008cf6:	4b15      	ldr	r3, [pc, #84]	@ (8008d4c <HAL_MspInit+0x5c>)
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	4a14      	ldr	r2, [pc, #80]	@ (8008d4c <HAL_MspInit+0x5c>)
 8008cfc:	f043 0301 	orr.w	r3, r3, #1
 8008d00:	6193      	str	r3, [r2, #24]
 8008d02:	4b12      	ldr	r3, [pc, #72]	@ (8008d4c <HAL_MspInit+0x5c>)
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	60bb      	str	r3, [r7, #8]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d4c <HAL_MspInit+0x5c>)
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	4a0e      	ldr	r2, [pc, #56]	@ (8008d4c <HAL_MspInit+0x5c>)
 8008d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d18:	61d3      	str	r3, [r2, #28]
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <HAL_MspInit+0x5c>)
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d22:	607b      	str	r3, [r7, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008d26:	4b0a      	ldr	r3, [pc, #40]	@ (8008d50 <HAL_MspInit+0x60>)
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	4a04      	ldr	r2, [pc, #16]	@ (8008d50 <HAL_MspInit+0x60>)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d42:	bf00      	nop
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	40010000 	.word	0x40010000

08008d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <NMI_Handler+0x4>

08008d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d60:	bf00      	nop
 8008d62:	e7fd      	b.n	8008d60 <HardFault_Handler+0x4>

08008d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d68:	bf00      	nop
 8008d6a:	e7fd      	b.n	8008d68 <MemManage_Handler+0x4>

08008d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <BusFault_Handler+0x4>

08008d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <UsageFault_Handler+0x4>

08008d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d80:	bf00      	nop
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr

08008d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d8c:	bf00      	nop
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr

08008d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr

08008da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008da4:	f000 f8f8 	bl	8008f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008da8:	bf00      	nop
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8008db0:	4802      	ldr	r0, [pc, #8]	@ (8008dbc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8008db2:	f000 fd71 	bl	8009898 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8008db6:	bf00      	nop
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000034 	.word	0x20000034

08008dc0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8008dc4:	4802      	ldr	r0, [pc, #8]	@ (8008dd0 <CAN1_RX1_IRQHandler+0x10>)
 8008dc6:	f000 fd67 	bl	8009898 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8008dca:	bf00      	nop
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000034 	.word	0x20000034

08008dd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008dd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008ddc:	f001 fc2a 	bl	800a634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008de0:	bf00      	nop
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008de8:	bf00      	nop
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bc80      	pop	{r7}
 8008dee:	4770      	bx	lr

08008df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008df4:	4b11      	ldr	r3, [pc, #68]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008df6:	4a12      	ldr	r2, [pc, #72]	@ (8008e40 <MX_USART2_UART_Init+0x50>)
 8008df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008dfa:	4b10      	ldr	r3, [pc, #64]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008e02:	4b0e      	ldr	r3, [pc, #56]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008e08:	4b0c      	ldr	r3, [pc, #48]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008e14:	4b09      	ldr	r3, [pc, #36]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008e16:	220c      	movs	r2, #12
 8008e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e1a:	4b08      	ldr	r3, [pc, #32]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e20:	4b06      	ldr	r3, [pc, #24]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008e26:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <MX_USART2_UART_Init+0x4c>)
 8008e28:	f002 f842 	bl	800aeb0 <HAL_UART_Init>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008e32:	f7ff ff4d 	bl	8008cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008e36:	bf00      	nop
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	200048bc 	.word	0x200048bc
 8008e40:	40004400 	.word	0x40004400

08008e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e4c:	f107 0310 	add.w	r3, r7, #16
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a15      	ldr	r2, [pc, #84]	@ (8008eb4 <HAL_UART_MspInit+0x70>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d123      	bne.n	8008eac <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e64:	4b14      	ldr	r3, [pc, #80]	@ (8008eb8 <HAL_UART_MspInit+0x74>)
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	4a13      	ldr	r2, [pc, #76]	@ (8008eb8 <HAL_UART_MspInit+0x74>)
 8008e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e6e:	61d3      	str	r3, [r2, #28]
 8008e70:	4b11      	ldr	r3, [pc, #68]	@ (8008eb8 <HAL_UART_MspInit+0x74>)
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb8 <HAL_UART_MspInit+0x74>)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb8 <HAL_UART_MspInit+0x74>)
 8008e82:	f043 0304 	orr.w	r3, r3, #4
 8008e86:	6193      	str	r3, [r2, #24]
 8008e88:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb8 <HAL_UART_MspInit+0x74>)
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	60bb      	str	r3, [r7, #8]
 8008e92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008e94:	230c      	movs	r3, #12
 8008e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea0:	f107 0310 	add.w	r3, r7, #16
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4805      	ldr	r0, [pc, #20]	@ (8008ebc <HAL_UART_MspInit+0x78>)
 8008ea8:	f001 fa28 	bl	800a2fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008eac:	bf00      	nop
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40004400 	.word	0x40004400
 8008eb8:	40021000 	.word	0x40021000
 8008ebc:	40010800 	.word	0x40010800

08008ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008ec0:	f7ff ff90 	bl	8008de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ec4:	480b      	ldr	r0, [pc, #44]	@ (8008ef4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008ec6:	490c      	ldr	r1, [pc, #48]	@ (8008ef8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8008efc <LoopFillZerobss+0x16>)
  movs r3, #0
 8008eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ecc:	e002      	b.n	8008ed4 <LoopCopyDataInit>

08008ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ed2:	3304      	adds	r3, #4

08008ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ed8:	d3f9      	bcc.n	8008ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008eda:	4a09      	ldr	r2, [pc, #36]	@ (8008f00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008edc:	4c09      	ldr	r4, [pc, #36]	@ (8008f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ee0:	e001      	b.n	8008ee6 <LoopFillZerobss>

08008ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ee4:	3204      	adds	r2, #4

08008ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ee8:	d3fb      	bcc.n	8008ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008eea:	f002 fa1d 	bl	800b328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008eee:	f7ff fa55 	bl	800839c <main>
  bx lr
 8008ef2:	4770      	bx	lr
  ldr r0, =_sdata
 8008ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ef8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8008efc:	0800b420 	.word	0x0800b420
  ldr r2, =_sbss
 8008f00:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8008f04:	20004928 	.word	0x20004928

08008f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008f08:	e7fe      	b.n	8008f08 <ADC1_2_IRQHandler>
	...

08008f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f10:	4b08      	ldr	r3, [pc, #32]	@ (8008f34 <HAL_Init+0x28>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a07      	ldr	r2, [pc, #28]	@ (8008f34 <HAL_Init+0x28>)
 8008f16:	f043 0310 	orr.w	r3, r3, #16
 8008f1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f1c:	2003      	movs	r0, #3
 8008f1e:	f000 ffab 	bl	8009e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f22:	2000      	movs	r0, #0
 8008f24:	f000 f808 	bl	8008f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008f28:	f7ff fee2 	bl	8008cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40022000 	.word	0x40022000

08008f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008f40:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <HAL_InitTick+0x54>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <HAL_InitTick+0x58>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 ffc3 	bl	8009ee2 <HAL_SYSTICK_Config>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e00e      	b.n	8008f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b0f      	cmp	r3, #15
 8008f6a:	d80a      	bhi.n	8008f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	f000 ff8b 	bl	8009e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008f78:	4a06      	ldr	r2, [pc, #24]	@ (8008f94 <HAL_InitTick+0x5c>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e000      	b.n	8008f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000008 	.word	0x20000008
 8008f90:	20000010 	.word	0x20000010
 8008f94:	2000000c 	.word	0x2000000c

08008f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f9c:	4b05      	ldr	r3, [pc, #20]	@ (8008fb4 <HAL_IncTick+0x1c>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <HAL_IncTick+0x20>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	4a03      	ldr	r2, [pc, #12]	@ (8008fb8 <HAL_IncTick+0x20>)
 8008faa:	6013      	str	r3, [r2, #0]
}
 8008fac:	bf00      	nop
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr
 8008fb4:	20000010 	.word	0x20000010
 8008fb8:	20004904 	.word	0x20004904

08008fbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8008fc0:	4b02      	ldr	r3, [pc, #8]	@ (8008fcc <HAL_GetTick+0x10>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr
 8008fcc:	20004904 	.word	0x20004904

08008fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008fd8:	f7ff fff0 	bl	8008fbc <HAL_GetTick>
 8008fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe8:	d005      	beq.n	8008ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008fea:	4b0a      	ldr	r3, [pc, #40]	@ (8009014 <HAL_Delay+0x44>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008ff6:	bf00      	nop
 8008ff8:	f7ff ffe0 	bl	8008fbc <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	429a      	cmp	r2, r3
 8009006:	d8f7      	bhi.n	8008ff8 <HAL_Delay+0x28>
  {
  }
}
 8009008:	bf00      	nop
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000010 	.word	0x20000010

08009018 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e0ed      	b.n	8009206 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff f8d0 	bl	80081dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800904c:	f7ff ffb6 	bl	8008fbc <HAL_GetTick>
 8009050:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009052:	e012      	b.n	800907a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009054:	f7ff ffb2 	bl	8008fbc <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2b0a      	cmp	r3, #10
 8009060:	d90b      	bls.n	800907a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009066:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2205      	movs	r2, #5
 8009072:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e0c5      	b.n	8009206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0e5      	beq.n	8009054 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0202 	bic.w	r2, r2, #2
 8009096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009098:	f7ff ff90 	bl	8008fbc <HAL_GetTick>
 800909c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800909e:	e012      	b.n	80090c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80090a0:	f7ff ff8c 	bl	8008fbc <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b0a      	cmp	r3, #10
 80090ac:	d90b      	bls.n	80090c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2205      	movs	r2, #5
 80090be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e09f      	b.n	8009206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e5      	bne.n	80090a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	7e1b      	ldrb	r3, [r3, #24]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d108      	bne.n	80090ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	e007      	b.n	80090fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	7e5b      	ldrb	r3, [r3, #25]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d108      	bne.n	8009118 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	e007      	b.n	8009128 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009126:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	7e9b      	ldrb	r3, [r3, #26]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d108      	bne.n	8009142 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f042 0220 	orr.w	r2, r2, #32
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e007      	b.n	8009152 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0220 	bic.w	r2, r2, #32
 8009150:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7edb      	ldrb	r3, [r3, #27]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d108      	bne.n	800916c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 0210 	bic.w	r2, r2, #16
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e007      	b.n	800917c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0210 	orr.w	r2, r2, #16
 800917a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7f1b      	ldrb	r3, [r3, #28]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d108      	bne.n	8009196 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0208 	orr.w	r2, r2, #8
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e007      	b.n	80091a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0208 	bic.w	r2, r2, #8
 80091a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	7f5b      	ldrb	r3, [r3, #29]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d108      	bne.n	80091c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0204 	orr.w	r2, r2, #4
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	e007      	b.n	80091d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0204 	bic.w	r2, r2, #4
 80091ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	431a      	orrs	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	ea42 0103 	orr.w	r1, r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	1e5a      	subs	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800920e:	b480      	push	{r7}
 8009210:	b087      	sub	sp, #28
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009224:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009226:	7cfb      	ldrb	r3, [r7, #19]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d003      	beq.n	8009234 <HAL_CAN_ConfigFilter+0x26>
 800922c:	7cfb      	ldrb	r3, [r7, #19]
 800922e:	2b02      	cmp	r3, #2
 8009230:	f040 80aa 	bne.w	8009388 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800923a:	f043 0201 	orr.w	r2, r3, #1
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	f003 031f 	and.w	r3, r3, #31
 800924c:	2201      	movs	r2, #1
 800924e:	fa02 f303 	lsl.w	r3, r2, r3
 8009252:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	43db      	mvns	r3, r3
 800925e:	401a      	ands	r2, r3
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d123      	bne.n	80092b6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	43db      	mvns	r3, r3
 8009278:	401a      	ands	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009290:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	3248      	adds	r2, #72	@ 0x48
 8009296:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80092aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80092ac:	6979      	ldr	r1, [r7, #20]
 80092ae:	3348      	adds	r3, #72	@ 0x48
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	440b      	add	r3, r1
 80092b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d122      	bne.n	8009304 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80092de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	3248      	adds	r2, #72	@ 0x48
 80092e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80092f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80092fa:	6979      	ldr	r1, [r7, #20]
 80092fc:	3348      	adds	r3, #72	@ 0x48
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	440b      	add	r3, r1
 8009302:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d109      	bne.n	8009320 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	43db      	mvns	r3, r3
 8009316:	401a      	ands	r2, r3
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800931e:	e007      	b.n	8009330 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	431a      	orrs	r2, r3
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d109      	bne.n	800934c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	43db      	mvns	r3, r3
 8009342:	401a      	ands	r2, r3
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800934a:	e007      	b.n	800935c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	431a      	orrs	r2, r3
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d107      	bne.n	8009374 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	431a      	orrs	r2, r3
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800937a:	f023 0201 	bic.w	r2, r3, #1
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	e006      	b.n	8009396 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
  }
}
 8009396:	4618      	mov	r0, r3
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr

080093a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d12e      	bne.n	8009412 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0201 	bic.w	r2, r2, #1
 80093ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093cc:	f7ff fdf6 	bl	8008fbc <HAL_GetTick>
 80093d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80093d2:	e012      	b.n	80093fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80093d4:	f7ff fdf2 	bl	8008fbc <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b0a      	cmp	r3, #10
 80093e0:	d90b      	bls.n	80093fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2205      	movs	r2, #5
 80093f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e012      	b.n	8009420 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e5      	bne.n	80093d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	e006      	b.n	8009420 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009416:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
  }
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009428:	b480      	push	{r7}
 800942a:	b089      	sub	sp, #36	@ 0x24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800943c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009446:	7ffb      	ldrb	r3, [r7, #31]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d003      	beq.n	8009454 <HAL_CAN_AddTxMessage+0x2c>
 800944c:	7ffb      	ldrb	r3, [r7, #31]
 800944e:	2b02      	cmp	r3, #2
 8009450:	f040 80ad 	bne.w	80095ae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10a      	bne.n	8009474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009464:	2b00      	cmp	r3, #0
 8009466:	d105      	bne.n	8009474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 8095 	beq.w	800959e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	0e1b      	lsrs	r3, r3, #24
 8009478:	f003 0303 	and.w	r3, r3, #3
 800947c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800947e:	2201      	movs	r2, #1
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	409a      	lsls	r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10d      	bne.n	80094ac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800949a:	68f9      	ldr	r1, [r7, #12]
 800949c:	6809      	ldr	r1, [r1, #0]
 800949e:	431a      	orrs	r2, r3
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	3318      	adds	r3, #24
 80094a4:	011b      	lsls	r3, r3, #4
 80094a6:	440b      	add	r3, r1
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	e00f      	b.n	80094cc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80094b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80094bc:	68f9      	ldr	r1, [r7, #12]
 80094be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80094c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	3318      	adds	r3, #24
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	440b      	add	r3, r1
 80094ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6819      	ldr	r1, [r3, #0]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	691a      	ldr	r2, [r3, #16]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	3318      	adds	r3, #24
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	440b      	add	r3, r1
 80094dc:	3304      	adds	r3, #4
 80094de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	7d1b      	ldrb	r3, [r3, #20]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d111      	bne.n	800950c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	3318      	adds	r3, #24
 80094f0:	011b      	lsls	r3, r3, #4
 80094f2:	4413      	add	r3, r2
 80094f4:	3304      	adds	r3, #4
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	6811      	ldr	r1, [r2, #0]
 80094fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	3318      	adds	r3, #24
 8009504:	011b      	lsls	r3, r3, #4
 8009506:	440b      	add	r3, r1
 8009508:	3304      	adds	r3, #4
 800950a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3307      	adds	r3, #7
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	061a      	lsls	r2, r3, #24
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3306      	adds	r3, #6
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	041b      	lsls	r3, r3, #16
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3305      	adds	r3, #5
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	021b      	lsls	r3, r3, #8
 8009526:	4313      	orrs	r3, r2
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	3204      	adds	r2, #4
 800952c:	7812      	ldrb	r2, [r2, #0]
 800952e:	4610      	mov	r0, r2
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	6811      	ldr	r1, [r2, #0]
 8009534:	ea43 0200 	orr.w	r2, r3, r0
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	440b      	add	r3, r1
 800953e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8009542:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	3303      	adds	r3, #3
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	061a      	lsls	r2, r3, #24
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3302      	adds	r3, #2
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	041b      	lsls	r3, r3, #16
 8009554:	431a      	orrs	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3301      	adds	r3, #1
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	021b      	lsls	r3, r3, #8
 800955e:	4313      	orrs	r3, r2
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7812      	ldrb	r2, [r2, #0]
 8009564:	4610      	mov	r0, r2
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	6811      	ldr	r1, [r2, #0]
 800956a:	ea43 0200 	orr.w	r2, r3, r0
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	440b      	add	r3, r1
 8009574:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8009578:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	3318      	adds	r3, #24
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	4413      	add	r3, r2
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	6811      	ldr	r1, [r2, #0]
 800958c:	f043 0201 	orr.w	r2, r3, #1
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3318      	adds	r3, #24
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	440b      	add	r3, r1
 8009598:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	e00e      	b.n	80095bc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e006      	b.n	80095bc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
  }
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3724      	adds	r7, #36	@ 0x24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b085      	sub	sp, #20
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095da:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d002      	beq.n	80095e8 <HAL_CAN_IsTxMessagePending+0x22>
 80095e2:	7afb      	ldrb	r3, [r7, #11]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d10b      	bne.n	8009600 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	069b      	lsls	r3, r3, #26
 80095f2:	401a      	ands	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	069b      	lsls	r3, r3, #26
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d001      	beq.n	8009600 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80095fc:	2301      	movs	r3, #1
 80095fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8009600:	68fb      	ldr	r3, [r7, #12]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr

0800960c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009620:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d003      	beq.n	8009630 <HAL_CAN_GetRxMessage+0x24>
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	2b02      	cmp	r3, #2
 800962c:	f040 8103 	bne.w	8009836 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10e      	bne.n	8009654 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f003 0303 	and.w	r3, r3, #3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d116      	bne.n	8009672 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009648:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e0f7      	b.n	8009844 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d107      	bne.n	8009672 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009666:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e0e8      	b.n	8009844 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	331b      	adds	r3, #27
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	4413      	add	r3, r2
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0204 	and.w	r2, r3, #4
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10c      	bne.n	80096aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	331b      	adds	r3, #27
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	4413      	add	r3, r2
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	0d5b      	lsrs	r3, r3, #21
 80096a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	e00b      	b.n	80096c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	331b      	adds	r3, #27
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	4413      	add	r3, r2
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	08db      	lsrs	r3, r3, #3
 80096ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	331b      	adds	r3, #27
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	4413      	add	r3, r2
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0202 	and.w	r2, r3, #2
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	331b      	adds	r3, #27
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	4413      	add	r3, r2
 80096e4:	3304      	adds	r3, #4
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2208      	movs	r2, #8
 80096f4:	611a      	str	r2, [r3, #16]
 80096f6:	e00b      	b.n	8009710 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	331b      	adds	r3, #27
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	4413      	add	r3, r2
 8009704:	3304      	adds	r3, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 020f 	and.w	r2, r3, #15
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	331b      	adds	r3, #27
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	4413      	add	r3, r2
 800971c:	3304      	adds	r3, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	0a1b      	lsrs	r3, r3, #8
 8009722:	b2da      	uxtb	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	331b      	adds	r3, #27
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	4413      	add	r3, r2
 8009734:	3304      	adds	r3, #4
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	0c1b      	lsrs	r3, r3, #16
 800973a:	b29a      	uxth	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	011b      	lsls	r3, r3, #4
 8009748:	4413      	add	r3, r2
 800974a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	b2da      	uxtb	r2, r3
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	4413      	add	r3, r2
 8009760:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	0a1a      	lsrs	r2, r3, #8
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	3301      	adds	r3, #1
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	4413      	add	r3, r2
 800977a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	0c1a      	lsrs	r2, r3, #16
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	3302      	adds	r3, #2
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	4413      	add	r3, r2
 8009794:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	0e1a      	lsrs	r2, r3, #24
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	3303      	adds	r3, #3
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	3304      	adds	r3, #4
 80097b8:	b2d2      	uxtb	r2, r2
 80097ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	0a1a      	lsrs	r2, r3, #8
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	3305      	adds	r3, #5
 80097d2:	b2d2      	uxtb	r2, r2
 80097d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	4413      	add	r3, r2
 80097e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	0c1a      	lsrs	r2, r3, #16
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	3306      	adds	r3, #6
 80097ec:	b2d2      	uxtb	r2, r2
 80097ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	0e1a      	lsrs	r2, r3, #24
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	3307      	adds	r3, #7
 8009806:	b2d2      	uxtb	r2, r2
 8009808:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d108      	bne.n	8009822 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f042 0220 	orr.w	r2, r2, #32
 800981e:	60da      	str	r2, [r3, #12]
 8009820:	e007      	b.n	8009832 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0220 	orr.w	r2, r2, #32
 8009830:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e006      	b.n	8009844 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
  }
}
 8009844:	4618      	mov	r0, r3
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	bc80      	pop	{r7}
 800984c:	4770      	bx	lr

0800984e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800985e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d002      	beq.n	800986c <HAL_CAN_ActivateNotification+0x1e>
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d109      	bne.n	8009880 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6959      	ldr	r1, [r3, #20]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	e006      	b.n	800988e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009884:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
  }
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr

08009898 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	@ 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d07c      	beq.n	80099d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d023      	beq.n	8009930 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2201      	movs	r2, #1
 80098ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f983 	bl	8009c06 <HAL_CAN_TxMailbox0CompleteCallback>
 8009900:	e016      	b.n	8009930 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009912:	627b      	str	r3, [r7, #36]	@ 0x24
 8009914:	e00c      	b.n	8009930 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f003 0308 	and.w	r3, r3, #8
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009922:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009926:	627b      	str	r3, [r7, #36]	@ 0x24
 8009928:	e002      	b.n	8009930 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f986 	bl	8009c3c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009936:	2b00      	cmp	r3, #0
 8009938:	d024      	beq.n	8009984 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009942:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f962 	bl	8009c18 <HAL_CAN_TxMailbox1CompleteCallback>
 8009954:	e016      	b.n	8009984 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009966:	627b      	str	r3, [r7, #36]	@ 0x24
 8009968:	e00c      	b.n	8009984 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800997a:	627b      	str	r3, [r7, #36]	@ 0x24
 800997c:	e002      	b.n	8009984 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f965 	bl	8009c4e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d024      	beq.n	80099d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009996:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f941 	bl	8009c2a <HAL_CAN_TxMailbox2CompleteCallback>
 80099a8:	e016      	b.n	80099d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d004      	beq.n	80099be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80099bc:	e00c      	b.n	80099d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80099d0:	e002      	b.n	80099d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f944 	bl	8009c60 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	f003 0308 	and.w	r3, r3, #8
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00c      	beq.n	80099fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f003 0310 	and.w	r3, r3, #16
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d007      	beq.n	80099fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80099f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2210      	movs	r2, #16
 80099fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00b      	beq.n	8009a1e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d006      	beq.n	8009a1e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2208      	movs	r2, #8
 8009a16:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f92a 	bl	8009c72 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d009      	beq.n	8009a3c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7fe fe5a 	bl	80086f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00c      	beq.n	8009a60 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d007      	beq.n	8009a60 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009a56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2210      	movs	r2, #16
 8009a5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00b      	beq.n	8009a82 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f003 0308 	and.w	r3, r3, #8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d006      	beq.n	8009a82 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2208      	movs	r2, #8
 8009a7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f90a 	bl	8009c96 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	f003 0310 	and.w	r3, r3, #16
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f8f2 	bl	8009c84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00b      	beq.n	8009ac2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	f003 0310 	and.w	r3, r3, #16
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d006      	beq.n	8009ac2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2210      	movs	r2, #16
 8009aba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f8f3 	bl	8009ca8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	f003 0308 	and.w	r3, r3, #8
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d006      	beq.n	8009ae4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2208      	movs	r2, #8
 8009adc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f8eb 	bl	8009cba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d07b      	beq.n	8009be6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d072      	beq.n	8009bde <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d008      	beq.n	8009b14 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0e:	f043 0301 	orr.w	r3, r3, #1
 8009b12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d008      	beq.n	8009b30 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	f043 0302 	orr.w	r3, r3, #2
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d008      	beq.n	8009b4c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b46:	f043 0304 	orr.w	r3, r3, #4
 8009b4a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d043      	beq.n	8009bde <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d03e      	beq.n	8009bde <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b66:	2b60      	cmp	r3, #96	@ 0x60
 8009b68:	d02b      	beq.n	8009bc2 <HAL_CAN_IRQHandler+0x32a>
 8009b6a:	2b60      	cmp	r3, #96	@ 0x60
 8009b6c:	d82e      	bhi.n	8009bcc <HAL_CAN_IRQHandler+0x334>
 8009b6e:	2b50      	cmp	r3, #80	@ 0x50
 8009b70:	d022      	beq.n	8009bb8 <HAL_CAN_IRQHandler+0x320>
 8009b72:	2b50      	cmp	r3, #80	@ 0x50
 8009b74:	d82a      	bhi.n	8009bcc <HAL_CAN_IRQHandler+0x334>
 8009b76:	2b40      	cmp	r3, #64	@ 0x40
 8009b78:	d019      	beq.n	8009bae <HAL_CAN_IRQHandler+0x316>
 8009b7a:	2b40      	cmp	r3, #64	@ 0x40
 8009b7c:	d826      	bhi.n	8009bcc <HAL_CAN_IRQHandler+0x334>
 8009b7e:	2b30      	cmp	r3, #48	@ 0x30
 8009b80:	d010      	beq.n	8009ba4 <HAL_CAN_IRQHandler+0x30c>
 8009b82:	2b30      	cmp	r3, #48	@ 0x30
 8009b84:	d822      	bhi.n	8009bcc <HAL_CAN_IRQHandler+0x334>
 8009b86:	2b10      	cmp	r3, #16
 8009b88:	d002      	beq.n	8009b90 <HAL_CAN_IRQHandler+0x2f8>
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d005      	beq.n	8009b9a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009b8e:	e01d      	b.n	8009bcc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	f043 0308 	orr.w	r3, r3, #8
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009b98:	e019      	b.n	8009bce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	f043 0310 	orr.w	r3, r3, #16
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009ba2:	e014      	b.n	8009bce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	f043 0320 	orr.w	r3, r3, #32
 8009baa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009bac:	e00f      	b.n	8009bce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009bb6:	e00a      	b.n	8009bce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009bc0:	e005      	b.n	8009bce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009bca:	e000      	b.n	8009bce <HAL_CAN_IRQHandler+0x336>
            break;
 8009bcc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009bdc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2204      	movs	r2, #4
 8009be4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d008      	beq.n	8009bfe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f867 	bl	8009ccc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009bfe:	bf00      	nop
 8009c00:	3728      	adds	r7, #40	@ 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr

08009c18 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr

08009c2a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bc80      	pop	{r7}
 8009c3a:	4770      	bx	lr

08009c3c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bc80      	pop	{r7}
 8009c4c:	4770      	bx	lr

08009c4e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bc80      	pop	{r7}
 8009c5e:	4770      	bx	lr

08009c60 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bc80      	pop	{r7}
 8009c70:	4770      	bx	lr

08009c72 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr

08009c84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr

08009c96 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bc80      	pop	{r7}
 8009ca6:	4770      	bx	lr

08009ca8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bc80      	pop	{r7}
 8009cb8:	4770      	bx	lr

08009cba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009cc2:	bf00      	nop
 8009cc4:	370c      	adds	r7, #12
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bc80      	pop	{r7}
 8009cca:	4770      	bx	lr

08009ccc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bc80      	pop	{r7}
 8009cdc:	4770      	bx	lr
	...

08009ce0 <__NVIC_SetPriorityGrouping>:
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d24 <__NVIC_SetPriorityGrouping+0x44>)
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d12:	4a04      	ldr	r2, [pc, #16]	@ (8009d24 <__NVIC_SetPriorityGrouping+0x44>)
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	60d3      	str	r3, [r2, #12]
}
 8009d18:	bf00      	nop
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bc80      	pop	{r7}
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	e000ed00 	.word	0xe000ed00

08009d28 <__NVIC_GetPriorityGrouping>:
{
 8009d28:	b480      	push	{r7}
 8009d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d2c:	4b04      	ldr	r3, [pc, #16]	@ (8009d40 <__NVIC_GetPriorityGrouping+0x18>)
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	0a1b      	lsrs	r3, r3, #8
 8009d32:	f003 0307 	and.w	r3, r3, #7
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bc80      	pop	{r7}
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	e000ed00 	.word	0xe000ed00

08009d44 <__NVIC_EnableIRQ>:
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	db0b      	blt.n	8009d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	f003 021f 	and.w	r2, r3, #31
 8009d5c:	4906      	ldr	r1, [pc, #24]	@ (8009d78 <__NVIC_EnableIRQ+0x34>)
 8009d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d62:	095b      	lsrs	r3, r3, #5
 8009d64:	2001      	movs	r0, #1
 8009d66:	fa00 f202 	lsl.w	r2, r0, r2
 8009d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr
 8009d78:	e000e100 	.word	0xe000e100

08009d7c <__NVIC_SetPriority>:
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	6039      	str	r1, [r7, #0]
 8009d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	db0a      	blt.n	8009da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	490c      	ldr	r1, [pc, #48]	@ (8009dc8 <__NVIC_SetPriority+0x4c>)
 8009d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d9a:	0112      	lsls	r2, r2, #4
 8009d9c:	b2d2      	uxtb	r2, r2
 8009d9e:	440b      	add	r3, r1
 8009da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009da4:	e00a      	b.n	8009dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4908      	ldr	r1, [pc, #32]	@ (8009dcc <__NVIC_SetPriority+0x50>)
 8009dac:	79fb      	ldrb	r3, [r7, #7]
 8009dae:	f003 030f 	and.w	r3, r3, #15
 8009db2:	3b04      	subs	r3, #4
 8009db4:	0112      	lsls	r2, r2, #4
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	440b      	add	r3, r1
 8009dba:	761a      	strb	r2, [r3, #24]
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	e000e100 	.word	0xe000e100
 8009dcc:	e000ed00 	.word	0xe000ed00

08009dd0 <NVIC_EncodePriority>:
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b089      	sub	sp, #36	@ 0x24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f003 0307 	and.w	r3, r3, #7
 8009de2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	f1c3 0307 	rsb	r3, r3, #7
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	bf28      	it	cs
 8009dee:	2304      	movcs	r3, #4
 8009df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	3304      	adds	r3, #4
 8009df6:	2b06      	cmp	r3, #6
 8009df8:	d902      	bls.n	8009e00 <NVIC_EncodePriority+0x30>
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	3b03      	subs	r3, #3
 8009dfe:	e000      	b.n	8009e02 <NVIC_EncodePriority+0x32>
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e04:	f04f 32ff 	mov.w	r2, #4294967295
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0e:	43da      	mvns	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	401a      	ands	r2, r3
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e18:	f04f 31ff 	mov.w	r1, #4294967295
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e22:	43d9      	mvns	r1, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e28:	4313      	orrs	r3, r2
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3724      	adds	r7, #36	@ 0x24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e44:	d301      	bcc.n	8009e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e46:	2301      	movs	r3, #1
 8009e48:	e00f      	b.n	8009e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009e74 <SysTick_Config+0x40>)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e52:	210f      	movs	r1, #15
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	f7ff ff90 	bl	8009d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e5c:	4b05      	ldr	r3, [pc, #20]	@ (8009e74 <SysTick_Config+0x40>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009e62:	4b04      	ldr	r3, [pc, #16]	@ (8009e74 <SysTick_Config+0x40>)
 8009e64:	2207      	movs	r2, #7
 8009e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	e000e010 	.word	0xe000e010

08009e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff ff2d 	bl	8009ce0 <__NVIC_SetPriorityGrouping>
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b086      	sub	sp, #24
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	4603      	mov	r3, r0
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ea0:	f7ff ff42 	bl	8009d28 <__NVIC_GetPriorityGrouping>
 8009ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	6978      	ldr	r0, [r7, #20]
 8009eac:	f7ff ff90 	bl	8009dd0 <NVIC_EncodePriority>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff ff5f 	bl	8009d7c <__NVIC_SetPriority>
}
 8009ebe:	bf00      	nop
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	4603      	mov	r3, r0
 8009ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff ff35 	bl	8009d44 <__NVIC_EnableIRQ>
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff ffa2 	bl	8009e34 <SysTick_Config>
 8009ef0:	4603      	mov	r3, r0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f16:	4b2f      	ldr	r3, [pc, #188]	@ (8009fd4 <HAL_FLASH_Program+0xd8>)
 8009f18:	7e1b      	ldrb	r3, [r3, #24]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d101      	bne.n	8009f22 <HAL_FLASH_Program+0x26>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	e054      	b.n	8009fcc <HAL_FLASH_Program+0xd0>
 8009f22:	4b2c      	ldr	r3, [pc, #176]	@ (8009fd4 <HAL_FLASH_Program+0xd8>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009f28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009f2c:	f000 f8a8 	bl	800a080 <FLASH_WaitForLastOperation>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d144      	bne.n	8009fc4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d102      	bne.n	8009f46 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8009f40:	2301      	movs	r3, #1
 8009f42:	757b      	strb	r3, [r7, #21]
 8009f44:	e007      	b.n	8009f56 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d102      	bne.n	8009f52 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	757b      	strb	r3, [r7, #21]
 8009f50:	e001      	b.n	8009f56 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8009f52:	2304      	movs	r3, #4
 8009f54:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8009f56:	2300      	movs	r3, #0
 8009f58:	75bb      	strb	r3, [r7, #22]
 8009f5a:	e02d      	b.n	8009fb8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009f5c:	7dbb      	ldrb	r3, [r7, #22]
 8009f5e:	005a      	lsls	r2, r3, #1
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	eb02 0c03 	add.w	ip, r2, r3
 8009f66:	7dbb      	ldrb	r3, [r7, #22]
 8009f68:	0119      	lsls	r1, r3, #4
 8009f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6e:	f1c1 0620 	rsb	r6, r1, #32
 8009f72:	f1a1 0020 	sub.w	r0, r1, #32
 8009f76:	fa22 f401 	lsr.w	r4, r2, r1
 8009f7a:	fa03 f606 	lsl.w	r6, r3, r6
 8009f7e:	4334      	orrs	r4, r6
 8009f80:	fa23 f000 	lsr.w	r0, r3, r0
 8009f84:	4304      	orrs	r4, r0
 8009f86:	fa23 f501 	lsr.w	r5, r3, r1
 8009f8a:	b2a3      	uxth	r3, r4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4660      	mov	r0, ip
 8009f90:	f000 f85a 	bl	800a048 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009f94:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009f98:	f000 f872 	bl	800a080 <FLASH_WaitForLastOperation>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd8 <HAL_FLASH_Program+0xdc>)
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8009fd8 <HAL_FLASH_Program+0xdc>)
 8009fa6:	f023 0301 	bic.w	r3, r3, #1
 8009faa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d107      	bne.n	8009fc2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8009fb2:	7dbb      	ldrb	r3, [r7, #22]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	75bb      	strb	r3, [r7, #22]
 8009fb8:	7dba      	ldrb	r2, [r7, #22]
 8009fba:	7d7b      	ldrb	r3, [r7, #21]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d3cd      	bcc.n	8009f5c <HAL_FLASH_Program+0x60>
 8009fc0:	e000      	b.n	8009fc4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8009fc2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009fc4:	4b03      	ldr	r3, [pc, #12]	@ (8009fd4 <HAL_FLASH_Program+0xd8>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	761a      	strb	r2, [r3, #24]

  return status;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	371c      	adds	r7, #28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd4:	20004908 	.word	0x20004908
 8009fd8:	40022000 	.word	0x40022000

08009fdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800a01c <HAL_FLASH_Unlock+0x40>)
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00d      	beq.n	800a00e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800a01c <HAL_FLASH_Unlock+0x40>)
 8009ff4:	4a0a      	ldr	r2, [pc, #40]	@ (800a020 <HAL_FLASH_Unlock+0x44>)
 8009ff6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009ff8:	4b08      	ldr	r3, [pc, #32]	@ (800a01c <HAL_FLASH_Unlock+0x40>)
 8009ffa:	4a0a      	ldr	r2, [pc, #40]	@ (800a024 <HAL_FLASH_Unlock+0x48>)
 8009ffc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009ffe:	4b07      	ldr	r3, [pc, #28]	@ (800a01c <HAL_FLASH_Unlock+0x40>)
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800a00e:	79fb      	ldrb	r3, [r7, #7]
}
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	bc80      	pop	{r7}
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	40022000 	.word	0x40022000
 800a020:	45670123 	.word	0x45670123
 800a024:	cdef89ab 	.word	0xcdef89ab

0800a028 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a028:	b480      	push	{r7}
 800a02a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a02c:	4b05      	ldr	r3, [pc, #20]	@ (800a044 <HAL_FLASH_Lock+0x1c>)
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	4a04      	ldr	r2, [pc, #16]	@ (800a044 <HAL_FLASH_Lock+0x1c>)
 800a032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a036:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	40022000 	.word	0x40022000

0800a048 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a054:	4b08      	ldr	r3, [pc, #32]	@ (800a078 <FLASH_Program_HalfWord+0x30>)
 800a056:	2200      	movs	r2, #0
 800a058:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a05a:	4b08      	ldr	r3, [pc, #32]	@ (800a07c <FLASH_Program_HalfWord+0x34>)
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	4a07      	ldr	r2, [pc, #28]	@ (800a07c <FLASH_Program_HalfWord+0x34>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	887a      	ldrh	r2, [r7, #2]
 800a06a:	801a      	strh	r2, [r3, #0]
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20004908 	.word	0x20004908
 800a07c:	40022000 	.word	0x40022000

0800a080 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800a088:	f7fe ff98 	bl	8008fbc <HAL_GetTick>
 800a08c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a08e:	e010      	b.n	800a0b2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	d00c      	beq.n	800a0b2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <FLASH_WaitForLastOperation+0x2e>
 800a09e:	f7fe ff8d 	bl	8008fbc <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d201      	bcs.n	800a0b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e025      	b.n	800a0fe <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a0b2:	4b15      	ldr	r3, [pc, #84]	@ (800a108 <FLASH_WaitForLastOperation+0x88>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e8      	bne.n	800a090 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a0be:	4b12      	ldr	r3, [pc, #72]	@ (800a108 <FLASH_WaitForLastOperation+0x88>)
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a0ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a108 <FLASH_WaitForLastOperation+0x88>)
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a0d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a108 <FLASH_WaitForLastOperation+0x88>)
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f003 0310 	and.w	r3, r3, #16
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a108 <FLASH_WaitForLastOperation+0x88>)
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d105      	bne.n	800a0f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a0e8:	4b07      	ldr	r3, [pc, #28]	@ (800a108 <FLASH_WaitForLastOperation+0x88>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d003      	beq.n	800a0fc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a0f4:	f000 f80a 	bl	800a10c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e000      	b.n	800a0fe <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	40022000 	.word	0x40022000

0800a10c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a116:	4b23      	ldr	r3, [pc, #140]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f003 0310 	and.w	r3, r3, #16
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d009      	beq.n	800a136 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a122:	4b21      	ldr	r3, [pc, #132]	@ (800a1a8 <FLASH_SetErrorCode+0x9c>)
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	f043 0302 	orr.w	r3, r3, #2
 800a12a:	4a1f      	ldr	r2, [pc, #124]	@ (800a1a8 <FLASH_SetErrorCode+0x9c>)
 800a12c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f043 0310 	orr.w	r3, r3, #16
 800a134:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a136:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	f003 0304 	and.w	r3, r3, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d009      	beq.n	800a156 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a142:	4b19      	ldr	r3, [pc, #100]	@ (800a1a8 <FLASH_SetErrorCode+0x9c>)
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	f043 0301 	orr.w	r3, r3, #1
 800a14a:	4a17      	ldr	r2, [pc, #92]	@ (800a1a8 <FLASH_SetErrorCode+0x9c>)
 800a14c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f043 0304 	orr.w	r3, r3, #4
 800a154:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a156:	4b13      	ldr	r3, [pc, #76]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a162:	4b11      	ldr	r3, [pc, #68]	@ (800a1a8 <FLASH_SetErrorCode+0x9c>)
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	f043 0304 	orr.w	r3, r3, #4
 800a16a:	4a0f      	ldr	r2, [pc, #60]	@ (800a1a8 <FLASH_SetErrorCode+0x9c>)
 800a16c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a16e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a174:	f023 0301 	bic.w	r3, r3, #1
 800a178:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f240 1201 	movw	r2, #257	@ 0x101
 800a180:	4293      	cmp	r3, r2
 800a182:	d106      	bne.n	800a192 <FLASH_SetErrorCode+0x86>
 800a184:	4b07      	ldr	r3, [pc, #28]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a186:	69db      	ldr	r3, [r3, #28]
 800a188:	4a06      	ldr	r2, [pc, #24]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a18a:	f023 0301 	bic.w	r3, r3, #1
 800a18e:	61d3      	str	r3, [r2, #28]
}  
 800a190:	e002      	b.n	800a198 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a192:	4a04      	ldr	r2, [pc, #16]	@ (800a1a4 <FLASH_SetErrorCode+0x98>)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	60d3      	str	r3, [r2, #12]
}  
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40022000 	.word	0x40022000
 800a1a8:	20004908 	.word	0x20004908

0800a1ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a1be:	4b2f      	ldr	r3, [pc, #188]	@ (800a27c <HAL_FLASHEx_Erase+0xd0>)
 800a1c0:	7e1b      	ldrb	r3, [r3, #24]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d101      	bne.n	800a1ca <HAL_FLASHEx_Erase+0x1e>
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e053      	b.n	800a272 <HAL_FLASHEx_Erase+0xc6>
 800a1ca:	4b2c      	ldr	r3, [pc, #176]	@ (800a27c <HAL_FLASHEx_Erase+0xd0>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d116      	bne.n	800a206 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a1d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a1dc:	f7ff ff50 	bl	800a080 <FLASH_WaitForLastOperation>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d141      	bne.n	800a26a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800a1e6:	2001      	movs	r0, #1
 800a1e8:	f000 f84c 	bl	800a284 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a1f0:	f7ff ff46 	bl	800a080 <FLASH_WaitForLastOperation>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800a1f8:	4b21      	ldr	r3, [pc, #132]	@ (800a280 <HAL_FLASHEx_Erase+0xd4>)
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	4a20      	ldr	r2, [pc, #128]	@ (800a280 <HAL_FLASHEx_Erase+0xd4>)
 800a1fe:	f023 0304 	bic.w	r3, r3, #4
 800a202:	6113      	str	r3, [r2, #16]
 800a204:	e031      	b.n	800a26a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a206:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a20a:	f7ff ff39 	bl	800a080 <FLASH_WaitForLastOperation>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d12a      	bne.n	800a26a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	f04f 32ff 	mov.w	r2, #4294967295
 800a21a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	60bb      	str	r3, [r7, #8]
 800a222:	e019      	b.n	800a258 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800a224:	68b8      	ldr	r0, [r7, #8]
 800a226:	f000 f849 	bl	800a2bc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a22a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a22e:	f7ff ff27 	bl	800a080 <FLASH_WaitForLastOperation>
 800a232:	4603      	mov	r3, r0
 800a234:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a236:	4b12      	ldr	r3, [pc, #72]	@ (800a280 <HAL_FLASHEx_Erase+0xd4>)
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	4a11      	ldr	r2, [pc, #68]	@ (800a280 <HAL_FLASHEx_Erase+0xd4>)
 800a23c:	f023 0302 	bic.w	r3, r3, #2
 800a240:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d003      	beq.n	800a250 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	601a      	str	r2, [r3, #0]
            break;
 800a24e:	e00c      	b.n	800a26a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a256:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	029a      	lsls	r2, r3, #10
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	4413      	add	r3, r2
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	429a      	cmp	r2, r3
 800a268:	d3dc      	bcc.n	800a224 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a26a:	4b04      	ldr	r3, [pc, #16]	@ (800a27c <HAL_FLASHEx_Erase+0xd0>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	761a      	strb	r2, [r3, #24]

  return status;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20004908 	.word	0x20004908
 800a280:	40022000 	.word	0x40022000

0800a284 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a28c:	4b09      	ldr	r3, [pc, #36]	@ (800a2b4 <FLASH_MassErase+0x30>)
 800a28e:	2200      	movs	r2, #0
 800a290:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a292:	4b09      	ldr	r3, [pc, #36]	@ (800a2b8 <FLASH_MassErase+0x34>)
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	4a08      	ldr	r2, [pc, #32]	@ (800a2b8 <FLASH_MassErase+0x34>)
 800a298:	f043 0304 	orr.w	r3, r3, #4
 800a29c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a29e:	4b06      	ldr	r3, [pc, #24]	@ (800a2b8 <FLASH_MassErase+0x34>)
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	4a05      	ldr	r2, [pc, #20]	@ (800a2b8 <FLASH_MassErase+0x34>)
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bc80      	pop	{r7}
 800a2b2:	4770      	bx	lr
 800a2b4:	20004908 	.word	0x20004908
 800a2b8:	40022000 	.word	0x40022000

0800a2bc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f4 <FLASH_PageErase+0x38>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f8 <FLASH_PageErase+0x3c>)
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a2f8 <FLASH_PageErase+0x3c>)
 800a2d0:	f043 0302 	orr.w	r3, r3, #2
 800a2d4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800a2d6:	4a08      	ldr	r2, [pc, #32]	@ (800a2f8 <FLASH_PageErase+0x3c>)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a2dc:	4b06      	ldr	r3, [pc, #24]	@ (800a2f8 <FLASH_PageErase+0x3c>)
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	4a05      	ldr	r2, [pc, #20]	@ (800a2f8 <FLASH_PageErase+0x3c>)
 800a2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2e6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20004908 	.word	0x20004908
 800a2f8:	40022000 	.word	0x40022000

0800a2fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b08b      	sub	sp, #44	@ 0x2c
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a306:	2300      	movs	r3, #0
 800a308:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a30a:	2300      	movs	r3, #0
 800a30c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a30e:	e169      	b.n	800a5e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a310:	2201      	movs	r2, #1
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	fa02 f303 	lsl.w	r3, r2, r3
 800a318:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	4013      	ands	r3, r2
 800a322:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	429a      	cmp	r2, r3
 800a32a:	f040 8158 	bne.w	800a5de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	4a9a      	ldr	r2, [pc, #616]	@ (800a59c <HAL_GPIO_Init+0x2a0>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d05e      	beq.n	800a3f6 <HAL_GPIO_Init+0xfa>
 800a338:	4a98      	ldr	r2, [pc, #608]	@ (800a59c <HAL_GPIO_Init+0x2a0>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d875      	bhi.n	800a42a <HAL_GPIO_Init+0x12e>
 800a33e:	4a98      	ldr	r2, [pc, #608]	@ (800a5a0 <HAL_GPIO_Init+0x2a4>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d058      	beq.n	800a3f6 <HAL_GPIO_Init+0xfa>
 800a344:	4a96      	ldr	r2, [pc, #600]	@ (800a5a0 <HAL_GPIO_Init+0x2a4>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d86f      	bhi.n	800a42a <HAL_GPIO_Init+0x12e>
 800a34a:	4a96      	ldr	r2, [pc, #600]	@ (800a5a4 <HAL_GPIO_Init+0x2a8>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d052      	beq.n	800a3f6 <HAL_GPIO_Init+0xfa>
 800a350:	4a94      	ldr	r2, [pc, #592]	@ (800a5a4 <HAL_GPIO_Init+0x2a8>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d869      	bhi.n	800a42a <HAL_GPIO_Init+0x12e>
 800a356:	4a94      	ldr	r2, [pc, #592]	@ (800a5a8 <HAL_GPIO_Init+0x2ac>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d04c      	beq.n	800a3f6 <HAL_GPIO_Init+0xfa>
 800a35c:	4a92      	ldr	r2, [pc, #584]	@ (800a5a8 <HAL_GPIO_Init+0x2ac>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d863      	bhi.n	800a42a <HAL_GPIO_Init+0x12e>
 800a362:	4a92      	ldr	r2, [pc, #584]	@ (800a5ac <HAL_GPIO_Init+0x2b0>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d046      	beq.n	800a3f6 <HAL_GPIO_Init+0xfa>
 800a368:	4a90      	ldr	r2, [pc, #576]	@ (800a5ac <HAL_GPIO_Init+0x2b0>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d85d      	bhi.n	800a42a <HAL_GPIO_Init+0x12e>
 800a36e:	2b12      	cmp	r3, #18
 800a370:	d82a      	bhi.n	800a3c8 <HAL_GPIO_Init+0xcc>
 800a372:	2b12      	cmp	r3, #18
 800a374:	d859      	bhi.n	800a42a <HAL_GPIO_Init+0x12e>
 800a376:	a201      	add	r2, pc, #4	@ (adr r2, 800a37c <HAL_GPIO_Init+0x80>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a3f7 	.word	0x0800a3f7
 800a380:	0800a3d1 	.word	0x0800a3d1
 800a384:	0800a3e3 	.word	0x0800a3e3
 800a388:	0800a425 	.word	0x0800a425
 800a38c:	0800a42b 	.word	0x0800a42b
 800a390:	0800a42b 	.word	0x0800a42b
 800a394:	0800a42b 	.word	0x0800a42b
 800a398:	0800a42b 	.word	0x0800a42b
 800a39c:	0800a42b 	.word	0x0800a42b
 800a3a0:	0800a42b 	.word	0x0800a42b
 800a3a4:	0800a42b 	.word	0x0800a42b
 800a3a8:	0800a42b 	.word	0x0800a42b
 800a3ac:	0800a42b 	.word	0x0800a42b
 800a3b0:	0800a42b 	.word	0x0800a42b
 800a3b4:	0800a42b 	.word	0x0800a42b
 800a3b8:	0800a42b 	.word	0x0800a42b
 800a3bc:	0800a42b 	.word	0x0800a42b
 800a3c0:	0800a3d9 	.word	0x0800a3d9
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	4a79      	ldr	r2, [pc, #484]	@ (800a5b0 <HAL_GPIO_Init+0x2b4>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d013      	beq.n	800a3f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a3ce:	e02c      	b.n	800a42a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	623b      	str	r3, [r7, #32]
          break;
 800a3d6:	e029      	b.n	800a42c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	623b      	str	r3, [r7, #32]
          break;
 800a3e0:	e024      	b.n	800a42c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	623b      	str	r3, [r7, #32]
          break;
 800a3ea:	e01f      	b.n	800a42c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	330c      	adds	r3, #12
 800a3f2:	623b      	str	r3, [r7, #32]
          break;
 800a3f4:	e01a      	b.n	800a42c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d102      	bne.n	800a404 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a3fe:	2304      	movs	r3, #4
 800a400:	623b      	str	r3, [r7, #32]
          break;
 800a402:	e013      	b.n	800a42c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d105      	bne.n	800a418 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a40c:	2308      	movs	r3, #8
 800a40e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	611a      	str	r2, [r3, #16]
          break;
 800a416:	e009      	b.n	800a42c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a418:	2308      	movs	r3, #8
 800a41a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	69fa      	ldr	r2, [r7, #28]
 800a420:	615a      	str	r2, [r3, #20]
          break;
 800a422:	e003      	b.n	800a42c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a424:	2300      	movs	r3, #0
 800a426:	623b      	str	r3, [r7, #32]
          break;
 800a428:	e000      	b.n	800a42c <HAL_GPIO_Init+0x130>
          break;
 800a42a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	2bff      	cmp	r3, #255	@ 0xff
 800a430:	d801      	bhi.n	800a436 <HAL_GPIO_Init+0x13a>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	e001      	b.n	800a43a <HAL_GPIO_Init+0x13e>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3304      	adds	r3, #4
 800a43a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	2bff      	cmp	r3, #255	@ 0xff
 800a440:	d802      	bhi.n	800a448 <HAL_GPIO_Init+0x14c>
 800a442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	e002      	b.n	800a44e <HAL_GPIO_Init+0x152>
 800a448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44a:	3b08      	subs	r3, #8
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	210f      	movs	r1, #15
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	fa01 f303 	lsl.w	r3, r1, r3
 800a45c:	43db      	mvns	r3, r3
 800a45e:	401a      	ands	r2, r3
 800a460:	6a39      	ldr	r1, [r7, #32]
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	fa01 f303 	lsl.w	r3, r1, r3
 800a468:	431a      	orrs	r2, r3
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 80b1 	beq.w	800a5de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a47c:	4b4d      	ldr	r3, [pc, #308]	@ (800a5b4 <HAL_GPIO_Init+0x2b8>)
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	4a4c      	ldr	r2, [pc, #304]	@ (800a5b4 <HAL_GPIO_Init+0x2b8>)
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	6193      	str	r3, [r2, #24]
 800a488:	4b4a      	ldr	r3, [pc, #296]	@ (800a5b4 <HAL_GPIO_Init+0x2b8>)
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	60bb      	str	r3, [r7, #8]
 800a492:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a494:	4a48      	ldr	r2, [pc, #288]	@ (800a5b8 <HAL_GPIO_Init+0x2bc>)
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	089b      	lsrs	r3, r3, #2
 800a49a:	3302      	adds	r3, #2
 800a49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	f003 0303 	and.w	r3, r3, #3
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	220f      	movs	r2, #15
 800a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a40      	ldr	r2, [pc, #256]	@ (800a5bc <HAL_GPIO_Init+0x2c0>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d013      	beq.n	800a4e8 <HAL_GPIO_Init+0x1ec>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a3f      	ldr	r2, [pc, #252]	@ (800a5c0 <HAL_GPIO_Init+0x2c4>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00d      	beq.n	800a4e4 <HAL_GPIO_Init+0x1e8>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a3e      	ldr	r2, [pc, #248]	@ (800a5c4 <HAL_GPIO_Init+0x2c8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <HAL_GPIO_Init+0x1e4>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a3d      	ldr	r2, [pc, #244]	@ (800a5c8 <HAL_GPIO_Init+0x2cc>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d101      	bne.n	800a4dc <HAL_GPIO_Init+0x1e0>
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e006      	b.n	800a4ea <HAL_GPIO_Init+0x1ee>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	e004      	b.n	800a4ea <HAL_GPIO_Init+0x1ee>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e002      	b.n	800a4ea <HAL_GPIO_Init+0x1ee>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e000      	b.n	800a4ea <HAL_GPIO_Init+0x1ee>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ec:	f002 0203 	and.w	r2, r2, #3
 800a4f0:	0092      	lsls	r2, r2, #2
 800a4f2:	4093      	lsls	r3, r2
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a4fa:	492f      	ldr	r1, [pc, #188]	@ (800a5b8 <HAL_GPIO_Init+0x2bc>)
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fe:	089b      	lsrs	r3, r3, #2
 800a500:	3302      	adds	r3, #2
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d006      	beq.n	800a522 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a514:	4b2d      	ldr	r3, [pc, #180]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	492c      	ldr	r1, [pc, #176]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	608b      	str	r3, [r1, #8]
 800a520:	e006      	b.n	800a530 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a522:	4b2a      	ldr	r3, [pc, #168]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	43db      	mvns	r3, r3
 800a52a:	4928      	ldr	r1, [pc, #160]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d006      	beq.n	800a54a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a53c:	4b23      	ldr	r3, [pc, #140]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	4922      	ldr	r1, [pc, #136]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	4313      	orrs	r3, r2
 800a546:	60cb      	str	r3, [r1, #12]
 800a548:	e006      	b.n	800a558 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a54a:	4b20      	ldr	r3, [pc, #128]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	43db      	mvns	r3, r3
 800a552:	491e      	ldr	r1, [pc, #120]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a554:	4013      	ands	r3, r2
 800a556:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d006      	beq.n	800a572 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a564:	4b19      	ldr	r3, [pc, #100]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	4918      	ldr	r1, [pc, #96]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	604b      	str	r3, [r1, #4]
 800a570:	e006      	b.n	800a580 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a572:	4b16      	ldr	r3, [pc, #88]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	43db      	mvns	r3, r3
 800a57a:	4914      	ldr	r1, [pc, #80]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d021      	beq.n	800a5d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a58c:	4b0f      	ldr	r3, [pc, #60]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	490e      	ldr	r1, [pc, #56]	@ (800a5cc <HAL_GPIO_Init+0x2d0>)
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	4313      	orrs	r3, r2
 800a596:	600b      	str	r3, [r1, #0]
 800a598:	e021      	b.n	800a5de <HAL_GPIO_Init+0x2e2>
 800a59a:	bf00      	nop
 800a59c:	10320000 	.word	0x10320000
 800a5a0:	10310000 	.word	0x10310000
 800a5a4:	10220000 	.word	0x10220000
 800a5a8:	10210000 	.word	0x10210000
 800a5ac:	10120000 	.word	0x10120000
 800a5b0:	10110000 	.word	0x10110000
 800a5b4:	40021000 	.word	0x40021000
 800a5b8:	40010000 	.word	0x40010000
 800a5bc:	40010800 	.word	0x40010800
 800a5c0:	40010c00 	.word	0x40010c00
 800a5c4:	40011000 	.word	0x40011000
 800a5c8:	40011400 	.word	0x40011400
 800a5cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a600 <HAL_GPIO_Init+0x304>)
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	4909      	ldr	r1, [pc, #36]	@ (800a600 <HAL_GPIO_Init+0x304>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f47f ae8e 	bne.w	800a310 <HAL_GPIO_Init+0x14>
  }
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	372c      	adds	r7, #44	@ 0x2c
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc80      	pop	{r7}
 800a5fe:	4770      	bx	lr
 800a600:	40010400 	.word	0x40010400

0800a604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	807b      	strh	r3, [r7, #2]
 800a610:	4613      	mov	r3, r2
 800a612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a614:	787b      	ldrb	r3, [r7, #1]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a61a:	887a      	ldrh	r2, [r7, #2]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a620:	e003      	b.n	800a62a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a622:	887b      	ldrh	r3, [r7, #2]
 800a624:	041a      	lsls	r2, r3, #16
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	611a      	str	r2, [r3, #16]
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr

0800a634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a63e:	4b08      	ldr	r3, [pc, #32]	@ (800a660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a640:	695a      	ldr	r2, [r3, #20]
 800a642:	88fb      	ldrh	r3, [r7, #6]
 800a644:	4013      	ands	r3, r2
 800a646:	2b00      	cmp	r3, #0
 800a648:	d006      	beq.n	800a658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a64a:	4a05      	ldr	r2, [pc, #20]	@ (800a660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a64c:	88fb      	ldrh	r3, [r7, #6]
 800a64e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a650:	88fb      	ldrh	r3, [r7, #6]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f806 	bl	800a664 <HAL_GPIO_EXTI_Callback>
  }
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	40010400 	.word	0x40010400

0800a664 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a66e:	bf00      	nop
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	bc80      	pop	{r7}
 800a676:	4770      	bx	lr

0800a678 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a67c:	4b03      	ldr	r3, [pc, #12]	@ (800a68c <HAL_PWR_EnableBkUpAccess+0x14>)
 800a67e:	2201      	movs	r2, #1
 800a680:	601a      	str	r2, [r3, #0]
}
 800a682:	bf00      	nop
 800a684:	46bd      	mov	sp, r7
 800a686:	bc80      	pop	{r7}
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	420e0020 	.word	0x420e0020

0800a690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e272      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8087 	beq.w	800a7be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a6b0:	4b92      	ldr	r3, [pc, #584]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f003 030c 	and.w	r3, r3, #12
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d00c      	beq.n	800a6d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a6bc:	4b8f      	ldr	r3, [pc, #572]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f003 030c 	and.w	r3, r3, #12
 800a6c4:	2b08      	cmp	r3, #8
 800a6c6:	d112      	bne.n	800a6ee <HAL_RCC_OscConfig+0x5e>
 800a6c8:	4b8c      	ldr	r3, [pc, #560]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6d4:	d10b      	bne.n	800a6ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6d6:	4b89      	ldr	r3, [pc, #548]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d06c      	beq.n	800a7bc <HAL_RCC_OscConfig+0x12c>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d168      	bne.n	800a7bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e24c      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6f6:	d106      	bne.n	800a706 <HAL_RCC_OscConfig+0x76>
 800a6f8:	4b80      	ldr	r3, [pc, #512]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a7f      	ldr	r2, [pc, #508]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a6fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	e02e      	b.n	800a764 <HAL_RCC_OscConfig+0xd4>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10c      	bne.n	800a728 <HAL_RCC_OscConfig+0x98>
 800a70e:	4b7b      	ldr	r3, [pc, #492]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a7a      	ldr	r2, [pc, #488]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	4b78      	ldr	r3, [pc, #480]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a77      	ldr	r2, [pc, #476]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a720:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	e01d      	b.n	800a764 <HAL_RCC_OscConfig+0xd4>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a730:	d10c      	bne.n	800a74c <HAL_RCC_OscConfig+0xbc>
 800a732:	4b72      	ldr	r3, [pc, #456]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a71      	ldr	r2, [pc, #452]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	4b6f      	ldr	r3, [pc, #444]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a6e      	ldr	r2, [pc, #440]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	e00b      	b.n	800a764 <HAL_RCC_OscConfig+0xd4>
 800a74c:	4b6b      	ldr	r3, [pc, #428]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a6a      	ldr	r2, [pc, #424]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	4b68      	ldr	r3, [pc, #416]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a67      	ldr	r2, [pc, #412]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a75e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d013      	beq.n	800a794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a76c:	f7fe fc26 	bl	8008fbc <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a774:	f7fe fc22 	bl	8008fbc <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b64      	cmp	r3, #100	@ 0x64
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e200      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a786:	4b5d      	ldr	r3, [pc, #372]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f0      	beq.n	800a774 <HAL_RCC_OscConfig+0xe4>
 800a792:	e014      	b.n	800a7be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a794:	f7fe fc12 	bl	8008fbc <HAL_GetTick>
 800a798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a79a:	e008      	b.n	800a7ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a79c:	f7fe fc0e 	bl	8008fbc <HAL_GetTick>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	2b64      	cmp	r3, #100	@ 0x64
 800a7a8:	d901      	bls.n	800a7ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e1ec      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7ae:	4b53      	ldr	r3, [pc, #332]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f0      	bne.n	800a79c <HAL_RCC_OscConfig+0x10c>
 800a7ba:	e000      	b.n	800a7be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0302 	and.w	r3, r3, #2
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d063      	beq.n	800a892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7ca:	4b4c      	ldr	r3, [pc, #304]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	f003 030c 	and.w	r3, r3, #12
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00b      	beq.n	800a7ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a7d6:	4b49      	ldr	r3, [pc, #292]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f003 030c 	and.w	r3, r3, #12
 800a7de:	2b08      	cmp	r3, #8
 800a7e0:	d11c      	bne.n	800a81c <HAL_RCC_OscConfig+0x18c>
 800a7e2:	4b46      	ldr	r3, [pc, #280]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d116      	bne.n	800a81c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7ee:	4b43      	ldr	r3, [pc, #268]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d005      	beq.n	800a806 <HAL_RCC_OscConfig+0x176>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d001      	beq.n	800a806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e1c0      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a806:	4b3d      	ldr	r3, [pc, #244]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	4939      	ldr	r1, [pc, #228]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a816:	4313      	orrs	r3, r2
 800a818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a81a:	e03a      	b.n	800a892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d020      	beq.n	800a866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a824:	4b36      	ldr	r3, [pc, #216]	@ (800a900 <HAL_RCC_OscConfig+0x270>)
 800a826:	2201      	movs	r2, #1
 800a828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a82a:	f7fe fbc7 	bl	8008fbc <HAL_GetTick>
 800a82e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a830:	e008      	b.n	800a844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a832:	f7fe fbc3 	bl	8008fbc <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d901      	bls.n	800a844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e1a1      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a844:	4b2d      	ldr	r3, [pc, #180]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0f0      	beq.n	800a832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a850:	4b2a      	ldr	r3, [pc, #168]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	4927      	ldr	r1, [pc, #156]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a860:	4313      	orrs	r3, r2
 800a862:	600b      	str	r3, [r1, #0]
 800a864:	e015      	b.n	800a892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a866:	4b26      	ldr	r3, [pc, #152]	@ (800a900 <HAL_RCC_OscConfig+0x270>)
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a86c:	f7fe fba6 	bl	8008fbc <HAL_GetTick>
 800a870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a872:	e008      	b.n	800a886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a874:	f7fe fba2 	bl	8008fbc <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d901      	bls.n	800a886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e180      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a886:	4b1d      	ldr	r3, [pc, #116]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0302 	and.w	r3, r3, #2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f0      	bne.n	800a874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d03a      	beq.n	800a914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d019      	beq.n	800a8da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8a6:	4b17      	ldr	r3, [pc, #92]	@ (800a904 <HAL_RCC_OscConfig+0x274>)
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8ac:	f7fe fb86 	bl	8008fbc <HAL_GetTick>
 800a8b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8b2:	e008      	b.n	800a8c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8b4:	f7fe fb82 	bl	8008fbc <HAL_GetTick>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d901      	bls.n	800a8c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e160      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a8fc <HAL_RCC_OscConfig+0x26c>)
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d0f0      	beq.n	800a8b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	f000 face 	bl	800ae74 <RCC_Delay>
 800a8d8:	e01c      	b.n	800a914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8da:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <HAL_RCC_OscConfig+0x274>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8e0:	f7fe fb6c 	bl	8008fbc <HAL_GetTick>
 800a8e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8e6:	e00f      	b.n	800a908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8e8:	f7fe fb68 	bl	8008fbc <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d908      	bls.n	800a908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e146      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
 800a8fa:	bf00      	nop
 800a8fc:	40021000 	.word	0x40021000
 800a900:	42420000 	.word	0x42420000
 800a904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a908:	4b92      	ldr	r3, [pc, #584]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90c:	f003 0302 	and.w	r3, r3, #2
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e9      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 80a6 	beq.w	800aa6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a922:	2300      	movs	r3, #0
 800a924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a926:	4b8b      	ldr	r3, [pc, #556]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10d      	bne.n	800a94e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a932:	4b88      	ldr	r3, [pc, #544]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	4a87      	ldr	r2, [pc, #540]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a93c:	61d3      	str	r3, [r2, #28]
 800a93e:	4b85      	ldr	r3, [pc, #532]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a946:	60bb      	str	r3, [r7, #8]
 800a948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a94a:	2301      	movs	r3, #1
 800a94c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a94e:	4b82      	ldr	r3, [pc, #520]	@ (800ab58 <HAL_RCC_OscConfig+0x4c8>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a956:	2b00      	cmp	r3, #0
 800a958:	d118      	bne.n	800a98c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a95a:	4b7f      	ldr	r3, [pc, #508]	@ (800ab58 <HAL_RCC_OscConfig+0x4c8>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a7e      	ldr	r2, [pc, #504]	@ (800ab58 <HAL_RCC_OscConfig+0x4c8>)
 800a960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a966:	f7fe fb29 	bl	8008fbc <HAL_GetTick>
 800a96a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a96c:	e008      	b.n	800a980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a96e:	f7fe fb25 	bl	8008fbc <HAL_GetTick>
 800a972:	4602      	mov	r2, r0
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	2b64      	cmp	r3, #100	@ 0x64
 800a97a:	d901      	bls.n	800a980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e103      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a980:	4b75      	ldr	r3, [pc, #468]	@ (800ab58 <HAL_RCC_OscConfig+0x4c8>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0f0      	beq.n	800a96e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d106      	bne.n	800a9a2 <HAL_RCC_OscConfig+0x312>
 800a994:	4b6f      	ldr	r3, [pc, #444]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	4a6e      	ldr	r2, [pc, #440]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a99a:	f043 0301 	orr.w	r3, r3, #1
 800a99e:	6213      	str	r3, [r2, #32]
 800a9a0:	e02d      	b.n	800a9fe <HAL_RCC_OscConfig+0x36e>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10c      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x334>
 800a9aa:	4b6a      	ldr	r3, [pc, #424]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	4a69      	ldr	r2, [pc, #420]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	6213      	str	r3, [r2, #32]
 800a9b6:	4b67      	ldr	r3, [pc, #412]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	4a66      	ldr	r2, [pc, #408]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9bc:	f023 0304 	bic.w	r3, r3, #4
 800a9c0:	6213      	str	r3, [r2, #32]
 800a9c2:	e01c      	b.n	800a9fe <HAL_RCC_OscConfig+0x36e>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	2b05      	cmp	r3, #5
 800a9ca:	d10c      	bne.n	800a9e6 <HAL_RCC_OscConfig+0x356>
 800a9cc:	4b61      	ldr	r3, [pc, #388]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	4a60      	ldr	r2, [pc, #384]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9d2:	f043 0304 	orr.w	r3, r3, #4
 800a9d6:	6213      	str	r3, [r2, #32]
 800a9d8:	4b5e      	ldr	r3, [pc, #376]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	4a5d      	ldr	r2, [pc, #372]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9de:	f043 0301 	orr.w	r3, r3, #1
 800a9e2:	6213      	str	r3, [r2, #32]
 800a9e4:	e00b      	b.n	800a9fe <HAL_RCC_OscConfig+0x36e>
 800a9e6:	4b5b      	ldr	r3, [pc, #364]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	4a5a      	ldr	r2, [pc, #360]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9ec:	f023 0301 	bic.w	r3, r3, #1
 800a9f0:	6213      	str	r3, [r2, #32]
 800a9f2:	4b58      	ldr	r3, [pc, #352]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	4a57      	ldr	r2, [pc, #348]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800a9f8:	f023 0304 	bic.w	r3, r3, #4
 800a9fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d015      	beq.n	800aa32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa06:	f7fe fad9 	bl	8008fbc <HAL_GetTick>
 800aa0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa0c:	e00a      	b.n	800aa24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa0e:	f7fe fad5 	bl	8008fbc <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d901      	bls.n	800aa24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e0b1      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa24:	4b4b      	ldr	r3, [pc, #300]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0ee      	beq.n	800aa0e <HAL_RCC_OscConfig+0x37e>
 800aa30:	e014      	b.n	800aa5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa32:	f7fe fac3 	bl	8008fbc <HAL_GetTick>
 800aa36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa38:	e00a      	b.n	800aa50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa3a:	f7fe fabf 	bl	8008fbc <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d901      	bls.n	800aa50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e09b      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa50:	4b40      	ldr	r3, [pc, #256]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	f003 0302 	and.w	r3, r3, #2
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1ee      	bne.n	800aa3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d105      	bne.n	800aa6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa62:	4b3c      	ldr	r3, [pc, #240]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	4a3b      	ldr	r2, [pc, #236]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aa68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 8087 	beq.w	800ab86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa78:	4b36      	ldr	r3, [pc, #216]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f003 030c 	and.w	r3, r3, #12
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	d061      	beq.n	800ab48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d146      	bne.n	800ab1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa8c:	4b33      	ldr	r3, [pc, #204]	@ (800ab5c <HAL_RCC_OscConfig+0x4cc>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa92:	f7fe fa93 	bl	8008fbc <HAL_GetTick>
 800aa96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa98:	e008      	b.n	800aaac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa9a:	f7fe fa8f 	bl	8008fbc <HAL_GetTick>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d901      	bls.n	800aaac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e06d      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aaac:	4b29      	ldr	r3, [pc, #164]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1f0      	bne.n	800aa9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aac0:	d108      	bne.n	800aad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aac2:	4b24      	ldr	r3, [pc, #144]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	4921      	ldr	r1, [pc, #132]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aad0:	4313      	orrs	r3, r2
 800aad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aad4:	4b1f      	ldr	r3, [pc, #124]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a19      	ldr	r1, [r3, #32]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae4:	430b      	orrs	r3, r1
 800aae6:	491b      	ldr	r1, [pc, #108]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aaec:	4b1b      	ldr	r3, [pc, #108]	@ (800ab5c <HAL_RCC_OscConfig+0x4cc>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf2:	f7fe fa63 	bl	8008fbc <HAL_GetTick>
 800aaf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aaf8:	e008      	b.n	800ab0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aafa:	f7fe fa5f 	bl	8008fbc <HAL_GetTick>
 800aafe:	4602      	mov	r2, r0
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d901      	bls.n	800ab0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e03d      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab0c:	4b11      	ldr	r3, [pc, #68]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0f0      	beq.n	800aafa <HAL_RCC_OscConfig+0x46a>
 800ab18:	e035      	b.n	800ab86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab1a:	4b10      	ldr	r3, [pc, #64]	@ (800ab5c <HAL_RCC_OscConfig+0x4cc>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab20:	f7fe fa4c 	bl	8008fbc <HAL_GetTick>
 800ab24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab26:	e008      	b.n	800ab3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab28:	f7fe fa48 	bl	8008fbc <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e026      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab3a:	4b06      	ldr	r3, [pc, #24]	@ (800ab54 <HAL_RCC_OscConfig+0x4c4>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f0      	bne.n	800ab28 <HAL_RCC_OscConfig+0x498>
 800ab46:	e01e      	b.n	800ab86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d107      	bne.n	800ab60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e019      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
 800ab54:	40021000 	.word	0x40021000
 800ab58:	40007000 	.word	0x40007000
 800ab5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ab60:	4b0b      	ldr	r3, [pc, #44]	@ (800ab90 <HAL_RCC_OscConfig+0x500>)
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d106      	bne.n	800ab82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d001      	beq.n	800ab86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	40021000 	.word	0x40021000

0800ab94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0d0      	b.n	800ad4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aba8:	4b6a      	ldr	r3, [pc, #424]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0307 	and.w	r3, r3, #7
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d910      	bls.n	800abd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abb6:	4b67      	ldr	r3, [pc, #412]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f023 0207 	bic.w	r2, r3, #7
 800abbe:	4965      	ldr	r1, [pc, #404]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abc6:	4b63      	ldr	r3, [pc, #396]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f003 0307 	and.w	r3, r3, #7
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d001      	beq.n	800abd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e0b8      	b.n	800ad4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d020      	beq.n	800ac26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abf0:	4b59      	ldr	r3, [pc, #356]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4a58      	ldr	r2, [pc, #352]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800abf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800abfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d005      	beq.n	800ac14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac08:	4b53      	ldr	r3, [pc, #332]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4a52      	ldr	r2, [pc, #328]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800ac12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac14:	4b50      	ldr	r3, [pc, #320]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	494d      	ldr	r1, [pc, #308]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d040      	beq.n	800acb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d107      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac3a:	4b47      	ldr	r3, [pc, #284]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d115      	bne.n	800ac72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e07f      	b.n	800ad4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d107      	bne.n	800ac62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac52:	4b41      	ldr	r3, [pc, #260]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d109      	bne.n	800ac72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e073      	b.n	800ad4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac62:	4b3d      	ldr	r3, [pc, #244]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e06b      	b.n	800ad4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac72:	4b39      	ldr	r3, [pc, #228]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f023 0203 	bic.w	r2, r3, #3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	4936      	ldr	r1, [pc, #216]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ac80:	4313      	orrs	r3, r2
 800ac82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac84:	f7fe f99a 	bl	8008fbc <HAL_GetTick>
 800ac88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac8a:	e00a      	b.n	800aca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac8c:	f7fe f996 	bl	8008fbc <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d901      	bls.n	800aca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e053      	b.n	800ad4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aca2:	4b2d      	ldr	r3, [pc, #180]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f003 020c 	and.w	r2, r3, #12
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d1eb      	bne.n	800ac8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acb4:	4b27      	ldr	r3, [pc, #156]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d210      	bcs.n	800ace4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acc2:	4b24      	ldr	r3, [pc, #144]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f023 0207 	bic.w	r2, r3, #7
 800acca:	4922      	ldr	r1, [pc, #136]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	4313      	orrs	r3, r2
 800acd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acd2:	4b20      	ldr	r3, [pc, #128]	@ (800ad54 <HAL_RCC_ClockConfig+0x1c0>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d001      	beq.n	800ace4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e032      	b.n	800ad4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 0304 	and.w	r3, r3, #4
 800acec:	2b00      	cmp	r3, #0
 800acee:	d008      	beq.n	800ad02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acf0:	4b19      	ldr	r3, [pc, #100]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	4916      	ldr	r1, [pc, #88]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0308 	and.w	r3, r3, #8
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d009      	beq.n	800ad22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad0e:	4b12      	ldr	r3, [pc, #72]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	490e      	ldr	r1, [pc, #56]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad22:	f000 f821 	bl	800ad68 <HAL_RCC_GetSysClockFreq>
 800ad26:	4602      	mov	r2, r0
 800ad28:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <HAL_RCC_ClockConfig+0x1c4>)
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	091b      	lsrs	r3, r3, #4
 800ad2e:	f003 030f 	and.w	r3, r3, #15
 800ad32:	490a      	ldr	r1, [pc, #40]	@ (800ad5c <HAL_RCC_ClockConfig+0x1c8>)
 800ad34:	5ccb      	ldrb	r3, [r1, r3]
 800ad36:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3a:	4a09      	ldr	r2, [pc, #36]	@ (800ad60 <HAL_RCC_ClockConfig+0x1cc>)
 800ad3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ad3e:	4b09      	ldr	r3, [pc, #36]	@ (800ad64 <HAL_RCC_ClockConfig+0x1d0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe f8f8 	bl	8008f38 <HAL_InitTick>

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	40022000 	.word	0x40022000
 800ad58:	40021000 	.word	0x40021000
 800ad5c:	0800b3ec 	.word	0x0800b3ec
 800ad60:	20000008 	.word	0x20000008
 800ad64:	2000000c 	.word	0x2000000c

0800ad68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	2300      	movs	r3, #0
 800ad74:	60bb      	str	r3, [r7, #8]
 800ad76:	2300      	movs	r3, #0
 800ad78:	617b      	str	r3, [r7, #20]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ad82:	4b1e      	ldr	r3, [pc, #120]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x94>)
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f003 030c 	and.w	r3, r3, #12
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d002      	beq.n	800ad98 <HAL_RCC_GetSysClockFreq+0x30>
 800ad92:	2b08      	cmp	r3, #8
 800ad94:	d003      	beq.n	800ad9e <HAL_RCC_GetSysClockFreq+0x36>
 800ad96:	e027      	b.n	800ade8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ad98:	4b19      	ldr	r3, [pc, #100]	@ (800ae00 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad9a:	613b      	str	r3, [r7, #16]
      break;
 800ad9c:	e027      	b.n	800adee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	0c9b      	lsrs	r3, r3, #18
 800ada2:	f003 030f 	and.w	r3, r3, #15
 800ada6:	4a17      	ldr	r2, [pc, #92]	@ (800ae04 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ada8:	5cd3      	ldrb	r3, [r2, r3]
 800adaa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d010      	beq.n	800add8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800adb6:	4b11      	ldr	r3, [pc, #68]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x94>)
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	0c5b      	lsrs	r3, r3, #17
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	4a11      	ldr	r2, [pc, #68]	@ (800ae08 <HAL_RCC_GetSysClockFreq+0xa0>)
 800adc2:	5cd3      	ldrb	r3, [r2, r3]
 800adc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a0d      	ldr	r2, [pc, #52]	@ (800ae00 <HAL_RCC_GetSysClockFreq+0x98>)
 800adca:	fb03 f202 	mul.w	r2, r3, r2
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	fbb2 f3f3 	udiv	r3, r2, r3
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	e004      	b.n	800ade2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a0c      	ldr	r2, [pc, #48]	@ (800ae0c <HAL_RCC_GetSysClockFreq+0xa4>)
 800addc:	fb02 f303 	mul.w	r3, r2, r3
 800ade0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	613b      	str	r3, [r7, #16]
      break;
 800ade6:	e002      	b.n	800adee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ade8:	4b05      	ldr	r3, [pc, #20]	@ (800ae00 <HAL_RCC_GetSysClockFreq+0x98>)
 800adea:	613b      	str	r3, [r7, #16]
      break;
 800adec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adee:	693b      	ldr	r3, [r7, #16]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	371c      	adds	r7, #28
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	40021000 	.word	0x40021000
 800ae00:	007a1200 	.word	0x007a1200
 800ae04:	0800b404 	.word	0x0800b404
 800ae08:	0800b414 	.word	0x0800b414
 800ae0c:	003d0900 	.word	0x003d0900

0800ae10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae10:	b480      	push	{r7}
 800ae12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae14:	4b02      	ldr	r3, [pc, #8]	@ (800ae20 <HAL_RCC_GetHCLKFreq+0x10>)
 800ae16:	681b      	ldr	r3, [r3, #0]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc80      	pop	{r7}
 800ae1e:	4770      	bx	lr
 800ae20:	20000008 	.word	0x20000008

0800ae24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae28:	f7ff fff2 	bl	800ae10 <HAL_RCC_GetHCLKFreq>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	4b05      	ldr	r3, [pc, #20]	@ (800ae44 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	0a1b      	lsrs	r3, r3, #8
 800ae34:	f003 0307 	and.w	r3, r3, #7
 800ae38:	4903      	ldr	r1, [pc, #12]	@ (800ae48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae3a:	5ccb      	ldrb	r3, [r1, r3]
 800ae3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	40021000 	.word	0x40021000
 800ae48:	0800b3fc 	.word	0x0800b3fc

0800ae4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ae50:	f7ff ffde 	bl	800ae10 <HAL_RCC_GetHCLKFreq>
 800ae54:	4602      	mov	r2, r0
 800ae56:	4b05      	ldr	r3, [pc, #20]	@ (800ae6c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	0adb      	lsrs	r3, r3, #11
 800ae5c:	f003 0307 	and.w	r3, r3, #7
 800ae60:	4903      	ldr	r1, [pc, #12]	@ (800ae70 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae62:	5ccb      	ldrb	r3, [r1, r3]
 800ae64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	40021000 	.word	0x40021000
 800ae70:	0800b3fc 	.word	0x0800b3fc

0800ae74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aea8 <RCC_Delay+0x34>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a0a      	ldr	r2, [pc, #40]	@ (800aeac <RCC_Delay+0x38>)
 800ae82:	fba2 2303 	umull	r2, r3, r2, r3
 800ae86:	0a5b      	lsrs	r3, r3, #9
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	fb02 f303 	mul.w	r3, r2, r3
 800ae8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ae90:	bf00      	nop
  }
  while (Delay --);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	1e5a      	subs	r2, r3, #1
 800ae96:	60fa      	str	r2, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f9      	bne.n	800ae90 <RCC_Delay+0x1c>
}
 800ae9c:	bf00      	nop
 800ae9e:	bf00      	nop
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr
 800aea8:	20000008 	.word	0x20000008
 800aeac:	10624dd3 	.word	0x10624dd3

0800aeb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e042      	b.n	800af48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7fd ffb4 	bl	8008e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2224      	movs	r2, #36	@ 0x24
 800aee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68da      	ldr	r2, [r3, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f971 	bl	800b1dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	695a      	ldr	r2, [r3, #20]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2220      	movs	r2, #32
 800af34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2220      	movs	r2, #32
 800af3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	@ 0x28
 800af54:	af02      	add	r7, sp, #8
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	4613      	mov	r3, r2
 800af5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af60:	2300      	movs	r3, #0
 800af62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d175      	bne.n	800b05c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <HAL_UART_Transmit+0x2c>
 800af76:	88fb      	ldrh	r3, [r7, #6]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e06e      	b.n	800b05e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2221      	movs	r2, #33	@ 0x21
 800af8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af8e:	f7fe f815 	bl	8008fbc <HAL_GetTick>
 800af92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	88fa      	ldrh	r2, [r7, #6]
 800af98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	88fa      	ldrh	r2, [r7, #6]
 800af9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afa8:	d108      	bne.n	800afbc <HAL_UART_Transmit+0x6c>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d104      	bne.n	800afbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	61bb      	str	r3, [r7, #24]
 800afba:	e003      	b.n	800afc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800afc4:	e02e      	b.n	800b024 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2200      	movs	r2, #0
 800afce:	2180      	movs	r1, #128	@ 0x80
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f848 	bl	800b066 <UART_WaitOnFlagUntilTimeout>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2220      	movs	r2, #32
 800afe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e03a      	b.n	800b05e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10b      	bne.n	800b006 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800affc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	3302      	adds	r3, #2
 800b002:	61bb      	str	r3, [r7, #24]
 800b004:	e007      	b.n	800b016 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	781a      	ldrb	r2, [r3, #0]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	3301      	adds	r3, #1
 800b014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	3b01      	subs	r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b028:	b29b      	uxth	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1cb      	bne.n	800afc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2200      	movs	r2, #0
 800b036:	2140      	movs	r1, #64	@ 0x40
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 f814 	bl	800b066 <UART_WaitOnFlagUntilTimeout>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2220      	movs	r2, #32
 800b048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e006      	b.n	800b05e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2220      	movs	r2, #32
 800b054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	e000      	b.n	800b05e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b05c:	2302      	movs	r3, #2
  }
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b086      	sub	sp, #24
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	603b      	str	r3, [r7, #0]
 800b072:	4613      	mov	r3, r2
 800b074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b076:	e03b      	b.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07e:	d037      	beq.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b080:	f7fd ff9c 	bl	8008fbc <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	6a3a      	ldr	r2, [r7, #32]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d302      	bcc.n	800b096 <UART_WaitOnFlagUntilTimeout+0x30>
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e03a      	b.n	800b110 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d023      	beq.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b80      	cmp	r3, #128	@ 0x80
 800b0ac:	d020      	beq.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b40      	cmp	r3, #64	@ 0x40
 800b0b2:	d01d      	beq.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0308 	and.w	r3, r3, #8
 800b0be:	2b08      	cmp	r3, #8
 800b0c0:	d116      	bne.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	617b      	str	r3, [r7, #20]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 f81d 	bl	800b118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e00f      	b.n	800b110 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	bf0c      	ite	eq
 800b100:	2301      	moveq	r3, #1
 800b102:	2300      	movne	r3, #0
 800b104:	b2db      	uxtb	r3, r3
 800b106:	461a      	mov	r2, r3
 800b108:	79fb      	ldrb	r3, [r7, #7]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d0b4      	beq.n	800b078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b118:	b480      	push	{r7}
 800b11a:	b095      	sub	sp, #84	@ 0x54
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	330c      	adds	r3, #12
 800b126:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b132:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	330c      	adds	r3, #12
 800b13e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b140:	643a      	str	r2, [r7, #64]	@ 0x40
 800b142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e5      	bne.n	800b120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3314      	adds	r3, #20
 800b15a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	61fb      	str	r3, [r7, #28]
   return(result);
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	f023 0301 	bic.w	r3, r3, #1
 800b16a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3314      	adds	r3, #20
 800b172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b176:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b17a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e5      	bne.n	800b154 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d119      	bne.n	800b1c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	330c      	adds	r3, #12
 800b196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	e853 3f00 	ldrex	r3, [r3]
 800b19e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f023 0310 	bic.w	r3, r3, #16
 800b1a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1b0:	61ba      	str	r2, [r7, #24]
 800b1b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	6979      	ldr	r1, [r7, #20]
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e5      	bne.n	800b190 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b1d2:	bf00      	nop
 800b1d4:	3754      	adds	r7, #84	@ 0x54
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bc80      	pop	{r7}
 800b1da:	4770      	bx	lr

0800b1dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68da      	ldr	r2, [r3, #12]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689a      	ldr	r2, [r3, #8]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	431a      	orrs	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	4313      	orrs	r3, r2
 800b20a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800b216:	f023 030c 	bic.w	r3, r3, #12
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	6812      	ldr	r2, [r2, #0]
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	430b      	orrs	r3, r1
 800b222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	430a      	orrs	r2, r1
 800b238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a2c      	ldr	r2, [pc, #176]	@ (800b2f0 <UART_SetConfig+0x114>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d103      	bne.n	800b24c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b244:	f7ff fe02 	bl	800ae4c <HAL_RCC_GetPCLK2Freq>
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	e002      	b.n	800b252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b24c:	f7ff fdea 	bl	800ae24 <HAL_RCC_GetPCLK1Freq>
 800b250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009a      	lsls	r2, r3, #2
 800b25c:	441a      	add	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	fbb2 f3f3 	udiv	r3, r2, r3
 800b268:	4a22      	ldr	r2, [pc, #136]	@ (800b2f4 <UART_SetConfig+0x118>)
 800b26a:	fba2 2303 	umull	r2, r3, r2, r3
 800b26e:	095b      	lsrs	r3, r3, #5
 800b270:	0119      	lsls	r1, r3, #4
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009a      	lsls	r2, r3, #2
 800b27c:	441a      	add	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	fbb2 f2f3 	udiv	r2, r2, r3
 800b288:	4b1a      	ldr	r3, [pc, #104]	@ (800b2f4 <UART_SetConfig+0x118>)
 800b28a:	fba3 0302 	umull	r0, r3, r3, r2
 800b28e:	095b      	lsrs	r3, r3, #5
 800b290:	2064      	movs	r0, #100	@ 0x64
 800b292:	fb00 f303 	mul.w	r3, r0, r3
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	011b      	lsls	r3, r3, #4
 800b29a:	3332      	adds	r3, #50	@ 0x32
 800b29c:	4a15      	ldr	r2, [pc, #84]	@ (800b2f4 <UART_SetConfig+0x118>)
 800b29e:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a2:	095b      	lsrs	r3, r3, #5
 800b2a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b2a8:	4419      	add	r1, r3
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009a      	lsls	r2, r3, #2
 800b2b4:	441a      	add	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b2f4 <UART_SetConfig+0x118>)
 800b2c2:	fba3 0302 	umull	r0, r3, r3, r2
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	2064      	movs	r0, #100	@ 0x64
 800b2ca:	fb00 f303 	mul.w	r3, r0, r3
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	011b      	lsls	r3, r3, #4
 800b2d2:	3332      	adds	r3, #50	@ 0x32
 800b2d4:	4a07      	ldr	r2, [pc, #28]	@ (800b2f4 <UART_SetConfig+0x118>)
 800b2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2da:	095b      	lsrs	r3, r3, #5
 800b2dc:	f003 020f 	and.w	r2, r3, #15
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	440a      	add	r2, r1
 800b2e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b2e8:	bf00      	nop
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	40013800 	.word	0x40013800
 800b2f4:	51eb851f 	.word	0x51eb851f

0800b2f8 <memcmp>:
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	3901      	subs	r1, #1
 800b2fc:	4402      	add	r2, r0
 800b2fe:	4290      	cmp	r0, r2
 800b300:	d101      	bne.n	800b306 <memcmp+0xe>
 800b302:	2000      	movs	r0, #0
 800b304:	e005      	b.n	800b312 <memcmp+0x1a>
 800b306:	7803      	ldrb	r3, [r0, #0]
 800b308:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	d001      	beq.n	800b314 <memcmp+0x1c>
 800b310:	1b18      	subs	r0, r3, r4
 800b312:	bd10      	pop	{r4, pc}
 800b314:	3001      	adds	r0, #1
 800b316:	e7f2      	b.n	800b2fe <memcmp+0x6>

0800b318 <memset>:
 800b318:	4603      	mov	r3, r0
 800b31a:	4402      	add	r2, r0
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d100      	bne.n	800b322 <memset+0xa>
 800b320:	4770      	bx	lr
 800b322:	f803 1b01 	strb.w	r1, [r3], #1
 800b326:	e7f9      	b.n	800b31c <memset+0x4>

0800b328 <__libc_init_array>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	2600      	movs	r6, #0
 800b32c:	4d0c      	ldr	r5, [pc, #48]	@ (800b360 <__libc_init_array+0x38>)
 800b32e:	4c0d      	ldr	r4, [pc, #52]	@ (800b364 <__libc_init_array+0x3c>)
 800b330:	1b64      	subs	r4, r4, r5
 800b332:	10a4      	asrs	r4, r4, #2
 800b334:	42a6      	cmp	r6, r4
 800b336:	d109      	bne.n	800b34c <__libc_init_array+0x24>
 800b338:	f000 f828 	bl	800b38c <_init>
 800b33c:	2600      	movs	r6, #0
 800b33e:	4d0a      	ldr	r5, [pc, #40]	@ (800b368 <__libc_init_array+0x40>)
 800b340:	4c0a      	ldr	r4, [pc, #40]	@ (800b36c <__libc_init_array+0x44>)
 800b342:	1b64      	subs	r4, r4, r5
 800b344:	10a4      	asrs	r4, r4, #2
 800b346:	42a6      	cmp	r6, r4
 800b348:	d105      	bne.n	800b356 <__libc_init_array+0x2e>
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b350:	4798      	blx	r3
 800b352:	3601      	adds	r6, #1
 800b354:	e7ee      	b.n	800b334 <__libc_init_array+0xc>
 800b356:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35a:	4798      	blx	r3
 800b35c:	3601      	adds	r6, #1
 800b35e:	e7f2      	b.n	800b346 <__libc_init_array+0x1e>
 800b360:	0800b418 	.word	0x0800b418
 800b364:	0800b418 	.word	0x0800b418
 800b368:	0800b418 	.word	0x0800b418
 800b36c:	0800b41c 	.word	0x0800b41c

0800b370 <memcpy>:
 800b370:	440a      	add	r2, r1
 800b372:	4291      	cmp	r1, r2
 800b374:	f100 33ff 	add.w	r3, r0, #4294967295
 800b378:	d100      	bne.n	800b37c <memcpy+0xc>
 800b37a:	4770      	bx	lr
 800b37c:	b510      	push	{r4, lr}
 800b37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b382:	4291      	cmp	r1, r2
 800b384:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b388:	d1f9      	bne.n	800b37e <memcpy+0xe>
 800b38a:	bd10      	pop	{r4, pc}

0800b38c <_init>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	bf00      	nop
 800b390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b392:	bc08      	pop	{r3}
 800b394:	469e      	mov	lr, r3
 800b396:	4770      	bx	lr

0800b398 <_fini>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	bf00      	nop
 800b39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39e:	bc08      	pop	{r3}
 800b3a0:	469e      	mov	lr, r3
 800b3a2:	4770      	bx	lr
